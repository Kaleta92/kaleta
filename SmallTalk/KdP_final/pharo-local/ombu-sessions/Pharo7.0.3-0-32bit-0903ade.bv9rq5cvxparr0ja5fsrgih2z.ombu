OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2020-01-08T03:59:15.797163+01:00' ],		#prior : OmReference [ 'Pharo7.0.3-0-32bit-0903ade.7mjpbpkhuf138t2m6a82npg3r', '60977' ],		#self : OmReference [ '1' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'PPCompositeParser subclass: #CoPGrammer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser-Tools\'',				#superclassName : 'PPCompositeParser'			},			#name : #CoPGrammer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CoPGrammer class\r\tinstanceVariableNames: \'\''				},				#name : #'CoPGrammer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CoPGrammer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser-Tools,			#package : #PetitParser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2020-01-08T03:59:37.214163+01:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'PPCompositeParser subclass: #CoPGrammer\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser-Tools\'',				#superclassName : 'PPCompositeParser'			},			#name : #CoPGrammer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CoPGrammer class\r\tinstanceVariableNames: \'\''				},				#name : #'CoPGrammer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CoPGrammer,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser-Tools,			#package : #PetitParser,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'PPCompositeParser subclass: #CoPGrammer\r\tinstanceVariableNames: \'subt term mul var brackets num pro\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser-Tools\'',				#superclassName : 'PPCompositeParser'			},			#name : #CoPGrammer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammer,						#isMetaSide : false					},					#name : #subt,					#parent : @21				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammer,						#isMetaSide : false					},					#name : #term,					#parent : @21				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammer,						#isMetaSide : false					},					#name : #mul,					#parent : @21				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammer,						#isMetaSide : false					},					#name : #var,					#parent : @21				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammer,						#isMetaSide : false					},					#name : #brackets,					#parent : @21				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammer,						#isMetaSide : false					},					#name : #num,					#parent : @21				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammer,						#isMetaSide : false					},					#name : #pro,					#parent : @21				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CoPGrammer class\r\tinstanceVariableNames: \'\''				},				#name : #'CoPGrammer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CoPGrammer,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser-Tools,			#package : #PetitParser,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:00:21.218163+01:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #term,			#protocol : #'as yet unclassified',			#sourceCode : 'term \r^ subt / pro ',			#stamp : 'MarkusKaleta 1/8/2020 04:00',			#package : #PetitParser		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:00:21.225163+01:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #term,			#protocol : #'as yet unclassified',			#sourceCode : 'term \r^ subt / pro ',			#stamp : 'MarkusKaleta 1/8/2020 04:00',			#package : #PetitParser		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #term,			#protocol : #accessing,			#sourceCode : 'term \r^ subt / pro ',			#stamp : 'MarkusKaleta 1/8/2020 04:00',			#package : #PetitParser		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:00:42.486163+01:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #mul,			#protocol : #'as yet unclassified',			#sourceCode : 'mul \r^ var, $* asParser trim, pro',			#stamp : 'MarkusKaleta 1/8/2020 04:00',			#package : #PetitParser		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:00:42.492163+01:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #mul,			#protocol : #'as yet unclassified',			#sourceCode : 'mul \r^ var, $* asParser trim, pro',			#stamp : 'MarkusKaleta 1/8/2020 04:00',			#package : #PetitParser		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #mul,			#protocol : #accessing,			#sourceCode : 'mul \r^ var, $* asParser trim, pro',			#stamp : 'MarkusKaleta 1/8/2020 04:00',			#package : #PetitParser		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:01:05.711163+01:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #brackets,			#protocol : #'as yet unclassified',			#sourceCode : 'brackets \r^ $( asParser trim, term, $) asParser trim',			#stamp : 'MarkusKaleta 1/8/2020 04:01',			#package : #PetitParser		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:01:05.718163+01:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #brackets,			#protocol : #'as yet unclassified',			#sourceCode : 'brackets \r^ $( asParser trim, term, $) asParser trim',			#stamp : 'MarkusKaleta 1/8/2020 04:01',			#package : #PetitParser		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #brackets,			#protocol : #accessing,			#sourceCode : 'brackets \r^ $( asParser trim, term, $) asParser trim',			#stamp : 'MarkusKaleta 1/8/2020 04:01',			#package : #PetitParser		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:01:20.815163+01:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #var,			#protocol : #'as yet unclassified',			#sourceCode : 'var \r^ num / brackets',			#stamp : 'MarkusKaleta 1/8/2020 04:01',			#package : #PetitParser		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:01:20.821163+01:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #var,			#protocol : #'as yet unclassified',			#sourceCode : 'var \r^ num / brackets',			#stamp : 'MarkusKaleta 1/8/2020 04:01',			#package : #PetitParser		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #var,			#protocol : #accessing,			#sourceCode : 'var \r^ num / brackets',			#stamp : 'MarkusKaleta 1/8/2020 04:01',			#package : #PetitParser		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:01:55.117163+01:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #num,			#protocol : #'as yet unclassified',			#sourceCode : 'num \r^ #digits asParser plus flattern trim ==> [ :str | str asNumber ]',			#stamp : 'MarkusKaleta 1/8/2020 04:01',			#package : #PetitParser		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:01:55.124163+01:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #num,			#protocol : #'as yet unclassified',			#sourceCode : 'num \r^ #digits asParser plus flattern trim ==> [ :str | str asNumber ]',			#stamp : 'MarkusKaleta 1/8/2020 04:01',			#package : #PetitParser		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #num,			#protocol : #accessing,			#sourceCode : 'num \r^ #digits asParser plus flattern trim ==> [ :str | str asNumber ]',			#stamp : 'MarkusKaleta 1/8/2020 04:01',			#package : #PetitParser		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:02:23.576163+01:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #pro,			#protocol : #'as yet unclassified',			#sourceCode : 'pro \r^ mul / var ',			#stamp : 'MarkusKaleta 1/8/2020 04:02',			#package : #PetitParser		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:02:23.583163+01:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #pro,			#protocol : #'as yet unclassified',			#sourceCode : 'pro \r^ mul / var ',			#stamp : 'MarkusKaleta 1/8/2020 04:02',			#package : #PetitParser		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #pro,			#protocol : #accessing,			#sourceCode : 'pro \r^ mul / var ',			#stamp : 'MarkusKaleta 1/8/2020 04:02',			#package : #PetitParser		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:03:49.057163+01:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #subt,			#protocol : #'as yet unclassified',			#sourceCode : 'subt \r^ pro, $- asParser trim, term',			#stamp : 'MarkusKaleta 1/8/2020 04:03',			#package : #PetitParser		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:03:49.064163+01:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #subt,			#protocol : #'as yet unclassified',			#sourceCode : 'subt \r^ pro, $- asParser trim, term',			#stamp : 'MarkusKaleta 1/8/2020 04:03',			#package : #PetitParser		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #subt,			#protocol : #accessing,			#sourceCode : 'subt \r^ pro, $- asParser trim, term',			#stamp : 'MarkusKaleta 1/8/2020 04:03',			#package : #PetitParser		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:04:11.021163+01:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'PPCompositeParser subclass: #CoPGrammer\r\tinstanceVariableNames: \'subt term mul var brackets num pro\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitParser-Tools\'',				#superclassName : 'PPCompositeParser'			},			#name : #CoPGrammer,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammer,						#isMetaSide : false					},					#name : #subt,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammer,						#isMetaSide : false					},					#name : #term,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammer,						#isMetaSide : false					},					#name : #mul,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammer,						#isMetaSide : false					},					#name : #var,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammer,						#isMetaSide : false					},					#name : #brackets,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammer,						#isMetaSide : false					},					#name : #num,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammer,						#isMetaSide : false					},					#name : #pro,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CoPGrammer class\r\tinstanceVariableNames: \'\''				},				#name : #'CoPGrammer class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CoPGrammer,					#isMetaSide : false				},				#parent : @7,				#content : 'by Markus Kaleta\rLeacture: Concepts of Programminglanguage',				#stamp : 'MarkusKaleta 1/8/2020 04:04'			},			#classVariables : OrderedCollection [ ],			#category : #PetitParser-Tools,			#package : #PetitParser,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'by Markus Kaleta\rLeacture: Concepts of Programminglanguage',		#newStamp : 'MarkusKaleta 1/8/2020 04:04'	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:04:26.570163+01:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #start,			#protocol : #'as yet unclassified',			#sourceCode : 'start \r^ term end',			#stamp : 'MarkusKaleta 1/8/2020 04:04',			#package : #PetitParser		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:04:26.576163+01:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #start,			#protocol : #'as yet unclassified',			#sourceCode : 'start \r^ term end',			#stamp : 'MarkusKaleta 1/8/2020 04:04',			#package : #PetitParser		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #start,			#protocol : #accessing,			#sourceCode : 'start \r^ term end',			#stamp : 'MarkusKaleta 1/8/2020 04:04',			#package : #PetitParser		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:05:41.638163+01:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #num,			#protocol : #accessing,			#sourceCode : 'num \r^ #digits asParser plus flattern trim ==> [ :str | str asNumber ]',			#stamp : 'MarkusKaleta 1/8/2020 04:01',			#package : #PetitParser		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #num,			#protocol : #accessing,			#sourceCode : 'num \r^ #digits asParser plus flatten trim ==> [ :str | str asNumber ]',			#stamp : 'MarkusKaleta 1/8/2020 04:05',			#package : #PetitParser		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:05:58.087163+01:00' ],		#prior : OmReference [ '20' ],		#self : OmReference [ '21' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #num,			#protocol : #accessing,			#sourceCode : 'num \r^ #digits asParser plus flatten trim ==> [ :str | str asNumber ]',			#stamp : 'MarkusKaleta 1/8/2020 04:05',			#package : #PetitParser		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammer,				#isMetaSide : false			},			#name : #num,			#protocol : #accessing,			#sourceCode : 'num \r^ #digit asParser plus flatten trim ==> [ :str | str asNumber ]',			#stamp : 'MarkusKaleta 1/8/2020 04:05',			#package : #PetitParser		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:09:13.007163+01:00' ],		#prior : OmReference [ '21' ],		#self : OmReference [ '22' ]	},	#content : EpClassAddition {		#class : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'PPCompositeParserTest subclass: #CoPGrammerTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitTests-Core\'',				#superclassName : 'PPCompositeParserTest'			},			#name : #CoPGrammerTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CoPGrammerTest class\r\tinstanceVariableNames: \'\''				},				#name : #'CoPGrammerTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CoPGrammerTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitTests-Core,			#package : #PetitTests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:11:57.617163+01:00' ],		#prior : OmReference [ '22' ],		#self : OmReference [ '23' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'PPCompositeParserTest subclass: #CoPGrammerTest\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitTests-Core\'',				#superclassName : 'PPCompositeParserTest'			},			#name : #CoPGrammerTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CoPGrammerTest class\r\tinstanceVariableNames: \'\''				},				#name : #'CoPGrammerTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CoPGrammerTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitTests-Core,			#package : #PetitTests,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'PPCompositeParserTest subclass: #CoPGrammerTest\r\tinstanceVariableNames: \'testBrackets testMul testNum testPro testSubt testTerm testVar\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitTests-Core\'',				#superclassName : 'PPCompositeParserTest'			},			#name : #CoPGrammerTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammerTest,						#isMetaSide : false					},					#name : #testBrackets,					#parent : @21				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammerTest,						#isMetaSide : false					},					#name : #testMul,					#parent : @21				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammerTest,						#isMetaSide : false					},					#name : #testNum,					#parent : @21				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammerTest,						#isMetaSide : false					},					#name : #testPro,					#parent : @21				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammerTest,						#isMetaSide : false					},					#name : #testSubt,					#parent : @21				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammerTest,						#isMetaSide : false					},					#name : #testTerm,					#parent : @21				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammerTest,						#isMetaSide : false					},					#name : #testVar,					#parent : @21				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CoPGrammerTest class\r\tinstanceVariableNames: \'\''				},				#name : #'CoPGrammerTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CoPGrammerTest,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitTests-Core,			#package : #PetitTests,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:12:34.512163+01:00' ],		#prior : OmReference [ '23' ],		#self : OmReference [ '24' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testNumber,			#protocol : #'as yet unclassified',			#sourceCode : 'testNumber\rself parse: \'123\' rule: #number',			#stamp : 'MarkusKaleta 1/8/2020 04:12',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:12:34.518163+01:00' ],		#prior : OmReference [ '24' ],		#self : OmReference [ '25' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testNumber,			#protocol : #'as yet unclassified',			#sourceCode : 'testNumber\rself parse: \'123\' rule: #number',			#stamp : 'MarkusKaleta 1/8/2020 04:12',			#package : #PetitTests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testNumber,			#protocol : #tests,			#sourceCode : 'testNumber\rself parse: \'123\' rule: #number',			#stamp : 'MarkusKaleta 1/8/2020 04:12',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:12:46.187163+01:00' ],		#prior : OmReference [ '25' ],		#self : OmReference [ '26' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testNumber,			#protocol : #tests,			#sourceCode : 'testNumber\rself parse: \'123\' rule: #number',			#stamp : 'MarkusKaleta 1/8/2020 04:12',			#package : #PetitTests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testNumber,			#protocol : #tests,			#sourceCode : 'testNumber\rself parse: \'123\' rule: #num',			#stamp : 'MarkusKaleta 1/8/2020 04:12',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:12:57.402163+01:00' ],		#prior : OmReference [ '26' ],		#self : OmReference [ '27' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testNuum,			#protocol : #tests,			#sourceCode : 'testNuum\rself parse: \'123\' rule: #num',			#stamp : 'MarkusKaleta 1/8/2020 04:12',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:13:09.284163+01:00' ],		#prior : OmReference [ '27' ],		#self : OmReference [ '28' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testNumber,			#protocol : #tests,			#sourceCode : 'testNumber\rself parse: \'123\' rule: #num',			#stamp : 'MarkusKaleta 1/8/2020 04:12',			#package : #PetitTests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testNumber,			#protocol : #'as yet unclassified',			#sourceCode : 'testNumber\rself parse: \'123\' rule: #num',			#stamp : 'MarkusKaleta 1/8/2020 04:12',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:13:09.285163+01:00' ],		#prior : OmReference [ '28' ],		#self : OmReference [ '29' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testNumber,			#protocol : #tests,			#sourceCode : 'testNumber\rself parse: \'123\' rule: #num',			#stamp : 'MarkusKaleta 1/8/2020 04:12',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:13:27.363163+01:00' ],		#prior : OmReference [ '29' ],		#self : OmReference [ '30' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testNuum,			#protocol : #tests,			#sourceCode : 'testNuum\rself parse: \'123\' rule: #num',			#stamp : 'MarkusKaleta 1/8/2020 04:12',			#package : #PetitTests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testNuum,			#protocol : #'as yet unclassified',			#sourceCode : 'testNuum\rself parse: \'123\' rule: #num',			#stamp : 'MarkusKaleta 1/8/2020 04:12',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:13:27.365163+01:00' ],		#prior : OmReference [ '30' ],		#self : OmReference [ '31' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testNuum,			#protocol : #tests,			#sourceCode : 'testNuum\rself parse: \'123\' rule: #num',			#stamp : 'MarkusKaleta 1/8/2020 04:12',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:13:27.371163+01:00' ],		#prior : OmReference [ '31' ],		#self : OmReference [ '32' ]	},	#content : EpProtocolRemoval {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'PPCompositeParserTest subclass: #CoPGrammerTest\r\tinstanceVariableNames: \'testBrackets testMul testNum testPro testSubt testTerm testVar\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitTests-Core\'',				#superclassName : 'PPCompositeParserTest'			},			#name : #CoPGrammerTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammerTest,						#isMetaSide : false					},					#name : #testBrackets,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammerTest,						#isMetaSide : false					},					#name : #testMul,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammerTest,						#isMetaSide : false					},					#name : #testNum,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammerTest,						#isMetaSide : false					},					#name : #testPro,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammerTest,						#isMetaSide : false					},					#name : #testSubt,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammerTest,						#isMetaSide : false					},					#name : #testTerm,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammerTest,						#isMetaSide : false					},					#name : #testVar,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CoPGrammerTest class\r\tinstanceVariableNames: \'\''				},				#name : #'CoPGrammerTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CoPGrammerTest,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #PetitTests-Core,			#package : #PetitTests,			#sharedPools : OrderedCollection [ ]		},		#protocol : #tests	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:13:54.870163+01:00' ],		#prior : OmReference [ '32' ],		#self : OmReference [ '33' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testSubt,			#protocol : #'as yet unclassified',			#sourceCode : 'testSubt \rself parse: \'999-55\' rule: #subt.',			#stamp : 'MarkusKaleta 1/8/2020 04:13',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:13:54.876163+01:00' ],		#prior : OmReference [ '33' ],		#self : OmReference [ '34' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testSubt,			#protocol : #'as yet unclassified',			#sourceCode : 'testSubt \rself parse: \'999-55\' rule: #subt.',			#stamp : 'MarkusKaleta 1/8/2020 04:13',			#package : #PetitTests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testSubt,			#protocol : #accessing,			#sourceCode : 'testSubt \rself parse: \'999-55\' rule: #subt.',			#stamp : 'MarkusKaleta 1/8/2020 04:13',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:14:42.561163+01:00' ],		#prior : OmReference [ '34' ],		#self : OmReference [ '35' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #parserClass,			#protocol : #'as yet unclassified',			#sourceCode : 'parserClass \r^ CoPGrammer ',			#stamp : 'MarkusKaleta 1/8/2020 04:14',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:14:42.567163+01:00' ],		#prior : OmReference [ '35' ],		#self : OmReference [ '36' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #parserClass,			#protocol : #'as yet unclassified',			#sourceCode : 'parserClass \r^ CoPGrammer ',			#stamp : 'MarkusKaleta 1/8/2020 04:14',			#package : #PetitTests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #parserClass,			#protocol : #accessing,			#sourceCode : 'parserClass \r^ CoPGrammer ',			#stamp : 'MarkusKaleta 1/8/2020 04:14',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:15:19.959163+01:00' ],		#prior : OmReference [ '36' ],		#self : OmReference [ '37' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testNuum,			#protocol : #'as yet unclassified',			#sourceCode : 'testNuum\rself parse: \'1909\' rule: #num.',			#stamp : 'MarkusKaleta 1/8/2020 04:15',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:15:19.966163+01:00' ],		#prior : OmReference [ '37' ],		#self : OmReference [ '38' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testNuum,			#protocol : #'as yet unclassified',			#sourceCode : 'testNuum\rself parse: \'1909\' rule: #num.',			#stamp : 'MarkusKaleta 1/8/2020 04:15',			#package : #PetitTests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testNuum,			#protocol : #tests,			#sourceCode : 'testNuum\rself parse: \'1909\' rule: #num.',			#stamp : 'MarkusKaleta 1/8/2020 04:15',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:17:17.574163+01:00' ],		#prior : OmReference [ '38' ],		#self : OmReference [ '39' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testPro,			#protocol : #'as yet unclassified',			#sourceCode : 'testPro \rself parse: \'17*37\' rule: #pro.',			#stamp : 'MarkusKaleta 1/8/2020 04:17',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:17:17.579163+01:00' ],		#prior : OmReference [ '39' ],		#self : OmReference [ '40' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testPro,			#protocol : #'as yet unclassified',			#sourceCode : 'testPro \rself parse: \'17*37\' rule: #pro.',			#stamp : 'MarkusKaleta 1/8/2020 04:17',			#package : #PetitTests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testPro,			#protocol : #accessing,			#sourceCode : 'testPro \rself parse: \'17*37\' rule: #pro.',			#stamp : 'MarkusKaleta 1/8/2020 04:17',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:19:14.245163+01:00' ],		#prior : OmReference [ '40' ],		#self : OmReference [ '41' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testPro,			#protocol : #accessing,			#sourceCode : 'testPro \rself parse: \'17*37\' rule: #pro.',			#stamp : 'MarkusKaleta 1/8/2020 04:17',			#package : #PetitTests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testPro,			#protocol : #accessing,			#sourceCode : 'testPro \rself parse: \'17*37\' rule: #mul.',			#stamp : 'MarkusKaleta 1/8/2020 04:19',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:19:18.058163+01:00' ],		#prior : OmReference [ '41' ],		#self : OmReference [ '42' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testPro,			#protocol : #accessing,			#sourceCode : 'testPro \rself parse: \'17*37\' rule: #mul.',			#stamp : 'MarkusKaleta 1/8/2020 04:19',			#package : #PetitTests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testPro,			#protocol : #'as yet unclassified',			#sourceCode : 'testPro \rself parse: \'17*37\' rule: #mul.',			#stamp : 'MarkusKaleta 1/8/2020 04:19',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:19:18.061163+01:00' ],		#prior : OmReference [ '42' ],		#self : OmReference [ '43' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testPro,			#protocol : #accessing,			#sourceCode : 'testPro \rself parse: \'17*37\' rule: #mul.',			#stamp : 'MarkusKaleta 1/8/2020 04:19',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:19:55.297163+01:00' ],		#prior : OmReference [ '43' ],		#self : OmReference [ '44' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testMul,			#protocol : #'as yet unclassified',			#sourceCode : 'testMul \rself parse: \'17*39\' rule: #mul.',			#stamp : 'MarkusKaleta 1/8/2020 04:19',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:19:55.303163+01:00' ],		#prior : OmReference [ '44' ],		#self : OmReference [ '45' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testMul,			#protocol : #'as yet unclassified',			#sourceCode : 'testMul \rself parse: \'17*39\' rule: #mul.',			#stamp : 'MarkusKaleta 1/8/2020 04:19',			#package : #PetitTests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testMul,			#protocol : #accessing,			#sourceCode : 'testMul \rself parse: \'17*39\' rule: #mul.',			#stamp : 'MarkusKaleta 1/8/2020 04:19',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:20:20.286163+01:00' ],		#prior : OmReference [ '45' ],		#self : OmReference [ '46' ]	},	#content : EpBehaviorCommentChange {		#behavior : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'PPCompositeParserTest subclass: #CoPGrammerTest\r\tinstanceVariableNames: \'testBrackets testMul testNum testPro testSubt testTerm testVar\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'PetitTests-Core\'',				#superclassName : 'PPCompositeParserTest'			},			#name : #CoPGrammerTest,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammerTest,						#isMetaSide : false					},					#name : #testBrackets,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammerTest,						#isMetaSide : false					},					#name : #testMul,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammerTest,						#isMetaSide : false					},					#name : #testNum,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammerTest,						#isMetaSide : false					},					#name : #testPro,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammerTest,						#isMetaSide : false					},					#name : #testSubt,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammerTest,						#isMetaSide : false					},					#name : #testTerm,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoPGrammerTest,						#isMetaSide : false					},					#name : #testVar,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CoPGrammerTest class\r\tinstanceVariableNames: \'\''				},				#name : #'CoPGrammerTest class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CoPGrammerTest,					#isMetaSide : false				},				#parent : @7,				#content : 'by Markus Kaleta\rTests for CoPGrammer methods',				#stamp : 'MarkusKaleta 1/8/2020 04:20'			},			#classVariables : OrderedCollection [ ],			#category : #PetitTests-Core,			#package : #PetitTests,			#sharedPools : OrderedCollection [ ]		},		#oldComment : '',		#newComment : 'by Markus Kaleta\rTests for CoPGrammer methods',		#newStamp : 'MarkusKaleta 1/8/2020 04:20'	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:25:32.471163+01:00' ],		#prior : OmReference [ '46' ],		#self : OmReference [ '47' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testTerm,			#protocol : #'as yet unclassified',			#sourceCode : 'testTerm \rself parse: \'subt / pro\' rule: #term. ',			#stamp : 'MarkusKaleta 1/8/2020 04:25',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T04:25:32.478163+01:00' ],		#prior : OmReference [ '47' ],		#self : OmReference [ '48' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testTerm,			#protocol : #'as yet unclassified',			#sourceCode : 'testTerm \rself parse: \'subt / pro\' rule: #term. ',			#stamp : 'MarkusKaleta 1/8/2020 04:25',			#package : #PetitTests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testTerm,			#protocol : #accessing,			#sourceCode : 'testTerm \rself parse: \'subt / pro\' rule: #term. ',			#stamp : 'MarkusKaleta 1/8/2020 04:25',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T11:58:40.984163+01:00' ],		#prior : OmReference [ '48' ],		#self : OmReference [ '49' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testOpenBraces,			#protocol : #'as yet unclassified',			#sourceCode : 'testOpenBraces\rself parse: \'4(4\' rule: #braces.',			#stamp : 'MarkusKaleta 1/8/2020 11:58',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T11:58:40.992163+01:00' ],		#prior : OmReference [ '49' ],		#self : OmReference [ '50' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testOpenBraces,			#protocol : #'as yet unclassified',			#sourceCode : 'testOpenBraces\rself parse: \'4(4\' rule: #braces.',			#stamp : 'MarkusKaleta 1/8/2020 11:58',			#package : #PetitTests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testOpenBraces,			#protocol : #tests,			#sourceCode : 'testOpenBraces\rself parse: \'4(4\' rule: #braces.',			#stamp : 'MarkusKaleta 1/8/2020 11:58',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T11:59:22.440163+01:00' ],		#prior : OmReference [ '50' ],		#self : OmReference [ '51' ]	},	#content : EpRenameMethodRefactoring {		#oldSelector : #testOpenBraces,		#newSelector : #testOpenBrackets,		#affectedClassName : 'CoPGrammerTest>>#testOpenBraces'	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#prior : OmReference [ '51' ],		#self : OmReference [ '52' ],		#time : DateAndTime [ '2020-01-08T11:59:22.450163+01:00' ],		#trigger : @3	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testOpenBrackets,			#protocol : #tests,			#sourceCode : 'testOpenBrackets\rself parse: \'4(4\' rule: #braces.',			#stamp : 'MarkusKaleta 1/8/2020 11:59',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#prior : OmReference [ '52' ],		#self : OmReference [ '53' ],		#time : DateAndTime [ '2020-01-08T11:59:22.485163+01:00' ],		#trigger : OmReference [ '51' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testOpenBraces,			#protocol : #tests,			#sourceCode : 'testOpenBraces\rself parse: \'4(4\' rule: #braces.',			#stamp : 'MarkusKaleta 1/8/2020 11:58',			#package : #PetitTests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testOpenBraces,			#protocol : #'as yet unclassified',			#sourceCode : 'testOpenBraces\rself parse: \'4(4\' rule: #braces.',			#stamp : 'MarkusKaleta 1/8/2020 11:58',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#prior : OmReference [ '53' ],		#self : OmReference [ '54' ],		#time : DateAndTime [ '2020-01-08T11:59:22.486163+01:00' ],		#trigger : OmReference [ '51' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testOpenBraces,			#protocol : #tests,			#sourceCode : 'testOpenBraces\rself parse: \'4(4\' rule: #braces.',			#stamp : 'MarkusKaleta 1/8/2020 11:58',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T11:59:29.421163+01:00' ],		#prior : OmReference [ '54' ],		#self : OmReference [ '55' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testOpenBrackets,			#protocol : #tests,			#sourceCode : 'testOpenBrackets\rself parse: \'4(4\' rule: #braces.',			#stamp : 'MarkusKaleta 1/8/2020 11:59',			#package : #PetitTests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testOpenBrackets,			#protocol : #tests,			#sourceCode : 'testOpenBrackets\rself parse: \'4(4\' rule: #brackets.',			#stamp : 'MarkusKaleta 1/8/2020 11:59',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T11:59:49.928163+01:00' ],		#prior : OmReference [ '55' ],		#self : OmReference [ '56' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testOpenBrackets,			#protocol : #tests,			#sourceCode : 'testOpenBrackets\rself parse: \'4(4\' rule: #brackets.',			#stamp : 'MarkusKaleta 1/8/2020 11:59',			#package : #PetitTests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testOpenBrackets,			#protocol : #tests,			#sourceCode : 'testOpenBrackets\rself parse: \'4*(4\' rule: #brackets.',			#stamp : 'MarkusKaleta 1/8/2020 11:59',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T12:01:06.584163+01:00' ],		#prior : OmReference [ '56' ],		#self : OmReference [ '57' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testBrackets,			#protocol : #tests,			#sourceCode : 'testBrackets\rself parse: \'4*(4\' rule: #brackets.',			#stamp : 'MarkusKaleta 1/8/2020 12:01',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T12:01:37.631163+01:00' ],		#prior : OmReference [ '57' ],		#self : OmReference [ '58' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testBrackets,			#protocol : #tests,			#sourceCode : 'testBrackets\rself parse: \'4*(4\' rule: #brackets.',			#stamp : 'MarkusKaleta 1/8/2020 12:01',			#package : #PetitTests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testBrackets,			#protocol : #'as yet unclassified',			#sourceCode : 'testBrackets\rself parse: \'4*(4\' rule: #brackets.',			#stamp : 'MarkusKaleta 1/8/2020 12:01',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T12:01:37.632163+01:00' ],		#prior : OmReference [ '58' ],		#self : OmReference [ '59' ]	},	#content : EpMethodRemoval {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testBrackets,			#protocol : #tests,			#sourceCode : 'testBrackets\rself parse: \'4*(4\' rule: #brackets.',			#stamp : 'MarkusKaleta 1/8/2020 12:01',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T12:02:10.365163+01:00' ],		#prior : OmReference [ '59' ],		#self : OmReference [ '60' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testCloseBrackets,			#protocol : #'as yet unclassified',			#sourceCode : 'testCloseBrackets\rself parse: \'4)*\' rule: #brackets.',			#stamp : 'MarkusKaleta 1/8/2020 12:02',			#package : #PetitTests		}	}}OmEntry {	#tags : {		#author : 'MarkusKaleta',		#time : DateAndTime [ '2020-01-08T12:02:10.373163+01:00' ],		#prior : OmReference [ '60' ],		#self : OmReference [ '61' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testCloseBrackets,			#protocol : #'as yet unclassified',			#sourceCode : 'testCloseBrackets\rself parse: \'4)*\' rule: #brackets.',			#stamp : 'MarkusKaleta 1/8/2020 12:02',			#package : #PetitTests		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CoPGrammerTest,				#isMetaSide : false			},			#name : #testCloseBrackets,			#protocol : #tests,			#sourceCode : 'testCloseBrackets\rself parse: \'4)*\' rule: #brackets.',			#stamp : 'MarkusKaleta 1/8/2020 12:02',			#package : #PetitTests		}	}}