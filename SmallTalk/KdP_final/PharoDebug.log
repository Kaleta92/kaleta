THERE_BE_DRAGONS_HERE
NotFound: Failed to resolve path '/builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetechnology/Moose': Das System kann den angegebenen Pfad nicht finden.

7 January 2020 2:12:43.506626 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

IceLibgitErrorVisitor>>visitENOTFOUND:
	Receiver: an IceLibgitErrorVisitor
	Arguments and temporary variables: 
		anError: 	LGit_GIT_ENOTFOUND: Failed to resolve path '/builds/workspace/moose-7....etc...
	Receiver's instance variables: 
		context: 	IceLibgitRepository(Moose)


LGit_GIT_ENOTFOUND>>acceptError:
	Receiver: LGit_GIT_ENOTFOUND: Failed to resolve path '/builds/workspace/moose-7.0-64bit/pharo-local/...etc...
	Arguments and temporary variables: 
		aVisitor: 	an IceLibgitErrorVisitor
	Receiver's instance variables: 
		messageText: 	'Failed to resolve path ''/builds/workspace/moose-7.0-64bit/pharo-...etc...
		tag: 	nil
		signaler: 	a LGitReturnCodeEnum(#git_enotfound [-3])
		signalContext: 	LGit_GIT_ENOTFOUND(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		object: 	a LGitErrorTypeEnum(#giterr_os [2])


[ :error | error acceptError: (IceLibgitErrorVisitor onContext: self) ] in IceLibgitRepository>>handleLibgitError:
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 
		aBlock: 	[ ^ LGitCommit of: self repositoryHandle fromHexString: self id ]
		error: 	LGit_GIT_ENOTFOUND: Failed to resolve path '/builds/workspace/moose-7.0-...etc...
	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


BlockClosure>>cull:
	Receiver: [ :error | error acceptError: (IceLibgitErrorVisitor onContext: self) ]
	Arguments and temporary variables: 
		anArg: 	LGit_GIT_ENOTFOUND: Failed to resolve path '/builds/workspace/moose-7.0-...etc...
	Receiver's instance variables: 
		outerContext: 	IceLibgitRepository>>handleLibgitError:
		startpc: 	71
		numArgs: 	1


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	LGit_GIT_ENOTFOUND: Failed to resolve path '/builds/workspace/moose-...etc...
		value: 	nil
	Receiver's instance variables: 
		sender: 	IceLibgitRepository>>handleLibgitError:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ ^ LGitCommit of: self repositoryHandle fromHexString: self id ]


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	LGit_GIT_ENOTFOUND: Failed to resolve path '/builds/workspace/moose-...etc...
	Receiver's instance variables: 
		sender: 	IceLibgitRepository>>handleLibgitError:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ ^ LGitCommit of: self repositoryHandle fromHexString: self id ]


LGit_GIT_ENOTFOUND(Exception)>>signal
	Receiver: LGit_GIT_ENOTFOUND: Failed to resolve path '/builds/workspace/moose-7.0-64bit/pharo-local/...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'Failed to resolve path ''/builds/workspace/moose-7.0-64bit/pharo-...etc...
		tag: 	nil
		signaler: 	a LGitReturnCodeEnum(#git_enotfound [-3])
		signalContext: 	LGit_GIT_ENOTFOUND(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		object: 	a LGitErrorTypeEnum(#giterr_os [2])


LGit_GIT_ENOTFOUND class(LGitCallReturnHandler class)>>signalWith:
	Receiver: LGit_GIT_ENOTFOUND
	Arguments and temporary variables: 
		anError: 	a LGitError ()
	Receiver's instance variables: 
		superclass: 	LGitCallReturnHandler
		methodDict: 	a MethodDictionary(#acceptError:->LGit_GIT_ENOTFOUND>>#acceptError:...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LGit_GIT_ENOTFOUND
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LibGit-Core-Exceptions-ReturnCodes'


LGitReturnCodeEnum>>handleLGitReturnCode
	Receiver: a LGitReturnCodeEnum(#git_enotfound [-3])
	Arguments and temporary variables: 
		handler: 	LGit_GIT_ENOTFOUND
	Receiver's instance variables: 
		value: 	-3


LGitRepository(LGitExternalObject)>>withReturnHandlerDo:
	Receiver: a LGitRepository (<not initialized>)
	Arguments and temporary variables: 
		callBlock: 	[ self
	repository_open: self
	bare_path: self repositoryReference p...etc...
	Receiver's instance variables: 
		handle: 	@ 16r00000000
		repositoryPath: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/mo...etc...
		isOpen: 	nil
		workingDirectory: 	nil


LGitRepository>>open
	Receiver: a LGitRepository (<not initialized>)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		handle: 	@ 16r00000000
		repositoryPath: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/mo...etc...
		isOpen: 	nil
		workingDirectory: 	nil


IceLibgitRepository>>repositoryHandle
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


IceGitCommit>>repositoryHandle
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


[ ^ LGitCommit of: self repositoryHandle fromHexString: self id ] in IceGitCommit>>libgitCommit
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


BlockClosure>>on:do:
	Receiver: [ ^ LGitCommit of: self repositoryHandle fromHexString: self id ]
	Arguments and temporary variables: 
		exception: 	LGitCallReturnHandler
		handlerAction: 	[ :error | error acceptError: (IceLibgitErrorVisitor onContext: ...etc...
	Receiver's instance variables: 
		outerContext: 	IceGitCommit>>libgitCommit
		startpc: 	70
		numArgs: 	0


IceLibgitRepository>>handleLibgitError:
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 
		aBlock: 	[ ^ LGitCommit of: self repositoryHandle fromHexString: self id ]
	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


IceGitCommit>>libgitCommit
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


[ | commit |
commit := iceVersion commit libgitCommit.
^ (iceVersion commit readerClass on: commit iceVersion: iceVersion)
	version ] in IceLibgitRepository>>mcVersionFor:
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 
		iceVersion: 	IceSavedPackageVersion(PetitParser)
		commit: 	nil
	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


BlockClosure>>on:do:
	Receiver: [ | commit |
commit := iceVersion commit libgitCommit.
^ (iceVersion commit readerClass on...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ IceVersionDoesNotExist new
	version: iceVersion;
	signal ]
	Receiver's instance variables: 
		outerContext: 	IceLibgitRepository>>mcVersionFor:
		startpc: 	126
		numArgs: 	0


IceLibgitRepository>>mcVersionFor:
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 
		iceVersion: 	IceSavedPackageVersion(PetitParser)
	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


IceGitCommit(IceCommitish)>>mcVersionFor:
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		anIceSavedPackageVersion: 	IceSavedPackageVersion(PetitParser)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


[ (self mcVersionFor: (self versionFor: anIceSavedPackage)) snapshot ] in IceGitCommit(IceCommitish)>>snapshotForPackage:
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		anIceSavedPackage: 	IcePackage(PetitParser, loaded)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


BlockClosure>>on:do:
	Receiver: [ (self mcVersionFor: (self versionFor: anIceSavedPackage)) snapshot ]
	Arguments and temporary variables: 
		exception: 	IceVersionDoesNotExist
		handlerAction: 	[ MCSnapshot empty ]
	Receiver's instance variables: 
		outerContext: 	IceGitCommit(IceCommitish)>>snapshotForPackage:
		startpc: 	86
		numArgs: 	0


IceGitCommit(IceCommitish)>>snapshotForPackage:
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		anIceSavedPackage: 	IcePackage(PetitParser, loaded)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


IceMCPackageImporter>>snapshot
	Receiver: an IceMCPackageImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		packageName: 	nil
		version: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		package: 	IcePackage(PetitParser, loaded)


IceMCPackageImporter>>importOn:
	Receiver: an IceMCPackageImporter
	Arguments and temporary variables: 
		aNode: 	IceNode(src)
		packageNode: 	IceNode(PetitParser)
		snapshot: 	nil
		definition: 	an IcePackageDefinition
	Receiver's instance variables: 
		packageName: 	nil
		version: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		package: 	IcePackage(PetitParser, loaded)


IceChangeImporter>>visitImageChange:
	Receiver: an IceChangeImporter
	Arguments and temporary variables: 
		anIceImageChange: 	an IceImageChange
		importer: 	an IceMCPackageImporter
	Receiver's instance variables: 
		parentNode: 	IceNode()
		sourceSnapshot: 	nil
		targetSnapshot: 	nil
		diff: 	an IceDiff
		operation: 	nil
		version: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)


IceImageChange>>accept:
	Receiver: an IceImageChange
	Arguments and temporary variables: 
		aVisitor: 	an IceChangeImporter
	Receiver's instance variables: 
		package: 	IcePackage(PetitParser, loaded)


[ :change | 
change
	accept:
		(IceChangeImporter new
			version: source;
			diff: self;
			parentNode: leftTree;
			yourself).
change
	accept:
		(IceChangeImporter new
			version: target;
			diff: self;
			parentNode: rightTree;
			yourself) ] in IceDiff>>buildForPackages:
	Receiver: an IceDiff
	Arguments and temporary variables: 
		aCollection: 	an Array(IcePackage(PetitParser, loaded))
		leftTree: 	IceNode()
		rightTree: 	IceNode()
		change: 	an IceImageChange
	Receiver's instance variables: 
		tree: 	nil
		source: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		target: 	an IceWorkingCopy
		writerClass: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(an IceImageChange)
	Arguments and temporary variables: 
		aBlock: 	[ :change | 
change
	accept:
		(IceChangeImporter new
			version: sourc...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an IceImageChange)

IceDiff>>buildForPackages:
	Receiver: an IceDiff
	Arguments and temporary variables: 
		aCollection: 	an Array(IcePackage(PetitParser, loaded))
		leftTree: 	IceNode()
		rightTree: 	IceNode()
	Receiver's instance variables: 
		tree: 	nil
		source: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
THERE_BE_DRAGONS_HERE
NotFound: Failed to resolve path '/builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetechnology/Moose': Das System kann den angegebenen Pfad nicht finden.

7 January 2020 2:12:58.511626 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

IceLibgitErrorVisitor>>visitENOTFOUND:
	Receiver: an IceLibgitErrorVisitor
	Arguments and temporary variables: 
		anError: 	LGit_GIT_ENOTFOUND: Failed to resolve path '/builds/workspace/moose-7....etc...
	Receiver's instance variables: 
		context: 	IceLibgitRepository(Moose)


LGit_GIT_ENOTFOUND>>acceptError:
	Receiver: LGit_GIT_ENOTFOUND: Failed to resolve path '/builds/workspace/moose-7.0-64bit/pharo-local/...etc...
	Arguments and temporary variables: 
		aVisitor: 	an IceLibgitErrorVisitor
	Receiver's instance variables: 
		messageText: 	'Failed to resolve path ''/builds/workspace/moose-7.0-64bit/pharo-...etc...
		tag: 	nil
		signaler: 	a LGitReturnCodeEnum(#git_enotfound [-3])
		signalContext: 	LGit_GIT_ENOTFOUND(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		object: 	a LGitErrorTypeEnum(#giterr_os [2])


[ :error | error acceptError: (IceLibgitErrorVisitor onContext: self) ] in IceLibgitRepository>>handleLibgitError:
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 
		aBlock: 	[ ^ LGitCommit of: self repositoryHandle fromHexString: self id ]
		error: 	LGit_GIT_ENOTFOUND: Failed to resolve path '/builds/workspace/moose-7.0-...etc...
	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


BlockClosure>>cull:
	Receiver: [ :error | error acceptError: (IceLibgitErrorVisitor onContext: self) ]
	Arguments and temporary variables: 
		anArg: 	LGit_GIT_ENOTFOUND: Failed to resolve path '/builds/workspace/moose-7.0-...etc...
	Receiver's instance variables: 
		outerContext: 	IceLibgitRepository>>handleLibgitError:
		startpc: 	71
		numArgs: 	1


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	LGit_GIT_ENOTFOUND: Failed to resolve path '/builds/workspace/moose-...etc...
		value: 	nil
	Receiver's instance variables: 
		sender: 	IceLibgitRepository>>handleLibgitError:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ ^ LGitCommit of: self repositoryHandle fromHexString: self id ]


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	LGit_GIT_ENOTFOUND: Failed to resolve path '/builds/workspace/moose-...etc...
	Receiver's instance variables: 
		sender: 	IceLibgitRepository>>handleLibgitError:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ ^ LGitCommit of: self repositoryHandle fromHexString: self id ]


LGit_GIT_ENOTFOUND(Exception)>>signal
	Receiver: LGit_GIT_ENOTFOUND: Failed to resolve path '/builds/workspace/moose-7.0-64bit/pharo-local/...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'Failed to resolve path ''/builds/workspace/moose-7.0-64bit/pharo-...etc...
		tag: 	nil
		signaler: 	a LGitReturnCodeEnum(#git_enotfound [-3])
		signalContext: 	LGit_GIT_ENOTFOUND(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		object: 	a LGitErrorTypeEnum(#giterr_os [2])


LGit_GIT_ENOTFOUND class(LGitCallReturnHandler class)>>signalWith:
	Receiver: LGit_GIT_ENOTFOUND
	Arguments and temporary variables: 
		anError: 	a LGitError ()
	Receiver's instance variables: 
		superclass: 	LGitCallReturnHandler
		methodDict: 	a MethodDictionary(#acceptError:->LGit_GIT_ENOTFOUND>>#acceptError:...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LGit_GIT_ENOTFOUND
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LibGit-Core-Exceptions-ReturnCodes'


LGitReturnCodeEnum>>handleLGitReturnCode
	Receiver: a LGitReturnCodeEnum(#git_enotfound [-3])
	Arguments and temporary variables: 
		handler: 	LGit_GIT_ENOTFOUND
	Receiver's instance variables: 
		value: 	-3


LGitRepository(LGitExternalObject)>>withReturnHandlerDo:
	Receiver: a LGitRepository (<not initialized>)
	Arguments and temporary variables: 
		callBlock: 	[ self
	repository_open: self
	bare_path: self repositoryReference p...etc...
	Receiver's instance variables: 
		handle: 	@ 16r00000000
		repositoryPath: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/mo...etc...
		isOpen: 	nil
		workingDirectory: 	nil


LGitRepository>>open
	Receiver: a LGitRepository (<not initialized>)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		handle: 	@ 16r00000000
		repositoryPath: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/mo...etc...
		isOpen: 	nil
		workingDirectory: 	nil


IceLibgitRepository>>repositoryHandle
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


IceGitCommit>>repositoryHandle
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


[ ^ LGitCommit of: self repositoryHandle fromHexString: self id ] in IceGitCommit>>libgitCommit
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


BlockClosure>>on:do:
	Receiver: [ ^ LGitCommit of: self repositoryHandle fromHexString: self id ]
	Arguments and temporary variables: 
		exception: 	LGitCallReturnHandler
		handlerAction: 	[ :error | error acceptError: (IceLibgitErrorVisitor onContext: ...etc...
	Receiver's instance variables: 
		outerContext: 	IceGitCommit>>libgitCommit
		startpc: 	70
		numArgs: 	0


IceLibgitRepository>>handleLibgitError:
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 
		aBlock: 	[ ^ LGitCommit of: self repositoryHandle fromHexString: self id ]
	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


IceGitCommit>>libgitCommit
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


IceGitCommit>>fileSystem
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


IceBasicProjectReader>>canReadProjectFromCommitish:
	Receiver: an IceBasicProjectReader
	Arguments and temporary variables: 
		aCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
an IceBasicProjectReader

[ :any | any canReadProjectFromCommitish: anIceCommitish ] in IceProjectReader class>>readProjectFrom:
	Receiver: IceProjectReader
	Arguments and temporary variables: 
		anIceCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		readers: 	an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReade...etc...
		any: 	an IceBasicProjectReader
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#canReadProjectFromCommitish:->IceProjectReader>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceBasicProjectReader. IceInvalidProjectReader. IceUnbornProjectRe...etc...
		name: 	#IceProjectReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Project'


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ self errorNotFound: aBlock ]
		each: 	an IceBasicProjectReader
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection>>do:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ self errorNotFound: aBlock ]
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifNone:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
		exceptionBlock: 	[ self errorNotFound: aBlock ]
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


IceProjectReader class>>readProjectFrom:
	Receiver: IceProjectReader
	Arguments and temporary variables: 
		anIceCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		readers: 	an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReade...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#canReadProjectFromCommitish:->IceProjectReader>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceBasicProjectReader. IceInvalidProjectReader. IceUnbornProjectRe...etc...
		name: 	#IceProjectReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Project'


IceGitCommit>>project
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


IceGitCommit(IceCommitish)>>properties
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	RTHERE_BE_DRAGONS_HERE
Instance of IceGitCommit did not understand #tree
7 January 2020 2:12:59.903626 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

IceGitCommit(Object)>>doesNotUnderstand: #tree
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		aMessage: 	tree
		exception: 	MessageNotUnderstood: IceGitCommit>>tree
		resumeValue: 	nil
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


LGitCommitStore>>nodeAt:ifPresent:ifAbsent:
	Receiver: a LGitCommitStore
	Arguments and temporary variables: 
		anAbsolutePath: 	Path / '.project'
		aBlockClosure: 	[ :entry | ^ true ]
		aBlockClosure3: 	[ ^ false ]
	Receiver's instance variables: 
		commit: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)


LGitCommitStore(FileSystemStore)>>exists:
	Receiver: a LGitCommitStore
	Arguments and temporary variables: 
		aPath: 	Path / '.project'
	Receiver's instance variables: 
		commit: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)


FileSystem>>exists:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / '.project'
	Receiver's instance variables: 
		store: 	a LGitCommitStore


FileReference>>exists
	Receiver: git:///.project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / '.project'


IceBasicProjectReader>>canReadProjectFromCommitish:
	Receiver: an IceBasicProjectReader
	Arguments and temporary variables: 
		aCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
an IceBasicProjectReader

[ :any | any canReadProjectFromCommitish: anIceCommitish ] in IceProjectReader class>>readProjectFrom:
	Receiver: IceProjectReader
	Arguments and temporary variables: 
		anIceCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		readers: 	an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReade...etc...
		any: 	an IceBasicProjectReader
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#canReadProjectFromCommitish:->IceProjectReader>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceBasicProjectReader. IceInvalidProjectReader. IceUnbornProjectRe...etc...
		name: 	#IceProjectReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Project'


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ self errorNotFound: aBlock ]
		each: 	an IceBasicProjectReader
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection>>do:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ self errorNotFound: aBlock ]
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifNone:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
		exceptionBlock: 	[ self errorNotFound: aBlock ]
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


IceProjectReader class>>readProjectFrom:
	Receiver: IceProjectReader
	Arguments and temporary variables: 
		anIceCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		readers: 	an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReade...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#canReadProjectFromCommitish:->IceProjectReader>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceBasicProjectReader. IceInvalidProjectReader. IceUnbornProjectRe...etc...
		name: 	#IceProjectReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Project'


IceGitCommit>>project
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


IceGitCommit(IceCommitish)>>properties
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


IceGitCommit>>readerClass
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


[ | commit |
commit := iceVersion commit libgitCommit.
^ (iceVersion commit readerClass on: commit iceVersion: iceVersion)
	version ] in IceLibgitRepository>>mcVersionFor:
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 
		iceVersion: 	IceSavedPackageVersion(PetitParser)
		commit: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


BlockClosure>>on:do:
	Receiver: [ | commit |
commit := iceVersion commit libgitCommit.
^ (iceVersion commit readerClass on...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ IceVersionDoesNotExist new
	version: iceVersion;
	signal ]
	Receiver's instance variables: 
		outerContext: 	IceLibgitRepository>>mcVersionFor:
		startpc: 	126
		numArgs: 	0


IceLibgitRepository>>mcVersionFor:
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 
		iceVersion: 	IceSavedPackageVersion(PetitParser)
	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


IceGitCommit(IceCommitish)>>mcVersionFor:
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		anIceSavedPackageVersion: 	IceSavedPackageVersion(PetitParser)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


[ (self mcVersionFor: (self versionFor: anIceSavedPackage)) snapshot ] in IceGitCommit(IceCommitish)>>snapshotForPackage:
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		anIceSavedPackage: 	IcePackage(PetitParser, loaded)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


BlockClosure>>on:do:
	Receiver: [ (self mcVersionFor: (self versionFor: anIceSavedPackage)) snapshot ]
	Arguments and temporary variables: 
		exception: 	IceVersionDoesNotExist
		handlerAction: 	[ MCSnapshot empty ]
	Receiver's instance variables: 
		outerContext: 	IceGitCommit(IceCommitish)>>snapshotForPackage:
		startpc: 	86
		numArgs: 	0


IceGitCommit(IceCommitish)>>snapshotForPackage:
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		anIceSavedPackage: 	IcePackage(PetitParser, loaded)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


IceMCPackageImporter>>snapshot
	Receiver: an IceMCPackageImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		packageName: 	nil
		version: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		package: 	IcePackage(PetitParser, loaded)


IceMCPackageImporter>>importOn:
	Receiver: an IceMCPackageImporter
	Arguments and temporary variables: 
		aNode: 	IceNode(src)
		packageNode: 	IceNode(PetitParser)
		snapshot: 	nil
		definition: 	an IcePackageDefinition
	Receiver's instance variables: 
		packageName: 	nil
		version: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		package: 	IcePackage(PetitParser, loaded)


IceChangeImporter>>visitImageChange:
	Receiver: an IceChangeImporter
	Arguments and temporary variables: 
		anIceImageChange: 	an IceImageChange
		importer: 	an IceMCPackageImporter
	Receiver's instance variables: 
		parentNode: 	IceNode()
		sourceSnapshot: 	nil
		targetSnapshot: 	nil
		diff: 	an IceDiff
		operation: 	nil
		version: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)


IceImageChange>>accept:
	Receiver: an IceImageChange
	Arguments and temporary variables: 
		aVisitor: 	an IceChangeImporter
	Receiver's instance variables: 
		package: 	IcePackage(PetitParser, loaded)


[ :change | 
change
	accept:
		(IceChangeImporter new
			version: source;
			diff: self;
			parentNode: leftTree;
			yourself).
change
	accept:
		(IceChangeImporter new
			version: target;
			diff: self;
			parentNode: rightTree;
			yourself) ] in IceDiff>>buildForPackages:
	Receiver: an IceDiff
	Arguments and temporary variables: 
		aCollection: 	an Array(IcePackage(PetitParser, loaded))
		leftTree: 	IceNode()
		rightTree: 	IceNode()
		change: 	an IceImageChange
	Receiver's instance variables: 
		tree: 	nil
		source: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		target: 	an IceWorkingCopy
		writerClass: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(an IceImageChange)
	Arguments and temporary variables: 
		aBlock: 	[ :change | 
change
	accept:
		(IceChangeImporter new
			version: sourc...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an IceImageChange)

IceDiff>>buildForPackages:
	Receiver: an IceDiff
	Arguments and temporary variables: 
		aCollection: 	an Array(IcePackage(PetitParser, loaded))
		leftTree: 	IceNode()
		rightTree: 	IceNode()
	Receiver's instance variables: 
		tree: 	nil
		source: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		target: 	an IceWorkingCopy
		writerClass: 	nil


IceGitCommit(IceCommit)>>diffToWorkingCopyForPackages:
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		aCollection: 	an Array(IcePackage(PetitParser, loadedTHERE_BE_DRAGONS_HERE
Instance of IceGitCommit did not understand #tree
7 January 2020 2:13:01.128626 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

IceGitCommit(Object)>>doesNotUnderstand: #tree
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		aMessage: 	tree
		exception: 	MessageNotUnderstood: IceGitCommit>>tree
		resumeValue: 	nil
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


Message>>sentTo:
	Receiver: tree
	Arguments and temporary variables: 
		receiver: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
		selector: 	#tree
		args: 	#()
		lookupClass: 	IceGitCommit


IceGitCommit(Object)>>doesNotUnderstand: #tree
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		aMessage: 	tree
		exception: 	MessageNotUnderstood: IceGitCommit>>tree
		resumeValue: 	MessageNotUnderstood: IceGitCommit>>tree
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


LGitCommitStore>>nodeAt:ifPresent:ifAbsent:
	Receiver: a LGitCommitStore
	Arguments and temporary variables: 
		anAbsolutePath: 	Path / '.project'
		aBlockClosure: 	[ :entry | ^ true ]
		aBlockClosure3: 	[ ^ false ]
	Receiver's instance variables: 
		commit: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)


LGitCommitStore(FileSystemStore)>>exists:
	Receiver: a LGitCommitStore
	Arguments and temporary variables: 
		aPath: 	Path / '.project'
	Receiver's instance variables: 
		commit: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)


FileSystem>>exists:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / '.project'
	Receiver's instance variables: 
		store: 	a LGitCommitStore


FileReference>>exists
	Receiver: git:///.project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / '.project'


IceBasicProjectReader>>canReadProjectFromCommitish:
	Receiver: an IceBasicProjectReader
	Arguments and temporary variables: 
		aCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
an IceBasicProjectReader

[ :any | any canReadProjectFromCommitish: anIceCommitish ] in IceProjectReader class>>readProjectFrom:
	Receiver: IceProjectReader
	Arguments and temporary variables: 
		anIceCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		readers: 	an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReade...etc...
		any: 	an IceBasicProjectReader
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#canReadProjectFromCommitish:->IceProjectReader>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceBasicProjectReader. IceInvalidProjectReader. IceUnbornProjectRe...etc...
		name: 	#IceProjectReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Project'


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ self errorNotFound: aBlock ]
		each: 	an IceBasicProjectReader
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection>>do:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ self errorNotFound: aBlock ]
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifNone:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
		exceptionBlock: 	[ self errorNotFound: aBlock ]
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


IceProjectReader class>>readProjectFrom:
	Receiver: IceProjectReader
	Arguments and temporary variables: 
		anIceCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		readers: 	an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReade...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#canReadProjectFromCommitish:->IceProjectReader>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceBasicProjectReader. IceInvalidProjectReader. IceUnbornProjectRe...etc...
		name: 	#IceProjectReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Project'


IceGitCommit>>project
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


IceGitCommit(IceCommitish)>>properties
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


IceGitCommit>>readerClass
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


[ | commit |
commit := iceVersion commit libgitCommit.
^ (iceVersion commit readerClass on: commit iceVersion: iceVersion)
	version ] in IceLibgitRepository>>mcVersionFor:
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 
		iceVersion: 	IceSavedPackageVersion(PetitParser)
		commit: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


BlockClosure>>on:do:
	Receiver: [ | commit |
commit := iceVersion commit libgitCommit.
^ (iceVersion commit readerClass on...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ IceVersionDoesNotExist new
	version: iceVersion;
	signal ]
	Receiver's instance variables: 
		outerContext: 	IceLibgitRepository>>mcVersionFor:
		startpc: 	126
		numArgs: 	0


IceLibgitRepository>>mcVersionFor:
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 
		iceVersion: 	IceSavedPackageVersion(PetitParser)
	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


IceGitCommit(IceCommitish)>>mcVersionFor:
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		anIceSavedPackageVersion: 	IceSavedPackageVersion(PetitParser)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


[ (self mcVersionFor: (self versionFor: anIceSavedPackage)) snapshot ] in IceGitCommit(IceCommitish)>>snapshotForPackage:
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		anIceSavedPackage: 	IcePackage(PetitParser, loaded)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


BlockClosure>>on:do:
	Receiver: [ (self mcVersionFor: (self versionFor: anIceSavedPackage)) snapshot ]
	Arguments and temporary variables: 
		exception: 	IceVersionDoesNotExist
		handlerAction: 	[ MCSnapshot empty ]
	Receiver's instance variables: 
		outerContext: 	IceGitCommit(IceCommitish)>>snapshotForPackage:
		startpc: 	86
		numArgs: 	0


IceGitCommit(IceCommitish)>>snapshotForPackage:
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		anIceSavedPackage: 	IcePackage(PetitParser, loaded)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


IceMCPackageImporter>>snapshot
	Receiver: an IceMCPackageImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		packageName: 	nil
		version: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		package: 	IcePackage(PetitParser, loaded)


IceMCPackageImporter>>importOn:
	Receiver: an IceMCPackageImporter
	Arguments and temporary variables: 
		aNode: 	IceNode(src)
		packageNode: 	IceNode(PetitParser)
		snapshot: 	nil
		definition: 	an IcePackageDefinition
	Receiver's instance variables: 
		packageName: 	nil
		version: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		package: 	IcePackage(PetitParser, loaded)


IceChangeImporter>>visitImageChange:
	Receiver: an IceChangeImporter
	Arguments and temporary variables: 
		anIceImageChange: 	an IceImageChange
		importer: 	an IceMCPackageImporter
	Receiver's instance variables: 
		parentNode: 	IceNode()
		sourceSnapshot: 	nil
		targetSnapshot: 	nil
		diff: 	an IceDiff
		operation: 	nil
		version: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)


IceImageChange>>accept:
	Receiver: an IceImageChange
	Arguments and temporary variables: 
		aVisitor: 	an IceChangeImporter
	Receiver's instance variables: 
		package: 	IcePackage(PetitParser, loaded)


[ :change | 
change
	accept:
		(IceChangeImporter new
			version: source;
			diff: self;
			parentNode: leftTree;
			yourself).
change
	accept:
		(IceChangeImporter new
			version: target;
			diff: self;
			parentNode: rightTree;
			yourself) ] in IceDiff>>buildForPackages:
	Receiver: an IceDiff
	Arguments and temporary variables: 
		aCollection: 	an Array(IcePackage(PetitParser, loaded))
		leftTree: 	IceNode()
		rightTree: 	IceNode()
		change: 	an IceImageChange
	Receiver's instance variables: 
		tree: 	nil
		source: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		target: 	an IceWorkingCopy
		writerClass: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(an IceImageChange)
	Arguments and temporary variables: 
		aBlock: 	[ :change | 
change
	accept:
		(IceChangeImporter new
			version: sourc...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an IceImageChange)

IceDiff>>buildForPackages:
	Receiver: an IceDiff
	Arguments and temporary variables: 
		aCollection: 	an Array(IcePackage(PetitParser, loaded))
		leftTree: 	IceNode()
		rightTree: 	IceNode()
	Receiver's instance variables: 
		tree: 	nil
		source: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		target: 	an IceWorkingCopy
		writerClass: 	nil


IceGitCommit(IceCommit)>>diffToWorkingCopyForPackages:
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		aCollection: 	an Array(IcePackage(PetitParser, loaded))
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datTHERE_BE_DRAGONS_HERE
Instance of IceGitCommit did not understand #tree
7 January 2020 2:13:01.833626 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

IceGitCommit(Object)>>doesNotUnderstand: #tree
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		aMessage: 	tree
		exception: 	MessageNotUnderstood: IceGitCommit>>tree
		resumeValue: 	nil
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


Message>>sentTo:
	Receiver: tree
	Arguments and temporary variables: 
		receiver: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
		selector: 	#tree
		args: 	#()
		lookupClass: 	IceGitCommit


IceGitCommit(Object)>>doesNotUnderstand: #tree
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		aMessage: 	tree
		exception: 	MessageNotUnderstood: IceGitCommit>>tree
		resumeValue: 	MessageNotUnderstood: IceGitCommit>>tree
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


Message>>sentTo:
	Receiver: tree
	Arguments and temporary variables: 
		receiver: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
		selector: 	#tree
		args: 	#()
		lookupClass: 	IceGitCommit


IceGitCommit(Object)>>doesNotUnderstand: #tree
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		aMessage: 	tree
		exception: 	MessageNotUnderstood: IceGitCommit>>tree
		resumeValue: 	MessageNotUnderstood: IceGitCommit>>tree
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


LGitCommitStore>>nodeAt:ifPresent:ifAbsent:
	Receiver: a LGitCommitStore
	Arguments and temporary variables: 
		anAbsolutePath: 	Path / '.project'
		aBlockClosure: 	[ :entry | ^ true ]
		aBlockClosure3: 	[ ^ false ]
	Receiver's instance variables: 
		commit: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)


LGitCommitStore(FileSystemStore)>>exists:
	Receiver: a LGitCommitStore
	Arguments and temporary variables: 
		aPath: 	Path / '.project'
	Receiver's instance variables: 
		commit: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)


FileSystem>>exists:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / '.project'
	Receiver's instance variables: 
		store: 	a LGitCommitStore


FileReference>>exists
	Receiver: git:///.project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / '.project'


IceBasicProjectReader>>canReadProjectFromCommitish:
	Receiver: an IceBasicProjectReader
	Arguments and temporary variables: 
		aCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
an IceBasicProjectReader

[ :any | any canReadProjectFromCommitish: anIceCommitish ] in IceProjectReader class>>readProjectFrom:
	Receiver: IceProjectReader
	Arguments and temporary variables: 
		anIceCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		readers: 	an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReade...etc...
		any: 	an IceBasicProjectReader
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#canReadProjectFromCommitish:->IceProjectReader>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceBasicProjectReader. IceInvalidProjectReader. IceUnbornProjectRe...etc...
		name: 	#IceProjectReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Project'


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ self errorNotFound: aBlock ]
		each: 	an IceBasicProjectReader
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection>>do:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ self errorNotFound: aBlock ]
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifNone:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
		exceptionBlock: 	[ self errorNotFound: aBlock ]
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


IceProjectReader class>>readProjectFrom:
	Receiver: IceProjectReader
	Arguments and temporary variables: 
		anIceCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		readers: 	an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReade...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#canReadProjectFromCommitish:->IceProjectReader>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceBasicProjectReader. IceInvalidProjectReader. IceUnbornProjectRe...etc...
		name: 	#IceProjectReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Project'


IceGitCommit>>project
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


IceGitCommit(IceCommitish)>>properties
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


IceGitCommit>>readerClass
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


[ | commit |
commit := iceVersion commit libgitCommit.
^ (iceVersion commit readerClass on: commit iceVersion: iceVersion)
	version ] in IceLibgitRepository>>mcVersionFor:
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 
		iceVersion: 	IceSavedPackageVersion(PetitParser)
		commit: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


BlockClosure>>on:do:
	Receiver: [ | commit |
commit := iceVersion commit libgitCommit.
^ (iceVersion commit readerClass on...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ IceVersionDoesNotExist new
	version: iceVersion;
	signal ]
	Receiver's instance variables: 
		outerContext: 	IceLibgitRepository>>mcVersionFor:
		startpc: 	126
		numArgs: 	0


IceLibgitRepository>>mcVersionFor:
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 
		iceVersion: 	IceSavedPackageVersion(PetitParser)
	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


IceGitCommit(IceCommitish)>>mcVersionFor:
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		anIceSavedPackageVersion: 	IceSavedPackageVersion(PetitParser)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


[ (self mcVersionFor: (self versionFor: anIceSavedPackage)) snapshot ] in IceGitCommit(IceCommitish)>>snapshotForPackage:
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		anIceSavedPackage: 	IcePackage(PetitParser, loaded)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


BlockClosure>>on:do:
	Receiver: [ (self mcVersionFor: (self versionFor: anIceSavedPackage)) snapshot ]
	Arguments and temporary variables: 
		exception: 	IceVersionDoesNotExist
		handlerAction: 	[ MCSnapshot empty ]
	Receiver's instance variables: 
		outerContext: 	IceGitCommit(IceCommitish)>>snapshotForPackage:
		startpc: 	86
		numArgs: 	0


IceGitCommit(IceCommitish)>>snapshotForPackage:
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		anIceSavedPackage: 	IcePackage(PetitParser, loaded)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


IceMCPackageImporter>>snapshot
	Receiver: an IceMCPackageImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		packageName: 	nil
		version: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		package: 	IcePackage(PetitParser, loaded)


IceMCPackageImporter>>importOn:
	Receiver: an IceMCPackageImporter
	Arguments and temporary variables: 
		aNode: 	IceNode(src)
		packageNode: 	IceNode(PetitParser)
		snapshot: 	nil
		definition: 	an IcePackageDefinition
	Receiver's instance variables: 
		packageName: 	nil
		version: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		package: 	IcePackage(PetitParser, loaded)


IceChangeImporter>>visitImageChange:
	Receiver: an IceChangeImporter
	Arguments and temporary variables: 
		anIceImageChange: 	an IceImageChange
		importer: 	an IceMCPackageImporter
	Receiver's instance variables: 
		parentNode: 	IceNode()
		sourceSnapshot: 	nil
		targetSnapshot: 	nil
		diff: 	an IceDiff
		operation: 	nil
		version: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)


IceImageChange>>accept:
	Receiver: an IceImageChange
	Arguments and temporary variables: 
		aVisitor: 	an IceChangeImporter
	Receiver's instance variables: 
		package: 	IcePackage(PetitParser, loaded)


[ :change | 
change
	accept:
		(IceChangeImporter new
			version: source;
			diff: self;
			parentNode: leftTree;
			yourself).
change
	accept:
		(IceChangeImporter new
			version: target;
			diff: self;
			parentNode: rightTree;
			yourself) ] in IceDiff>>buildForPackages:
	Receiver: an IceDiff
	Arguments and temporary variables: 
		aCollection: 	an Array(IcePackage(PetitParser, loaded))
		leftTree: 	IceNode()
		rightTree: 	IceNode()
		change: 	an IceImageChange
	Receiver's instance variables: 
		tree: 	nil
		source: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		target: 	an IceWorkingCopy
		writerClass: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(an IceImageChange)
	Arguments and temporary variables: 
		aBlock: 	[ :change | 
change
	accept:
		(IceChangeImporter new
			version: sourc...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an IceImageChange)

IceDiff>>buildForPackages:
	Receiver: an IceDiff
	Arguments and temporary variables: 
		aCollection: 	an Array(IcePackage(PetitParser, loaded))
		leftTree: 	IceNode()
		rightTree: 	IceNode()
	Receiver's instance variables: 
		tree: 	nil
		source: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		target: 	an IceWorkingCopy
		writerClass: 	nil


IceGitCommit(IceCommit)>>diffToWorkingCopyForPackages:
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		aCollection: 	an Array(IcePackage(PetitParser, loaded))
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pTHERE_BE_DRAGONS_HERE
Instance of IceGitCommit did not understand #tree
7 January 2020 2:13:02.421626 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

IceGitCommit(Object)>>doesNotUnderstand: #tree
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		aMessage: 	tree
		exception: 	MessageNotUnderstood: IceGitCommit>>tree
		resumeValue: 	nil
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


Message>>sentTo:
	Receiver: tree
	Arguments and temporary variables: 
		receiver: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
		selector: 	#tree
		args: 	#()
		lookupClass: 	IceGitCommit


IceGitCommit(Object)>>doesNotUnderstand: #tree
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		aMessage: 	tree
		exception: 	MessageNotUnderstood: IceGitCommit>>tree
		resumeValue: 	MessageNotUnderstood: IceGitCommit>>tree
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


Message>>sentTo:
	Receiver: tree
	Arguments and temporary variables: 
		receiver: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
		selector: 	#tree
		args: 	#()
		lookupClass: 	IceGitCommit


IceGitCommit(Object)>>doesNotUnderstand: #tree
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		aMessage: 	tree
		exception: 	MessageNotUnderstood: IceGitCommit>>tree
		resumeValue: 	MessageNotUnderstood: IceGitCommit>>tree
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


Message>>sentTo:
	Receiver: tree
	Arguments and temporary variables: 
		receiver: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
		selector: 	#tree
		args: 	#()
		lookupClass: 	IceGitCommit


IceGitCommit(Object)>>doesNotUnderstand: #tree
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		aMessage: 	tree
		exception: 	MessageNotUnderstood: IceGitCommit>>tree
		resumeValue: 	MessageNotUnderstood: IceGitCommit>>tree
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


LGitCommitStore>>nodeAt:ifPresent:ifAbsent:
	Receiver: a LGitCommitStore
	Arguments and temporary variables: 
		anAbsolutePath: 	Path / '.project'
		aBlockClosure: 	[ :entry | ^ true ]
		aBlockClosure3: 	[ ^ false ]
	Receiver's instance variables: 
		commit: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)


LGitCommitStore(FileSystemStore)>>exists:
	Receiver: a LGitCommitStore
	Arguments and temporary variables: 
		aPath: 	Path / '.project'
	Receiver's instance variables: 
		commit: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)


FileSystem>>exists:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / '.project'
	Receiver's instance variables: 
		store: 	a LGitCommitStore


FileReference>>exists
	Receiver: git:///.project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / '.project'


IceBasicProjectReader>>canReadProjectFromCommitish:
	Receiver: an IceBasicProjectReader
	Arguments and temporary variables: 
		aCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
an IceBasicProjectReader

[ :any | any canReadProjectFromCommitish: anIceCommitish ] in IceProjectReader class>>readProjectFrom:
	Receiver: IceProjectReader
	Arguments and temporary variables: 
		anIceCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		readers: 	an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReade...etc...
		any: 	an IceBasicProjectReader
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#canReadProjectFromCommitish:->IceProjectReader>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceBasicProjectReader. IceInvalidProjectReader. IceUnbornProjectRe...etc...
		name: 	#IceProjectReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Project'


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ self errorNotFound: aBlock ]
		each: 	an IceBasicProjectReader
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection>>do:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ self errorNotFound: aBlock ]
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifNone:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
		exceptionBlock: 	[ self errorNotFound: aBlock ]
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


IceProjectReader class>>readProjectFrom:
	Receiver: IceProjectReader
	Arguments and temporary variables: 
		anIceCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		readers: 	an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReade...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#canReadProjectFromCommitish:->IceProjectReader>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceBasicProjectReader. IceInvalidProjectReader. IceUnbornProjectRe...etc...
		name: 	#IceProjectReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Project'


IceGitCommit>>project
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


IceGitCommit(IceCommitish)>>properties
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


IceGitCommit>>readerClass
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


[ | commit |
commit := iceVersion commit libgitCommit.
^ (iceVersion commit readerClass on: commit iceVersion: iceVersion)
	version ] in IceLibgitRepository>>mcVersionFor:
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 
		iceVersion: 	IceSavedPackageVersion(PetitParser)
		commit: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


BlockClosure>>on:do:
	Receiver: [ | commit |
commit := iceVersion commit libgitCommit.
^ (iceVersion commit readerClass on...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ IceVersionDoesNotExist new
	version: iceVersion;
	signal ]
	Receiver's instance variables: 
		outerContext: 	IceLibgitRepository>>mcVersionFor:
		startpc: 	126
		numArgs: 	0


IceLibgitRepository>>mcVersionFor:
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 
		iceVersion: 	IceSavedPackageVersion(PetitParser)
	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


IceGitCommit(IceCommitish)>>mcVersionFor:
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		anIceSavedPackageVersion: 	IceSavedPackageVersion(PetitParser)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


[ (self mcVersionFor: (self versionFor: anIceSavedPackage)) snapshot ] in IceGitCommit(IceCommitish)>>snapshotForPackage:
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		anIceSavedPackage: 	IcePackage(PetitParser, loaded)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


BlockClosure>>on:do:
	Receiver: [ (self mcVersionFor: (self versionFor: anIceSavedPackage)) snapshot ]
	Arguments and temporary variables: 
		exception: 	IceVersionDoesNotExist
		handlerAction: 	[ MCSnapshot empty ]
	Receiver's instance variables: 
		outerContext: 	IceGitCommit(IceCommitish)>>snapshotForPackage:
		startpc: 	86
		numArgs: 	0


IceGitCommit(IceCommitish)>>snapshotForPackage:
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		anIceSavedPackage: 	IcePackage(PetitParser, loaded)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


IceMCPackageImporter>>snapshot
	Receiver: an IceMCPackageImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		packageName: 	nil
		version: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		package: 	IcePackage(PetitParser, loaded)


IceMCPackageImporter>>importOn:
	Receiver: an IceMCPackageImporter
	Arguments and temporary variables: 
		aNode: 	IceNode(src)
		packageNode: 	IceNode(PetitParser)
		snapshot: 	nil
		definition: 	an IcePackageDefinition
	Receiver's instance variables: 
		packageName: 	nil
		version: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		package: 	IcePackage(PetitParser, loaded)


IceChangeImporter>>visitImageChange:
	Receiver: an IceChangeImporter
	Arguments and temporary variables: 
		anIceImageChange: 	an IceImageChange
		importer: 	an IceMCPackageImporter
	Receiver's instance variables: 
		parentNode: 	IceNode()
		sourceSnapshot: 	nil
		targetSnapshot: 	nil
		diff: 	an IceDiff
		operation: 	nil
		version: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)


IceImageChange>>accept:
	Receiver: an IceImageChange
	Arguments and temporary variables: 
		aVisitor: 	an IceChangeImporter
	Receiver's instance variables: 
		package: 	IcePackage(PetitParser, loaded)


[ :change | 
change
	accept:
		(IceChangeImporter new
			version: source;
			diff: self;
			parentNode: leftTree;
			yourself).
change
	accept:
		(IceChangeImporter new
			version: target;
			diff: self;
			parentNode: rightTree;
			yourself) ] in IceDiff>>buildForPackages:
	Receiver: an IceDiff
	Arguments and temporary variables: 
		aCollection: 	an Array(IcePackage(PetitParser, loaded))
		leftTree: 	IceNode()
		rightTree: 	IceNode()
		change: 	an IceImageChange
	Receiver's instance variables: 
		tree: 	nil
		source: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		target: 	an IceWorkingCopy
		writerClass: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(an IceImageChange)
	Arguments and temporary variables: 
		aBlock: 	[ :change | 
change
	accept:
		(IceChangeImporter new
			version: sourc...etc...
		index: 	1
	Receiver's instance variables: 
an Array(an IceImageChange)

IceDiff>>builTHERE_BE_DRAGONS_HERE
Instance of IceGitCommit did not understand #tree
7 January 2020 2:13:02.948626 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

IceGitCommit(Object)>>doesNotUnderstand: #tree
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		aMessage: 	tree
		exception: 	MessageNotUnderstood: IceGitCommit>>tree
		resumeValue: 	nil
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


Message>>sentTo:
	Receiver: tree
	Arguments and temporary variables: 
		receiver: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
		selector: 	#tree
		args: 	#()
		lookupClass: 	IceGitCommit


IceGitCommit(Object)>>doesNotUnderstand: #tree
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		aMessage: 	tree
		exception: 	MessageNotUnderstood: IceGitCommit>>tree
		resumeValue: 	MessageNotUnderstood: IceGitCommit>>tree
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


Message>>sentTo:
	Receiver: tree
	Arguments and temporary variables: 
		receiver: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
		selector: 	#tree
		args: 	#()
		lookupClass: 	IceGitCommit


IceGitCommit(Object)>>doesNotUnderstand: #tree
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		aMessage: 	tree
		exception: 	MessageNotUnderstood: IceGitCommit>>tree
		resumeValue: 	MessageNotUnderstood: IceGitCommit>>tree
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


Message>>sentTo:
	Receiver: tree
	Arguments and temporary variables: 
		receiver: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
		selector: 	#tree
		args: 	#()
		lookupClass: 	IceGitCommit


IceGitCommit(Object)>>doesNotUnderstand: #tree
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		aMessage: 	tree
		exception: 	MessageNotUnderstood: IceGitCommit>>tree
		resumeValue: 	MessageNotUnderstood: IceGitCommit>>tree
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


Message>>sentTo:
	Receiver: tree
	Arguments and temporary variables: 
		receiver: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
		selector: 	#tree
		args: 	#()
		lookupClass: 	IceGitCommit


IceGitCommit(Object)>>doesNotUnderstand: #tree
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		aMessage: 	tree
		exception: 	MessageNotUnderstood: IceGitCommit>>tree
		resumeValue: 	MessageNotUnderstood: IceGitCommit>>tree
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


LGitCommitStore>>nodeAt:ifPresent:ifAbsent:
	Receiver: a LGitCommitStore
	Arguments and temporary variables: 
		anAbsolutePath: 	Path / '.project'
		aBlockClosure: 	[ :entry | ^ true ]
		aBlockClosure3: 	[ ^ false ]
	Receiver's instance variables: 
		commit: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)


LGitCommitStore(FileSystemStore)>>exists:
	Receiver: a LGitCommitStore
	Arguments and temporary variables: 
		aPath: 	Path / '.project'
	Receiver's instance variables: 
		commit: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)


FileSystem>>exists:
	Receiver: a FileSystem
	Arguments and temporary variables: 
		aResolvable: 	Path / '.project'
	Receiver's instance variables: 
		store: 	a LGitCommitStore


FileReference>>exists
	Receiver: git:///.project
	Arguments and temporary variables: 

	Receiver's instance variables: 
		filesystem: 	a FileSystem
		path: 	Path / '.project'


IceBasicProjectReader>>canReadProjectFromCommitish:
	Receiver: an IceBasicProjectReader
	Arguments and temporary variables: 
		aCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
an IceBasicProjectReader

[ :any | any canReadProjectFromCommitish: anIceCommitish ] in IceProjectReader class>>readProjectFrom:
	Receiver: IceProjectReader
	Arguments and temporary variables: 
		anIceCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		readers: 	an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReade...etc...
		any: 	an IceBasicProjectReader
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#canReadProjectFromCommitish:->IceProjectReader>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceBasicProjectReader. IceInvalidProjectReader. IceUnbornProjectRe...etc...
		name: 	#IceProjectReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Project'


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ self errorNotFound: aBlock ]
		each: 	an IceBasicProjectReader
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection>>do:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ self errorNotFound: aBlock ]
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifNone:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
		exceptionBlock: 	[ self errorNotFound: aBlock ]
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:
	Receiver: an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReader an IceInvalidProje...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :any | any canReadProjectFromCommitish: anIceCommitish ]
	Receiver's instance variables: 
		array: 	an Array(an IceBasicProjectReader an IceUnbornProjectReader an IceInvali...etc...
		firstIndex: 	1
		lastIndex: 	3


IceProjectReader class>>readProjectFrom:
	Receiver: IceProjectReader
	Arguments and temporary variables: 
		anIceCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		readers: 	an OrderedCollection(an IceBasicProjectReader an IceUnbornProjectReade...etc...
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#canReadProjectFromCommitish:->IceProjectReader>...etc...
		format: 	0
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceBasicProjectReader. IceInvalidProjectReader. IceUnbornProjectRe...etc...
		name: 	#IceProjectReader
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Project'


IceGitCommit>>project
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


IceGitCommit(IceCommitish)>>properties
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


IceGitCommit>>readerClass
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


[ | commit |
commit := iceVersion commit libgitCommit.
^ (iceVersion commit readerClass on: commit iceVersion: iceVersion)
	version ] in IceLibgitRepository>>mcVersionFor:
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 
		iceVersion: 	IceSavedPackageVersion(PetitParser)
		commit: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


BlockClosure>>on:do:
	Receiver: [ | commit |
commit := iceVersion commit libgitCommit.
^ (iceVersion commit readerClass on...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ IceVersionDoesNotExist new
	version: iceVersion;
	signal ]
	Receiver's instance variables: 
		outerContext: 	IceLibgitRepository>>mcVersionFor:
		startpc: 	126
		numArgs: 	0


IceLibgitRepository>>mcVersionFor:
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 
		iceVersion: 	IceSavedPackageVersion(PetitParser)
	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


IceGitCommit(IceCommitish)>>mcVersionFor:
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		anIceSavedPackageVersion: 	IceSavedPackageVersion(PetitParser)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


[ (self mcVersionFor: (self versionFor: anIceSavedPackage)) snapshot ] in IceGitCommit(IceCommitish)>>snapshotForPackage:
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		anIceSavedPackage: 	IcePackage(PetitParser, loaded)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


BlockClosure>>on:do:
	Receiver: [ (self mcVersionFor: (self versionFor: anIceSavedPackage)) snapshot ]
	Arguments and temporary variables: 
		exception: 	IceVersionDoesNotExist
		handlerAction: 	[ MCSnapshot empty ]
	Receiver's instance variables: 
		outerContext: 	IceGitCommit(IceCommitish)>>snapshotForPackage:
		startpc: 	86
		numArgs: 	0


IceGitCommit(IceCommitish)>>snapshotForPackage:
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		anIceSavedPackage: 	IcePackage(PetitParser, loaded)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


IceMCPackageImporter>>snapshot
	Receiver: an IceMCPackageImporter
	Arguments and temporary variables: 

	Receiver's instance variables: 
		packageName: 	nil
		version: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		package: 	IcePackage(PetitParser, loaded)


IceMCPackageImporter>>importOn:
	Receiver: an IceMCPackageImporter
	Arguments and temporary variables: 
		aNode: 	IceNode(src)
		packageNode: 	IceNode(PetitParser)
		snapshot: 	nil
		definition: 	an IcePackageDefinition
	Receiver's instance variables: 
		packageName: 	nil
		version: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		package: 	IcePackage(PetitParser, loaded)


IceChangeImporter>>visitImageChange:
	Receiver: an IceChangeImporter
	Arguments and temporary variables: 
		anIceImageChange: 	an IceImageChange
		importer: 	an IceMCPackageImporter
	Receiver's instance variables: 
		parentNode: 	THERE_BE_DRAGONS_HERE
#KdPGrammer was sent to nil
7 January 2020 4:10:53.582626 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #KdPGrammer
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	KdPGrammer
		exception: 	MessageNotUnderstood: receiver of "KdPGrammer" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ kdp := new KdPGrammer
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(813973248)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(813973248)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(158727936)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(813973248)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(977541376)
		submorphs: 	an Array(a RubPrimarySelectionMorph(860970752) a RubCursor(590608640...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (689991424) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(155445504)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(590608640)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(274163968))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(158727936)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(149073664) named: Pl...etc...
		lastStepTime: 	50345513
		lastStepMessage: 	nil
		lastCycleTime: 	50345550
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(590608640)))
		lastAlarmTime: 	50345513
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2560@1377)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (2560@1377)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(149073664) named: Pl...etc...
		lastStepTime: 	50345513
		lastStepMessage: 	nil
		lastCycleTime: 	50345550
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(590608640)))
		lastAlarmTime: 	50345513
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(149073664) named: Pl...etc...
		lastStepTime: 	50345513
		lastStepMessage: 	nil
		lastCycleTime: 	50345550
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(590608640)))
		lastAlarmTime: 	50345513
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2560@1377)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (2560@1377)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #KdPGrammer
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#KdPGrammer was sent to nil
7 January 2020 4:10:59.689626 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #KdPGrammer
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	KdPGrammer
		exception: 	MessageNotUnderstood: receiver of "KdPGrammer" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ kdp := new KdPGrammer
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(813973248)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | result basicInspect ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(813973248)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(158727936)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(813973248)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(977541376)
		submorphs: 	an Array(a RubPrimarySelectionMorph(860970752) a RubCursor(590608640...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (689991424) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(155445504)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(590608640)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1054383872))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(158727936)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(149073664) named: Pl...etc...
		lastStepTime: 	50351607
		lastStepMessage: 	nil
		lastCycleTime: 	50351661
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(590608640)))
		lastAlarmTime: 	50351607
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2560@1377)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (2560@1377)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(149073664) named: Pl...etc...
		lastStepTime: 	50351607
		lastStepMessage: 	nil
		lastCycleTime: 	50351661
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(590608640)))
		lastAlarmTime: 	50351607
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(149073664) named: Pl...etc...
		lastStepTime: 	50351607
		lastStepMessage: 	nil
		lastCycleTime: 	50351661
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(590608640)))
		lastAlarmTime: 	50351607
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2560@1377)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (2560@1377)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #KdPGrammer
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#parse: was sent to nil
7 January 2020 11:38:12.570626 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #parse:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	parse: '-123.45E-2'
		exception: 	MessageNotUnderstood: receiver of "parse:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	string := $' asParser , $' asParser negate star , $' asParser.
	^ nu...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(71278336)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(71278336)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(290021120)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(71278336)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@69)
		owner: 	a TransformWithLayoutMorph(752859392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(527519488) a RubCursor(949321472...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (467175680) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(1065453824)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(949321472)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(621436672))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(198.0@74.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(290021120)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(996118272) named: Pl...etc...
		lastStepTime: 	77184484
		lastStepMessage: 	nil
		lastCycleTime: 	77184541
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77184484
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(996118272) named: Pl...etc...
		lastStepTime: 	77184484
		lastStepMessage: 	nil
		lastCycleTime: 	77184541
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77184484
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(996118272) named: Pl...etc...
		lastStepTime: 	77184484
		lastStepMessage: 	nil
		lastCycleTime: 	77184541
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77184484
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #parse:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#parse: was sent to nil
7 January 2020 11:38:43.257626 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #parse:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	parse: '-123.45E-2'
		exception: 	MessageNotUnderstood: receiver of "parse:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ number parse: '-123.45E-2'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(71278336)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(71278336)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(290021120)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	77215232
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	77215234
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	77215232
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	77215234
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(958795520) named: Pl...etc...
		lastStepTime: 	77215182
		lastStepMessage: 	nil
		lastCycleTime: 	77215234
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77215182
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		now: 	77215234
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(958795520) named: Pl...etc...
		lastStepTime: 	77215182
		lastStepMessage: 	nil
		lastCycleTime: 	77215234
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77215182
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(958795520) named: Pl...etc...
		lastStepTime: 	77215182
		lastStepMessage: 	nil
		lastCycleTime: 	77215234
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77215182
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(958795520) named: Pl...etc...
		lastStepTime: 	77215182
		lastStepMessage: 	nil
		lastCycleTime: 	77215234
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77215182
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(958795520) named: Pl...etc...
		lastStepTime: 	77215182
		lastStepMessage: 	nil
		lastCycleTime: 	77215234
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77215182
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #parse:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Character did not understand #igit
7 January 2020 11:42:29.635626 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Character(Object)>>doesNotUnderstand: #igit
	Receiver: $d
	Arguments and temporary variables: 
		aMessage: 	igit
		exception: 	MessageNotUnderstood: Character>>igit
		resumeValue: 	nil
	Receiver's instance variables: 
$d

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	string := $' asParser , $' asParser negate star , $' asParser.
	numb...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(71278336)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(71278336)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(290021120)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(71278336)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@107)
		owner: 	a TransformWithLayoutMorph(752859392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(527519488) a RubCursor(949321472...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (467175680) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(1065453824)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(949321472)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(631635712))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(523.0@38.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(290021120)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(958795520) named: Pl...etc...
		lastStepTime: 	77441544
		lastStepMessage: 	nil
		lastCycleTime: 	77441608
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77441544
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(958795520) named: Pl...etc...
		lastStepTime: 	77441544
		lastStepMessage: 	nil
		lastCycleTime: 	77441608
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77441544
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(958795520) named: Pl...etc...
		lastStepTime: 	77441544
		lastStepMessage: 	nil
		lastCycleTime: 	77441608
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77441544
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Character(Object)>>doesNotUnderstand: #igit
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of Character did not understand #igit
7 January 2020 11:44:59.729626 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Character(Object)>>doesNotUnderstand: #igit
	Receiver: $d
	Arguments and temporary variables: 
		aMessage: 	igit
		exception: 	MessageNotUnderstood: Character>>igit
		resumeValue: 	nil
	Receiver's instance variables: 
$d

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ number := $- asParser optional , #digit asParser plus
		,
			($. a...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(71278336)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(71278336)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(290021120)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(71278336)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@126)
		owner: 	a TransformWithLayoutMorph(752859392)
		submorphs: 	an Array(a RubPrimarySelectionMorph(2578688) a RubCursor(949321472) ...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (467175680) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(1065453824)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(949321472)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(185597696))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(290021120)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(996118272) named: Pl...etc...
		lastStepTime: 	77591677
		lastStepMessage: 	nil
		lastCycleTime: 	77591699
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77591677
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(996118272) named: Pl...etc...
		lastStepTime: 	77591677
		lastStepMessage: 	nil
		lastCycleTime: 	77591699
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77591677
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(996118272) named: Pl...etc...
		lastStepTime: 	77591677
		lastStepMessage: 	nil
		lastCycleTime: 	77591699
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77591677
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
Character(Object)>>doesNotUnderstand: #igit
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#parse: was sent to nil
7 January 2020 11:45:43.448626 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #parse:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	parse: '-123.45E-2'
		exception: 	MessageNotUnderstood: receiver of "parse:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ number parse: '-123.45E-2'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(71278336)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(71278336)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(290021120)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	77635382
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	77635423
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	77635382
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	77635423
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(996118272) named: Pl...etc...
		lastStepTime: 	77635372
		lastStepMessage: 	nil
		lastCycleTime: 	77635423
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77635372
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		now: 	77635423
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(996118272) named: Pl...etc...
		lastStepTime: 	77635372
		lastStepMessage: 	nil
		lastCycleTime: 	77635423
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77635372
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(996118272) named: Pl...etc...
		lastStepTime: 	77635372
		lastStepMessage: 	nil
		lastCycleTime: 	77635423
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77635372
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(996118272) named: Pl...etc...
		lastStepTime: 	77635372
		lastStepMessage: 	nil
		lastCycleTime: 	77635423
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77635372
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(996118272) named: Pl...etc...
		lastStepTime: 	77635372
		lastStepMessage: 	nil
		lastCycleTime: 	77635423
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77635372
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #parse:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#parse: was sent to nil
7 January 2020 11:45:48.194626 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #parse:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	parse: '-123.45E-2'
		exception: 	MessageNotUnderstood: receiver of "parse:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ number parse: '-123.45E-2'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(71278336)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(71278336)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(290021120)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	77640128
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	77640171
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	77640128
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	77640171
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(996118272) named: Pl...etc...
		lastStepTime: 	77640120
		lastStepMessage: 	nil
		lastCycleTime: 	77640171
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77640120
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		now: 	77640171
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(996118272) named: Pl...etc...
		lastStepTime: 	77640120
		lastStepMessage: 	nil
		lastCycleTime: 	77640171
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77640120
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(996118272) named: Pl...etc...
		lastStepTime: 	77640120
		lastStepMessage: 	nil
		lastCycleTime: 	77640171
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77640120
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(996118272) named: Pl...etc...
		lastStepTime: 	77640120
		lastStepMessage: 	nil
		lastCycleTime: 	77640171
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77640120
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(996118272) named: Pl...etc...
		lastStepTime: 	77640120
		lastStepMessage: 	nil
		lastCycleTime: 	77640171
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(949321472)))
		lastAlarmTime: 	77640120
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #parse:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#whenFindTextChanged: was sent to nil
7 January 2020 11:47:14.614626 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #whenFindTextChanged:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	whenFindTextChanged: a RubFindTextChanged
		exception: 	MessageNotUnderstood: receiver of "whenFindTextChanged:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

RubFindReplaceService>>findPolicyChanged
	Receiver: a RubFindReplaceService
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a RubFindReplaceDialogWindow(124591872) named: Fi...etc...
		announcer: 	nil
		findText: 	a Text for 'number := $- asParser optional, #digit asParser plus, ($....etc...
		replaceText: 	''
		caseSensitive: 	false
		entireWordsOnly: 	false
		wrapAround: 	false
		searchBackwards: 	false
		findStartIndex: 	212
		isRegex: 	false
		dialog: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		textAreaHolder: 	a WeakArray(nil)


RubFindReplaceService>>wrapAround:
	Receiver: a RubFindReplaceService
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a RubFindReplaceDialogWindow(124591872) named: Fi...etc...
		announcer: 	nil
		findText: 	a Text for 'number := $- asParser optional, #digit asParser plus, ($....etc...
		replaceText: 	''
		caseSensitive: 	false
		entireWordsOnly: 	false
		wrapAround: 	false
		searchBackwards: 	false
		findStartIndex: 	212
		isRegex: 	false
		dialog: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		textAreaHolder: 	a WeakArray(nil)


RubFindReplaceDialogWindow>>wrapAround:
	Receiver: a RubFindReplaceDialogWindow(124591872) named: Find & Replace
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (318@230)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(527593216) a WindowEdgeGripMorph(2991...etc...
		fullBounds: 	(0@0) corner: (318@230)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (299925248) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a RubFindReplaceService
		labelString: 	'Find & Replace'
		stripes: 	an Array(a Morph(699521280) a Morph(454921984))
		label: 	a LabelMorph(831998208)'Find & Replace'
		closeBox: 	nil
		collapseBox: 	nil
		paneMorphs: 	an Array(a PanelMorph(54107904))
		collapsedFrame: 	nil
		fullFrame: 	(0@0) corner: (318@230)
		isCollapsed: 	false
		menuBox: 	nil
		mustNotClose: 	false
		labelWidgetAllowance: 	0
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(1005959424)
		expandBox: 	nil
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	nil
		cancelled: 	true
		findTextField: 	a PluggableTextFieldMorph(21278464)


CheckboxMorph>>toggleSelected
	Receiver: a CheckboxMorph(405408000)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(165.0@99.0) corner: (260.0@120.0)
		owner: 	a PanelMorph(948357376)
		submorphs: 	an Array(3PButton(#toggleSelected 418782976) a LabelMorph(107821312)...etc...
		fullBounds: 	(165@99) corner: (260@120)
		color: 	Color transparent
		extension: 	a MorphExtension (750333696) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	2
		borderColor: 	Color transparent
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		buttonMorph: 	3PButton(#toggleSelected 418782976)
		labelMorph: 	a LabelMorph(107821312)'Wrap around'
		getLabelSelector: 	nil
		setStateSelector: 	#wrapAround:
		getStateSelector: 	#wrapAround
		enabled: 	true
		getEnabledSelector: 	nil
		labelClickable: 	true


[ target perform: actionSelector withArguments: arguments ] in CheckboxButtonMorph(ThreePhaseButtonMorph)>>doButtonAction
	Receiver: 3PButton(#toggleSelected 418782976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(167.0@102.0) corner: (181.0@116.0)
		owner: 	a CheckboxMorph(405408000)
		submorphs: 	#()
		fullBounds: 	(167.0@102.0) corner: (181.0@116.0)
		color: 	Color transparent
		extension: 	a MorphExtension (834447616) [eventHandler = a MorphicEventHandler] ...etc...
		image: 	Form(12x12x32)
		offImage: 	nil
		pressedImage: 	nil
		state: 	#off
		target: 	a CheckboxMorph(405408000)
		actionSelector: 	#toggleSelected
		arguments: 	#()
		actWhen: 	#buttonUp
		repressedImage: 	nil
		enabled: 	true
		isRadioButton: 	false
		images: 	a Dictionary(#off->[ self offImage ] #on->[ self onImage ] #pressed->[ ...etc...


BlockClosure>>ensure:
	Receiver: [ target perform: actionSelector withArguments: arguments ]
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CheckboxButtonMorph(ThreePhaseButtonMorph)>>doButtonAction
		startpc: 	112
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ target perform: actionSelector withArguments: arguments ]
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


CheckboxButtonMorph(ThreePhaseButtonMorph)>>doButtonAction
	Receiver: 3PButton(#toggleSelected 418782976)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(167.0@102.0) corner: (181.0@116.0)
		owner: 	a CheckboxMorph(405408000)
		submorphs: 	#()
		fullBounds: 	(167.0@102.0) corner: (181.0@116.0)
		color: 	Color transparent
		extension: 	a MorphExtension (834447616) [eventHandler = a MorphicEventHandler] ...etc...
		image: 	Form(12x12x32)
		offImage: 	nil
		pressedImage: 	nil
		state: 	#off
		target: 	a CheckboxMorph(405408000)
		actionSelector: 	#toggleSelected
		arguments: 	#()
		actWhen: 	#buttonUp
		repressedImage: 	nil
		enabled: 	true
		isRadioButton: 	false
		images: 	a Dictionary(#off->[ self offImage ] #on->[ self onImage ] #pressed->[ ...etc...


CheckboxMorph>>updateButton:
	Receiver: a CheckboxMorph(405408000)
	Arguments and temporary variables: 
		evt: 	[(200@110) mouseUp 22164275 nil]
	Receiver's instance variables: 
		bounds: 	(165.0@99.0) corner: (260.0@120.0)
		owner: 	a PanelMorph(948357376)
		submorphs: 	an Array(3PButton(#toggleSelected 418782976) a LabelMorph(107821312)...etc...
		fullBounds: 	(165@99) corner: (260@120)
		color: 	Color transparent
		extension: 	a MorphExtension (750333696) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	2
		borderColor: 	Color transparent
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		buttonMorph: 	3PButton(#toggleSelected 418782976)
		labelMorph: 	a LabelMorph(107821312)'Wrap around'
		getLabelSelector: 	nil
		setStateSelector: 	#wrapAround:
		getStateSelector: 	#wrapAround
		enabled: 	true
		getEnabledSelector: 	nil
		labelClickable: 	true


MorphEventSubscription>>notify:from:
	Receiver: a MorphEventSubscription
	Arguments and temporary variables: 
		anEvent: 	[(200@110) mouseUp 22164275 nil]
		sourceMorph: 	a CheckboxMorph(405408000)
		arity: 	1
	Receiver's instance variables: 
		event: 	#mouseUp
		selector: 	#updateButton:
		recipient: 	a CheckboxMorph(405408000)
		valueParameter: 	nil


[ :s | result := result | ((s notify: anEvent from: sourceMorph) == true) ] in MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		anEvent: 	[(200@110) mouseUp 22164275 nil]
		eventType: 	#mouseUp
		sourceMorph: 	a CheckboxMorph(405408000)
		result: 	false
		s: 	a MorphEventSubscription
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) #mouseMove-...etc...


Set>>do:
	Receiver: a Set(a MorphEventSubscription)
	Arguments and temporary variables: 
		aBlock: 	[ :s | result := result | ((s notify: anEvent from: sourceMorph) == tru...etc...
		index: 	2
		each: 	a MorphEventSubscription
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil a MorphEventSubscription nil nil nil)


MorphicEventHandler>>notifyMorphsOfEvent:ofType:from:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		result: 	false
		anEvent: 	[(200@110) mouseUp 22164275 nil]
		eventType: 	#mouseUp
		sourceMorph: 	a CheckboxMorph(405408000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) #mouseMove-...etc...


MorphicEventHandler>>mouseUp:fromMorph:
	Receiver: a MorphicEventHandler
	Arguments and temporary variables: 
		event: 	[(200@110) mouseUp 22164275 nil]
		sourceMorph: 	a CheckboxMorph(405408000)
	Receiver's instance variables: 
		subscriptions: 	a Dictionary(#click->a Set(a MorphEventSubscription) #mouseMove-...etc...


CheckboxMorph(Morph)>>mouseUp:
	Receiver: a CheckboxMorph(405408000)
	Arguments and temporary variables: 
		evt: 	[(200@110) mouseUp 22164275 nil]
	Receiver's instance variables: 
		bounds: 	(165.0@99.0) corner: (260.0@120.0)
		owner: 	a PanelMorph(948357376)
		submorphs: 	an Array(3PButton(#toggleSelected 418782976) a LabelMorph(107821312)...etc...
		fullBounds: 	(165@99) corner: (260@120)
		color: 	Color transparent
		extension: 	a MorphExtension (750333696) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	2
		borderColor: 	Color transparent
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		buttonMorph: 	3PButton(#toggleSelected 418782976)
		labelMorph: 	a LabelMorph(107821312)'Wrap around'
		getLabelSelector: 	nil
		setStateSelector: 	#wrapAround:
		getStateSelector: 	#wrapAround
		enabled: 	true
		getEnabledSelector: 	nil
		labelClickable: 	true


CheckboxMorph(Morph)>>handleMouseUp:
	Receiver: a CheckboxMorph(405408000)
	Arguments and temporary variables: 
		anEvent: 	[(200@110) mouseUp 22164275 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(165.0@99.0) corner: (260.0@120.0)
		owner: 	a PanelMorph(948357376)
		submorphs: 	an Array(3PButton(#toggleSelected 418782976) a LabelMorph(107821312)...etc...
		fullBounds: 	(165@99) corner: (260@120)
		color: 	Color transparent
		extension: 	a MorphExtension (750333696) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	2
		borderColor: 	Color transparent
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		buttonMorph: 	3PButton(#toggleSelected 418782976)
		labelMorph: 	a LabelMorph(107821312)'Wrap around'
		getLabelSelector: 	nil
		setStateSelector: 	#wrapAround:
		getStateSelector: 	#wrapAround
		enabled: 	true
		getEnabledSelector: 	nil
		labelClickable: 	true


MouseButtonEvent>>sentTo:
	Receiver: [(200@110) mouseUp 22164275 nil]
	Arguments and temporary variables: 
		anObject: 	a CheckboxMorph(405408000)
	Receiver's instance variables: 
		timeStamp: 	22164275
		source: 	a HandMorph(104802560)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(200@110)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


CheckboxMorph(Morph)>>handleEvent:
	Receiver: a CheckboxMorph(405408000)
	Arguments and temporary variables: 
		anEvent: 	[(200@110) mouseUp 22164275 nil]
	Receiver's instance variables: 
		bounds: 	(165.0@99.0) corner: (260.0@120.0)
		owner: 	a PanelMorph(948357376)
		submorphs: 	an Array(3PButton(#toggleSelected 418782976) a LabelMorph(107821312)...etc...
		fullBounds: 	(165@99) corner: (260@120)
		color: 	Color transparent
		extension: 	a MorphExtension (750333696) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	2
		borderColor: 	Color transparent
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		buttonMorph: 	3PButton(#toggleSelected 418782976)
		labelMorph: 	a LabelMorph(107821312)'Wrap around'
		getLabelSelector: 	nil
		setStateSelector: 	#wrapAround:
		getStateSelector: 	#wrapAround
		enabled: 	true
		getEnabledSelector: 	nil
		labelClickable: 	true


CheckboxMorph(Morph)>>handleFocusEvent:
	Receiver: a CheckboxMorph(405408000)
	Arguments and temporary variables: 
		anEvent: 	[(200@110) mouseUp 22164275 nil]
	Receiver's instance variables: 
		bounds: 	(165.0@99.0) corner: (260.0@120.0)
		owner: 	a PanelMorph(948357376)
		submorphs: 	an Array(3PButton(#toggleSelected 418782976) a LabelMorph(107821312)...etc...
		fullBounds: 	(165@99) corner: (260@120)
		color: 	Color transparent
		extension: 	a MorphExtension (750333696) [eventHandler = a MorphicEventHandler] ...etc...
		borderWidth: 	2
		borderColor: 	Color transparent
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		buttonMorph: 	3PButton(#toggleSelected 418782976)
		labelMorph: 	a LabelMorph(107821312)'Wrap around'
		getLabelSelector: 	nil
		setStateSelector: 	#wrapAround:
		getStateSelector: 	#wrapAround
		enabled: 	true
		getEnabledSelector: 	nil
		labelClickable: 	true


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(104802560)
	Arguments and temporary variables: 
		anEvent: 	[(200@110) mouseUp 22164275 nil]
		focusHolder: 	a CheckboxMorph(405408000)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(428085248) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(200@110.0) corner: (216@126.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (725416192)
		mouseFocus: 	nil
		keyboardFocus: 	a CheckboxMorph(405408000)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(200@110) mouseUp 22164275 nil]
		targetOffset: 	(35.0@11.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22164275 200 110 0 0 1 1)
		lastKeyScanCode: 	80
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(428085248) [world]
		priorHand: 	a HandMorph(104802560)
		priorEvent: 	[(200@110) mouseOver red 22164150 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a RubFi...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(104802560)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(200@110) mouseUp 22164275 nil]
		focusHolder: 	a CheckboxMorph(405408000)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		bounds: 	(200@110.0) corner: (216@126.0)
		owner: 	a WorldMorph(4280THERE_BE_DRAGONS_HERE
#whenFindTextChanged: was sent to nil
7 January 2020 11:47:17.743626 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #whenFindTextChanged:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	whenFindTextChanged: a RubFindTextChanged
		exception: 	MessageNotUnderstood: receiver of "whenFindTextChanged:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

RubFindReplaceService>>findPolicyChanged
	Receiver: a RubFindReplaceService
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a RubFindReplaceDialogWindow(124591872) named: Fi...etc...
		announcer: 	nil
		findText: 	a Text for ''
		replaceText: 	''
		caseSensitive: 	false
		entireWordsOnly: 	false
		wrapAround: 	false
		searchBackwards: 	false
		findStartIndex: 	212
		isRegex: 	false
		dialog: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		textAreaHolder: 	a WeakArray(nil)


RubFindReplaceService>>findText:
	Receiver: a RubFindReplaceService
	Arguments and temporary variables: 
		aStringOrText: 	''
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a RubFindReplaceDialogWindow(124591872) named: Fi...etc...
		announcer: 	nil
		findText: 	a Text for ''
		replaceText: 	''
		caseSensitive: 	false
		entireWordsOnly: 	false
		wrapAround: 	false
		searchBackwards: 	false
		findStartIndex: 	212
		isRegex: 	false
		dialog: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		textAreaHolder: 	a WeakArray(nil)


RubFindReplaceDialogWindow>>cancel
	Receiver: a RubFindReplaceDialogWindow(124591872) named: Find & Replace
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (318@230)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(527593216) a WindowEdgeGripMorph(2991...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (299925248) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a RubFindReplaceService
		labelString: 	'Find & Replace'
		stripes: 	an Array(a Morph(699521280) a Morph(454921984))
		label: 	a LabelMorph(831998208)'Find & Replace'
		closeBox: 	nil
		collapseBox: 	nil
		paneMorphs: 	an Array(a PanelMorph(54107904))
		collapsedFrame: 	nil
		fullFrame: 	(0@0) corner: (318@230)
		isCollapsed: 	false
		menuBox: 	nil
		mustNotClose: 	false
		labelWidgetAllowance: 	0
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(1005959424)
		expandBox: 	nil
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	nil
		cancelled: 	true
		findTextField: 	a PluggableTextFieldMorph(21278464)


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(941578496)
	Arguments and temporary variables: 
		event: 	[(287@214) mouseUp 22167447 nil]
	Receiver's instance variables: 
		bounds: 	(240.0@197.0) corner: (309.0@221.0)
		owner: 	a Morph(302780160)
		submorphs: 	an Array(an AlignmentMorph(46145280))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (485850880) [balloonText]  [other:  (mouseEntered -...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		label: 	'Cancel'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	nil
		actionSelector: 	#cancel
		font: 	nil
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	an Array(a PluggableButtonMorph(941578496))
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(363645184)'Cancel'
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(941578496)
	Arguments and temporary variables: 
		evt: 	[(287@214) mouseUp 22167447 nil]
		all: 	an Array(a PluggableButtonMorph(962910464) a PluggableButtonMorph(19939712...etc...
		m: 	a PluggableButtonMorph(941578496)
	Receiver's instance variables: 
		bounds: 	(240.0@197.0) corner: (309.0@221.0)
		owner: 	a Morph(302780160)
		submorphs: 	an Array(an AlignmentMorph(46145280))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (485850880) [balloonText]  [other:  (mouseEntered -...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		label: 	'Cancel'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	nil
		actionSelector: 	#cancel
		font: 	nil
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	an Array(a PluggableButtonMorph(941578496))
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(363645184)'Cancel'
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(962910464) a PluggableButtonMorph(199397120) a PluggableBu...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTr...etc...
		index: 	4
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(962910464) a PluggableButtonMorph(199397120) a PluggableBu...etc...

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(941578496)
	Arguments and temporary variables: 
		evt: 	[(287@214) mouseUp 22167447 nil]
		all: 	an Array(a PluggableButtonMorph(962910464) a PluggableButtonMorph(19939712...etc...
	Receiver's instance variables: 
		bounds: 	(240.0@197.0) corner: (309.0@221.0)
		owner: 	a Morph(302780160)
		submorphs: 	an Array(an AlignmentMorph(46145280))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (485850880) [balloonText]  [other:  (mouseEntered -...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		label: 	'Cancel'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	nil
		actionSelector: 	#cancel
		font: 	nil
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	an Array(a PluggableButtonMorph(941578496))
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(363645184)'Cancel'
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(941578496)
	Arguments and temporary variables: 
		anEvent: 	[(287@214) mouseUp 22167447 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(240.0@197.0) corner: (309.0@221.0)
		owner: 	a Morph(302780160)
		submorphs: 	an Array(an AlignmentMorph(46145280))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (485850880) [balloonText]  [other:  (mouseEntered -...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		label: 	'Cancel'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	nil
		actionSelector: 	#cancel
		font: 	nil
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	an Array(a PluggableButtonMorph(941578496))
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(363645184)'Cancel'
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


MouseButtonEvent>>sentTo:
	Receiver: [(287@214) mouseUp 22167447 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(941578496)
	Receiver's instance variables: 
		timeStamp: 	22167447
		source: 	a HandMorph(104802560)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(287@214)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(941578496)
	Arguments and temporary variables: 
		anEvent: 	[(287@214) mouseUp 22167447 nil]
	Receiver's instance variables: 
		bounds: 	(240.0@197.0) corner: (309.0@221.0)
		owner: 	a Morph(302780160)
		submorphs: 	an Array(an AlignmentMorph(46145280))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (485850880) [balloonText]  [other:  (mouseEntered -...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		label: 	'Cancel'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	nil
		actionSelector: 	#cancel
		font: 	nil
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	an Array(a PluggableButtonMorph(941578496))
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(363645184)'Cancel'
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(941578496)
	Arguments and temporary variables: 
		anEvent: 	[(287@214) mouseUp 22167447 nil]
	Receiver's instance variables: 
		bounds: 	(240.0@197.0) corner: (309.0@221.0)
		owner: 	a Morph(302780160)
		submorphs: 	an Array(an AlignmentMorph(46145280))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (485850880) [balloonText]  [other:  (mouseEntered -...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		label: 	'Cancel'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	nil
		actionSelector: 	#cancel
		font: 	nil
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	an Array(a PluggableButtonMorph(941578496))
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(363645184)'Cancel'
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(104802560)
	Arguments and temporary variables: 
		anEvent: 	[(287@214) mouseUp 22167447 nil]
		focusHolder: 	a PluggableButtonMorph(941578496)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(428085248) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(287@214.0) corner: (303@230.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	(287@214.0) corner: (303@230.0)
		color: 	Color blue
		extension: 	a MorphExtension (725416192)
		mouseFocus: 	nil
		keyboardFocus: 	a CheckboxMorph(405408000)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(287@214) mouseUp 22167447 nil]
		targetOffset: 	(47.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22167447 287 214 0 0 1 1)
		lastKeyScanCode: 	80
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(428085248) [world]
		priorHand: 	a HandMorph(104802560)
		priorEvent: 	[(287@214) mouseOver red 22167369 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a RubFi...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(104802560)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(287@214) mouseUp 22167447 nil]
		focusHolder: 	a PluggableButtonMorph(941578496)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		bounds: 	(287@214.0) corner: (303@230.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	(287@214.0) corner: (303@230.0)
		color: 	Color blue
		extension: 	a MorphExtension (725416192)
		mouseFocus: 	nil
		keyboardFocus: 	a CheckboxMorph(405408000)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(287@214) mouseUp 22167447 nil]
		targetOffset: 	(47.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22167447 287 214 0 0 1 1)
		lastKeyScanCode: 	80
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(104802560)
	Arguments and temporary variables: 
		anEvent: 	[(287@214) mouseUp 22167447 nil]
		focusHolder: 	a PluggableButtonMorph(941578496)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(287@214.0) corner: (303@230.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	(287@214.0) corner: (303@230.0)
		color: 	Color blue
		extension: 	a MorphExtension (725416192)
		mouseFocus: 	nil
		keyboardFocus: 	a CheckboxMorph(405408000)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(287@214) mouseUp 22167447 nil]
		targetOffset: 	(47.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22167447 287 214 0 0 1 1)
		lastKeyScanCode: 	80
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(104802560)
	Arguments and temporary variables: 
		anEvent: 	[(287@214) mouseUp 22167447 nil]
	Receiver's instance variables: 
		bounds: 	(287@214.0) corner: (303@230.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	(287@214.0) corner: (303@230.0)
		color: 	Color blue
		extension: 	a MorphExtension (725416192)
		mouseFocus: 	nil
		keyboardFocus: 	a CheckboxMorph(405408000)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(287@214) mouseUp 22167447 nil]
		targetOffset: 	(47.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22167447 287 214 0 0 1 1)
		lastKeyScanCode: 	80
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(104802560)
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
#whenFindTextChanged: was sent to nil
7 January 2020 11:47:22.936626 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #whenFindTextChanged:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	whenFindTextChanged: a RubFindTextChanged
		exception: 	MessageNotUnderstood: receiver of "whenFindTextChanged:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

RubFindReplaceService>>findPolicyChanged
	Receiver: a RubFindReplaceService
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a RubFindReplaceDialogWindow(124591872) named: Fi...etc...
		announcer: 	nil
		findText: 	a Text for ''
		replaceText: 	''
		caseSensitive: 	false
		entireWordsOnly: 	false
		wrapAround: 	false
		searchBackwards: 	false
		findStartIndex: 	212
		isRegex: 	false
		dialog: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		textAreaHolder: 	a WeakArray(nil)


RubFindReplaceService>>findText:
	Receiver: a RubFindReplaceService
	Arguments and temporary variables: 
		aStringOrText: 	''
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a RubFindReplaceDialogWindow(124591872) named: Fi...etc...
		announcer: 	nil
		findText: 	a Text for ''
		replaceText: 	''
		caseSensitive: 	false
		entireWordsOnly: 	false
		wrapAround: 	false
		searchBackwards: 	false
		findStartIndex: 	212
		isRegex: 	false
		dialog: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		textAreaHolder: 	a WeakArray(nil)


RubFindReplaceDialogWindow>>findText:
	Receiver: a RubFindReplaceDialogWindow(124591872) named: Find & Replace
	Arguments and temporary variables: 
		aStringOrText: 	''
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (318@230)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(527593216) a WindowEdgeGripMorph(2991...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (299925248) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a RubFindReplaceService
		labelString: 	'Find & Replace'
		stripes: 	an Array(a Morph(699521280) a Morph(454921984))
		label: 	a LabelMorph(831998208)'Find & Replace'
		closeBox: 	nil
		collapseBox: 	nil
		paneMorphs: 	an Array(a PanelMorph(54107904))
		collapsedFrame: 	nil
		fullFrame: 	(0@0) corner: (318@230)
		isCollapsed: 	false
		menuBox: 	nil
		mustNotClose: 	false
		labelWidgetAllowance: 	0
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(1005959424)
		expandBox: 	nil
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	nil
		cancelled: 	true
		findTextField: 	a PluggableTextFieldMorph(21278464)


PluggableTextFieldMorph>>acceptTextInModel
	Receiver: a PluggableTextFieldMorph(21278464)
	Arguments and temporary variables: 
		objectToAccept: 	''
		text: 	a Text for ''
	Receiver's instance variables: 
		bounds: 	(14.0@37.0) corner: (304.0@62.0)
		owner: 	a PanelMorph(282300160)
		submorphs: 	an Array(an AlignmentMorph(124344576) a TransformMorph(189656832))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (357699328) [balloonText]  [other:  (announcer -> a...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		scrollBar: 	a ScrollBar(1045874944)
		scroller: 	a TransformMorph(189656832)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(866524928)
		textMorph: 	a TextMorphForFieldView(1045068032)
		getTextSelector: 	#findText
		setTextSelector: 	#findText:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		autoAccept: 	true
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		alwaysAccept: 	true
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		converter: 	an ObjectStringConverter
		ghostText: 	'Text to find'
		default: 	nil
		entryCompletion: 	an EntryCompletion
		endRow: 	an AlignmentMorph(124344576)
		textMorphClass: 	TextMorphForFieldView
		textFont: 	nil


PluggableTextFieldMorph(PluggableTextMorph)>>acceptBasic
	Receiver: a PluggableTextFieldMorph(21278464)
	Arguments and temporary variables: 
		ok: 	nil
		saveSelection: 	(1 to: 0)
		saveScrollerOffset: 	(-3.0@0.0)
	Receiver's instance variables: 
		bounds: 	(14.0@37.0) corner: (304.0@62.0)
		owner: 	a PanelMorph(282300160)
		submorphs: 	an Array(an AlignmentMorph(124344576) a TransformMorph(189656832))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (357699328) [balloonText]  [other:  (announcer -> a...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		scrollBar: 	a ScrollBar(1045874944)
		scroller: 	a TransformMorph(189656832)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(866524928)
		textMorph: 	a TextMorphForFieldView(1045068032)
		getTextSelector: 	#findText
		setTextSelector: 	#findText:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		autoAccept: 	true
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		alwaysAccept: 	true
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		converter: 	an ObjectStringConverter
		ghostText: 	'Text to find'
		default: 	nil
		entryCompletion: 	an EntryCompletion
		endRow: 	an AlignmentMorph(124344576)
		textMorphClass: 	TextMorphForFieldView
		textFont: 	nil


PluggableTextFieldMorph(PluggableTextMorph)>>accept
	Receiver: a PluggableTextFieldMorph(21278464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(14.0@37.0) corner: (304.0@62.0)
		owner: 	a PanelMorph(282300160)
		submorphs: 	an Array(an AlignmentMorph(124344576) a TransformMorph(189656832))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (357699328) [balloonText]  [other:  (announcer -> a...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		scrollBar: 	a ScrollBar(1045874944)
		scroller: 	a TransformMorph(189656832)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(866524928)
		textMorph: 	a TextMorphForFieldView(1045068032)
		getTextSelector: 	#findText
		setTextSelector: 	#findText:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		autoAccept: 	true
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		alwaysAccept: 	true
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		converter: 	an ObjectStringConverter
		ghostText: 	'Text to find'
		default: 	nil
		entryCompletion: 	an EntryCompletion
		endRow: 	an AlignmentMorph(124344576)
		textMorphClass: 	TextMorphForFieldView
		textFont: 	nil


TextMorphForFieldView(TextMorphForEditView)>>acceptContents
	Receiver: a TextMorphForFieldView(1045068032)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (10000003@23)
		owner: 	a TransformMorph(189656832)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (10000003@23)
		color: 	Color black
		extension: 	a MorphExtension (49035520) [other:  (kmDispatcher -> a KMDispatcher...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for ''
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a TextEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	a Margin top: 1 left: 2 bottom: 1 right: 2
		defaultColor: 	nil
		editView: 	a PluggableTextFieldMorph(21278464)
		acceptOnCR: 	false
		autoAccept: 	true
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		maxLength: 	nil


TextEditor>>accept
	Receiver: a TextEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForFieldView(1045068032)
		selectionShowing: 	true
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		editingState: 	an EditingState


TextMorphForFieldView(TextMorphForEditView)>>doAutoAccept:
	Receiver: a TextMorphForFieldView(1045068032)
	Arguments and temporary variables: 
		evt: 	[keystroke '<backspace>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (10000003@23)
		owner: 	a TransformMorph(189656832)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (10000003@23)
		color: 	Color black
		extension: 	a MorphExtension (49035520) [other:  (kmDispatcher -> a KMDispatcher...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for ''
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a TextEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	a Margin top: 1 left: 2 bottom: 1 right: 2
		defaultColor: 	nil
		editView: 	a PluggableTextFieldMorph(21278464)
		acceptOnCR: 	false
		autoAccept: 	true
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		maxLength: 	nil


TextMorphForFieldView(TextMorphForEditView)>>keyStroke:
	Receiver: a TextMorphForFieldView(1045068032)
	Arguments and temporary variables: 
		evt: 	[keystroke '<backspace>']
		view: 	a PluggableTextFieldMorph(21278464)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (10000003@23)
		owner: 	a TransformMorph(189656832)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (10000003@23)
		color: 	Color black
		extension: 	a MorphExtension (49035520) [other:  (kmDispatcher -> a KMDispatcher...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for ''
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a TextEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	a Margin top: 1 left: 2 bottom: 1 right: 2
		defaultColor: 	nil
		editView: 	a PluggableTextFieldMorph(21278464)
		acceptOnCR: 	false
		autoAccept: 	true
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		maxLength: 	nil


TextMorphForFieldView>>keyStroke:
	Receiver: a TextMorphForFieldView(1045068032)
	Arguments and temporary variables: 
		evt: 	[keystroke '<backspace>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (10000003@23)
		owner: 	a TransformMorph(189656832)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (10000003@23)
		color: 	Color black
		extension: 	a MorphExtension (49035520) [other:  (kmDispatcher -> a KMDispatcher...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for ''
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a TextEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	a Margin top: 1 left: 2 bottom: 1 right: 2
		defaultColor: 	nil
		editView: 	a PluggableTextFieldMorph(21278464)
		acceptOnCR: 	false
		autoAccept: 	true
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		maxLength: 	nil


TextMorphForFieldView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForFieldView(1045068032)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<backspace>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (10000003@23)
		owner: 	a TransformMorph(189656832)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (10000003@23)
		color: 	Color black
		extension: 	a MorphExtension (49035520) [other:  (kmDispatcher -> a KMDispatcher...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for ''
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a TextEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	a Margin top: 1 left: 2 bottom: 1 right: 2
		defaultColor: 	nil
		editView: 	a PluggableTextFieldMorph(21278464)
		acceptOnCR: 	false
		autoAccept: 	true
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		maxLength: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<backspace>']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForFieldView(1045068032)
	Receiver's instance variables: 
		timeStamp: 	22172634
		source: 	a HandMorph(104802560)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	(249.0@28.0)
		handler: 	nil
		wasHandled: 	false
		keyValue: 	8
		charCode: 	8
		scanCode: 	8


TextMorphForFieldView(Morph)>>handleEvent:
	Receiver: a TextMorphForFieldView(1045068032)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<backspace>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (10000003@23)
		owner: 	a TransformMorph(189656832)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (10000003@23)
		color: 	Color black
		extension: 	a MorphExtension (49035520) [other:  (kmDispatcher -> a KMDispatcher...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for ''
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a TextEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	a Margin top: 1 left: 2 bottom: 1 right: 2
		defaultColor: 	nil
		editView: 	a PluggableTextFieldMorph(21278464)
		acceptOnCR: 	false
		autoAccept: 	true
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		maxLength: 	nil


TextMorphForFieldView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForFieldView(1045068032)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<backspace>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (10000003@23)
		owner: 	a TransformMorph(189656832)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (10000003@23)
		color: 	Color black
		extension: 	a MorphExtension (49035520) [other:  (kmDispatcher -> a KMDispatcher...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for ''
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a TextEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	a Margin top: 1 left: 2 bottom: 1 right: 2
		defaultColor: 	nil
		editView: 	a PluggableTextFieldMorph(21278464)
		acceptOnCR: 	false
		autoAccept: 	true
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		maxLength: 	nil


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(104802560)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<backspace>']
		focusHolder: 	a TextMorphForFieldView(1045068032)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(428085248) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(267@66.0) corner: (283@82.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	(267@66.0) corner: (283@82.0)
		color: 	Color blue
		extension: 	a MorphExtension (725416192)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForFieldView(1045068032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(267@66) mouseOver 22172603 nil]
		targetOffset: 	(233.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22172603 262 62 0 0 0 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph(PasteUpMorph)>>THERE_BE_DRAGONS_HERE
#whenFindTextChanged: was sent to nil
7 January 2020 11:47:29.269626 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #whenFindTextChanged:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	whenFindTextChanged: a RubFindTextChanged
		exception: 	MessageNotUnderstood: receiver of "whenFindTextChanged:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

RubFindReplaceService>>findPolicyChanged
	Receiver: a RubFindReplaceService
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a RubFindReplaceDialogWindow(124591872) named: Fi...etc...
		announcer: 	nil
		findText: 	a Text for ''
		replaceText: 	''
		caseSensitive: 	false
		entireWordsOnly: 	false
		wrapAround: 	false
		searchBackwards: 	false
		findStartIndex: 	212
		isRegex: 	false
		dialog: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		textAreaHolder: 	a WeakArray(nil)


RubFindReplaceService>>findText:
	Receiver: a RubFindReplaceService
	Arguments and temporary variables: 
		aStringOrText: 	''
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a RubFindReplaceDialogWindow(124591872) named: Fi...etc...
		announcer: 	nil
		findText: 	a Text for ''
		replaceText: 	''
		caseSensitive: 	false
		entireWordsOnly: 	false
		wrapAround: 	false
		searchBackwards: 	false
		findStartIndex: 	212
		isRegex: 	false
		dialog: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		textAreaHolder: 	a WeakArray(nil)


RubFindReplaceDialogWindow>>cancel
	Receiver: a RubFindReplaceDialogWindow(124591872) named: Find & Replace
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(202.0@391.0) corner: (520.0@621.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(527593216) a WindowEdgeGripMorph(2991...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (299925248) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a RubFindReplaceService
		labelString: 	'Find & Replace'
		stripes: 	an Array(a Morph(699521280) a Morph(454921984))
		label: 	a LabelMorph(831998208)'Find & Replace'
		closeBox: 	nil
		collapseBox: 	nil
		paneMorphs: 	an Array(a PanelMorph(54107904))
		collapsedFrame: 	nil
		fullFrame: 	(202.0@391.0) corner: (520.0@621.0)
		isCollapsed: 	false
		menuBox: 	nil
		mustNotClose: 	false
		labelWidgetAllowance: 	0
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(1005959424)
		expandBox: 	nil
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	nil
		cancelled: 	true
		findTextField: 	a PluggableTextFieldMorph(21278464)


PluggableButtonMorph>>performAction:
	Receiver: a PluggableButtonMorph(941578496)
	Arguments and temporary variables: 
		event: 	[(486@596) mouseUp 22178978 nil]
	Receiver's instance variables: 
		bounds: 	(442.0@588.0) corner: (511.0@612.0)
		owner: 	a Morph(302780160)
		submorphs: 	an Array(an AlignmentMorph(46145280))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (485850880) [balloonText]  [other:  (mouseEntered -...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		label: 	'Cancel'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	nil
		actionSelector: 	#cancel
		font: 	nil
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	an Array(a PluggableButtonMorph(941578496))
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(363645184)'Cancel'
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTrue: [ m performAction: evt ] ] ] in PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(941578496)
	Arguments and temporary variables: 
		evt: 	[(486@596) mouseUp 22178978 nil]
		all: 	an Array(a PluggableButtonMorph(962910464) a PluggableButtonMorph(19939712...etc...
		m: 	a PluggableButtonMorph(941578496)
	Receiver's instance variables: 
		bounds: 	(442.0@588.0) corner: (511.0@612.0)
		owner: 	a Morph(302780160)
		submorphs: 	an Array(an AlignmentMorph(46145280))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (485850880) [balloonText]  [other:  (mouseEntered -...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		label: 	'Cancel'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	nil
		actionSelector: 	#cancel
		font: 	nil
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	an Array(a PluggableButtonMorph(941578496))
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(363645184)'Cancel'
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


Array(SequenceableCollection)>>do:
	Receiver: an Array(a PluggableButtonMorph(962910464) a PluggableButtonMorph(199397120) a PluggableBu...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :m | 
(m containsPoint: evt cursorPoint)
	ifTrue: [ m enabled
			ifTr...etc...
		index: 	4
	Receiver's instance variables: 
an Array(a PluggableButtonMorph(962910464) a PluggableButtonMorph(199397120) a PluggableBu...etc...

PluggableButtonMorph>>mouseUp:
	Receiver: a PluggableButtonMorph(941578496)
	Arguments and temporary variables: 
		evt: 	[(486@596) mouseUp 22178978 nil]
		all: 	an Array(a PluggableButtonMorph(962910464) a PluggableButtonMorph(19939712...etc...
	Receiver's instance variables: 
		bounds: 	(442.0@588.0) corner: (511.0@612.0)
		owner: 	a Morph(302780160)
		submorphs: 	an Array(an AlignmentMorph(46145280))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (485850880) [balloonText]  [other:  (mouseEntered -...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		label: 	'Cancel'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	nil
		actionSelector: 	#cancel
		font: 	nil
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	an Array(a PluggableButtonMorph(941578496))
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(363645184)'Cancel'
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleMouseUp:
	Receiver: a PluggableButtonMorph(941578496)
	Arguments and temporary variables: 
		anEvent: 	[(486@596) mouseUp 22178978 nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(442.0@588.0) corner: (511.0@612.0)
		owner: 	a Morph(302780160)
		submorphs: 	an Array(an AlignmentMorph(46145280))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (485850880) [balloonText]  [other:  (mouseEntered -...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		label: 	'Cancel'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	nil
		actionSelector: 	#cancel
		font: 	nil
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	an Array(a PluggableButtonMorph(941578496))
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(363645184)'Cancel'
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


MouseButtonEvent>>sentTo:
	Receiver: [(486@596) mouseUp 22178978 nil]
	Arguments and temporary variables: 
		anObject: 	a PluggableButtonMorph(941578496)
	Receiver's instance variables: 
		timeStamp: 	22178978
		source: 	a HandMorph(104802560)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(486@596)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


PluggableButtonMorph(Morph)>>handleEvent:
	Receiver: a PluggableButtonMorph(941578496)
	Arguments and temporary variables: 
		anEvent: 	[(486@596) mouseUp 22178978 nil]
	Receiver's instance variables: 
		bounds: 	(442.0@588.0) corner: (511.0@612.0)
		owner: 	a Morph(302780160)
		submorphs: 	an Array(an AlignmentMorph(46145280))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (485850880) [balloonText]  [other:  (mouseEntered -...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		label: 	'Cancel'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	nil
		actionSelector: 	#cancel
		font: 	nil
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	an Array(a PluggableButtonMorph(941578496))
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(363645184)'Cancel'
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


PluggableButtonMorph(Morph)>>handleFocusEvent:
	Receiver: a PluggableButtonMorph(941578496)
	Arguments and temporary variables: 
		anEvent: 	[(486@596) mouseUp 22178978 nil]
	Receiver's instance variables: 
		bounds: 	(442.0@588.0) corner: (511.0@612.0)
		owner: 	a Morph(302780160)
		submorphs: 	an Array(an AlignmentMorph(46145280))
		fullBounds: 	nil
		color: 	(Color r: 0.901 g: 0.901 b: 0.901 alpha: 1.0)
		extension: 	a MorphExtension (485850880) [balloonText]  [other:  (mouseEntered -...etc...
		borderWidth: 	1
		borderColor: 	#simple
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		label: 	'Cancel'
		icon: 	nil
		getIconSelector: 	nil
		getStateSelector: 	nil
		actionSelector: 	#cancel
		font: 	nil
		getLabelSelector: 	nil
		getMenuSelector: 	nil
		shortcutCharacter: 	nil
		askBeforeChanging: 	false
		triggerOnMouseDown: 	false
		offColor: 	nil
		onColor: 	nil
		feedbackColor: 	nil
		showSelectionFeedback: 	false
		allButtons: 	nil
		arguments: 	an Array(a PluggableButtonMorph(941578496))
		argumentsProvider: 	nil
		argumentsSelector: 	nil
		enabled: 	true
		actionBlock: 	nil
		getColorSelector: 	nil
		getEnabledSelector: 	nil
		getFontSelector: 	nil
		labelMorph: 	a LabelMorph(363645184)'Cancel'
		iconMorph: 	nil
		iconPosition: 	#left
		lastState: 	false


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(104802560)
	Arguments and temporary variables: 
		anEvent: 	[(486@596) mouseUp 22178978 nil]
		focusHolder: 	a PluggableButtonMorph(941578496)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(428085248) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(486@596.0) corner: (502@612.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	(486@596.0) corner: (502@612.0)
		color: 	Color blue
		extension: 	a MorphExtension (725416192)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForFieldView(1045068032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(486@596) mouseUp 22178978 nil]
		targetOffset: 	(44.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22178978 486 596 0 0 1 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(428085248) [world]
		priorHand: 	a HandMorph(104802560)
		priorEvent: 	[(486@596) mouseOver red 22178853 nil]
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a RubFi...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(104802560)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[(486@596) mouseUp 22178978 nil]
		focusHolder: 	a PluggableButtonMorph(941578496)
		aBlock: 	[ self mouseFocus: nil ]
		w: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		bounds: 	(486@596.0) corner: (502@612.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	(486@596.0) corner: (502@612.0)
		color: 	Color blue
		extension: 	a MorphExtension (725416192)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForFieldView(1045068032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(486@596) mouseUp 22178978 nil]
		targetOffset: 	(44.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22178978 486 596 0 0 1 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(104802560)
	Arguments and temporary variables: 
		anEvent: 	[(486@596) mouseUp 22178978 nil]
		focusHolder: 	a PluggableButtonMorph(941578496)
		aBlock: 	[ self mouseFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(486@596.0) corner: (502@612.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	(486@596.0) corner: (502@612.0)
		color: 	Color blue
		extension: 	a MorphExtension (725416192)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForFieldView(1045068032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(486@596) mouseUp 22178978 nil]
		targetOffset: 	(44.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22178978 486 596 0 0 1 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendMouseEvent:
	Receiver: a HandMorph(104802560)
	Arguments and temporary variables: 
		anEvent: 	[(486@596) mouseUp 22178978 nil]
	Receiver's instance variables: 
		bounds: 	(486@596.0) corner: (502@612.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	(486@596.0) corner: (502@612.0)
		color: 	Color blue
		extension: 	a MorphExtension (725416192)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForFieldView(1045068032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(486@596) mouseUp 22178978 nil]
		targetOffset: 	(44.0@8.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22178978 486 596 0 0 1 1)
		lastKeyScanCode: 	8
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>handleEvent:
	Receiver: a HandMorph(104802560)
	Arguments and temporary variables: 
		anEvent: 	[(486@596) mouseUp 22178978 nil]
		evt: 	[(486@596) mouseUp 22178978 nil]
	Receiver's instance variables: 
		bounds: 	(486@596.0) corner: (502@612.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	(486@596.0) corner: (502@612.0)
		color: 	Color blue
		extension: 	a MorphExtension (725416192)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForFieldView(1045068032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(486@596) mouseUp 22178978 nil]
		targetOTHERE_BE_DRAGONS_HERE
#whenFindTextChanged: was sent to nil
7 January 2020 11:47:35.750626 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #whenFindTextChanged:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	whenFindTextChanged: a RubFindTextChanged
		exception: 	MessageNotUnderstood: receiver of "whenFindTextChanged:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

RubFindReplaceService>>findPolicyChanged
	Receiver: a RubFindReplaceService
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	a DependentsArray(a RubFindReplaceDialogWindow(124591872) named: Fi...etc...
		announcer: 	nil
		findText: 	a Text for ''
		replaceText: 	''
		caseSensitive: 	false
		entireWordsOnly: 	false
		wrapAround: 	false
		searchBackwards: 	false
		findStartIndex: 	212
		isRegex: 	false
		dialog: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		textAreaHolder: 	a WeakArray(nil)


RubFindReplaceService>>findText:
	Receiver: a RubFindReplaceService
	Arguments and temporary variables: 
		aStringOrText: 	''
	Receiver's instance variables: 
		dependents: 	a DependentsArray(a RubFindReplaceDialogWindow(124591872) named: Fi...etc...
		announcer: 	nil
		findText: 	a Text for ''
		replaceText: 	''
		caseSensitive: 	false
		entireWordsOnly: 	false
		wrapAround: 	false
		searchBackwards: 	false
		findStartIndex: 	212
		isRegex: 	false
		dialog: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		textAreaHolder: 	a WeakArray(nil)


RubFindReplaceDialogWindow>>findText:
	Receiver: a RubFindReplaceDialogWindow(124591872) named: Find & Replace
	Arguments and temporary variables: 
		aStringOrText: 	''
	Receiver's instance variables: 
		bounds: 	(202.0@391.0) corner: (520.0@621.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	an Array(a WindowEdgeGripMorph(527593216) a WindowEdgeGripMorph(2991...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (299925248) [other:  (paneColor -> (Color r: 0.8230...etc...
		borderWidth: 	1
		borderColor: 	Color lightGray
		model: 	a RubFindReplaceService
		labelString: 	'Find & Replace'
		stripes: 	an Array(a Morph(699521280) a Morph(454921984))
		label: 	a LabelMorph(831998208)'Find & Replace'
		closeBox: 	nil
		collapseBox: 	nil
		paneMorphs: 	an Array(a PanelMorph(54107904))
		collapsedFrame: 	nil
		fullFrame: 	(202.0@391.0) corner: (520.0@621.0)
		isCollapsed: 	false
		menuBox: 	nil
		mustNotClose: 	false
		labelWidgetAllowance: 	0
		updatablePanes: 	#()
		labelArea: 	an AlignmentMorph(1005959424)
		expandBox: 	nil
		embeddable: 	nil
		menuBuilder: 	nil
		isResizeable: 	nil
		cancelled: 	true
		findTextField: 	a PluggableTextFieldMorph(21278464)


PluggableTextFieldMorph>>acceptTextInModel
	Receiver: a PluggableTextFieldMorph(21278464)
	Arguments and temporary variables: 
		objectToAccept: 	''
		text: 	a Text for ''
	Receiver's instance variables: 
		bounds: 	(216.0@428.0) corner: (506.0@453.0)
		owner: 	a PanelMorph(282300160)
		submorphs: 	an Array(an AlignmentMorph(124344576) a TransformMorph(189656832))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (357699328) [balloonText]  [other:  (announcer -> a...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		scrollBar: 	a ScrollBar(1045874944)
		scroller: 	a TransformMorph(189656832)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(866524928)
		textMorph: 	a TextMorphForFieldView(1045068032)
		getTextSelector: 	#findText
		setTextSelector: 	#findText:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		autoAccept: 	true
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		alwaysAccept: 	true
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		converter: 	an ObjectStringConverter
		ghostText: 	'Text to find'
		default: 	nil
		entryCompletion: 	an EntryCompletion
		endRow: 	an AlignmentMorph(124344576)
		textMorphClass: 	TextMorphForFieldView
		textFont: 	nil


PluggableTextFieldMorph(PluggableTextMorph)>>acceptBasic
	Receiver: a PluggableTextFieldMorph(21278464)
	Arguments and temporary variables: 
		ok: 	nil
		saveSelection: 	(1 to: 0)
		saveScrollerOffset: 	(-3.0@0.0)
	Receiver's instance variables: 
		bounds: 	(216.0@428.0) corner: (506.0@453.0)
		owner: 	a PanelMorph(282300160)
		submorphs: 	an Array(an AlignmentMorph(124344576) a TransformMorph(189656832))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (357699328) [balloonText]  [other:  (announcer -> a...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		scrollBar: 	a ScrollBar(1045874944)
		scroller: 	a TransformMorph(189656832)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(866524928)
		textMorph: 	a TextMorphForFieldView(1045068032)
		getTextSelector: 	#findText
		setTextSelector: 	#findText:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		autoAccept: 	true
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		alwaysAccept: 	true
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		converter: 	an ObjectStringConverter
		ghostText: 	'Text to find'
		default: 	nil
		entryCompletion: 	an EntryCompletion
		endRow: 	an AlignmentMorph(124344576)
		textMorphClass: 	TextMorphForFieldView
		textFont: 	nil


PluggableTextFieldMorph(PluggableTextMorph)>>accept
	Receiver: a PluggableTextFieldMorph(21278464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(216.0@428.0) corner: (506.0@453.0)
		owner: 	a PanelMorph(282300160)
		submorphs: 	an Array(an AlignmentMorph(124344576) a TransformMorph(189656832))
		fullBounds: 	nil
		color: 	Color white
		extension: 	a MorphExtension (357699328) [balloonText]  [other:  (announcer -> a...etc...
		borderWidth: 	1
		borderColor: 	(Color r: 0.784 g: 0.784 b: 0.784 alpha: 1.0)
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		scrollBar: 	a ScrollBar(1045874944)
		scroller: 	a TransformMorph(189656832)
		getMenuSelector: 	nil
		getMenuTitleSelector: 	nil
		hasFocus: 	false
		hScrollBar: 	a ScrollBar(866524928)
		textMorph: 	a TextMorphForFieldView(1045068032)
		getTextSelector: 	#findText
		setTextSelector: 	#findText:
		getSelectionSelector: 	nil
		hasUnacceptedEdits: 	true
		askBeforeDiscardingEdits: 	true
		selectionInterval: 	(1 to: 0)
		hasEditingConflicts: 	false
		acceptAction: 	nil
		getColorSelector: 	nil
		unstyledAcceptText: 	nil
		styler: 	a NullTextStyler
		autoAccept: 	true
		enabled: 	true
		getEnabledSelector: 	nil
		highlights: 	an OrderedCollection()
		acceptOnFocusChange: 	nil
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		alwaysAccept: 	true
		changedAction: 	nil
		doubleClickSelector: 	nil
		setSelectionSelector: 	nil
		converter: 	an ObjectStringConverter
		ghostText: 	'Text to find'
		default: 	nil
		entryCompletion: 	an EntryCompletion
		endRow: 	an AlignmentMorph(124344576)
		textMorphClass: 	TextMorphForFieldView
		textFont: 	nil


TextMorphForFieldView(TextMorphForEditView)>>acceptContents
	Receiver: a TextMorphForFieldView(1045068032)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (10000003@23)
		owner: 	a TransformMorph(189656832)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (10000003@23)
		color: 	Color black
		extension: 	a MorphExtension (49035520) [other:  (kmDispatcher -> a KMDispatcher...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for ''
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a TextEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	a Margin top: 1 left: 2 bottom: 1 right: 2
		defaultColor: 	nil
		editView: 	a PluggableTextFieldMorph(21278464)
		acceptOnCR: 	false
		autoAccept: 	true
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		maxLength: 	nil


TextEditor>>accept
	Receiver: a TextEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		morph: 	a TextMorphForFieldView(1045068032)
		selectionShowing: 	true
		model: 	a RubFindReplaceDialogWindow(124591872) named: Find & Replace
		editingState: 	an EditingState


TextMorphForFieldView(TextMorphForEditView)>>doAutoAccept:
	Receiver: a TextMorphForFieldView(1045068032)
	Arguments and temporary variables: 
		evt: 	[keystroke 'a']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (10000003@23)
		owner: 	a TransformMorph(189656832)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (10000003@23)
		color: 	Color black
		extension: 	a MorphExtension (49035520) [other:  (kmDispatcher -> a KMDispatcher...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for ''
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a TextEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	a Margin top: 1 left: 2 bottom: 1 right: 2
		defaultColor: 	nil
		editView: 	a PluggableTextFieldMorph(21278464)
		acceptOnCR: 	false
		autoAccept: 	true
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		maxLength: 	nil


TextMorphForFieldView>>keyStroke:
	Receiver: a TextMorphForFieldView(1045068032)
	Arguments and temporary variables: 
		evt: 	[keystroke 'a']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (10000003@23)
		owner: 	a TransformMorph(189656832)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (10000003@23)
		color: 	Color black
		extension: 	a MorphExtension (49035520) [other:  (kmDispatcher -> a KMDispatcher...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for ''
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a TextEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	a Margin top: 1 left: 2 bottom: 1 right: 2
		defaultColor: 	nil
		editView: 	a PluggableTextFieldMorph(21278464)
		acceptOnCR: 	false
		autoAccept: 	true
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		maxLength: 	nil


TextMorphForFieldView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForFieldView(1045068032)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'a']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (10000003@23)
		owner: 	a TransformMorph(189656832)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (10000003@23)
		color: 	Color black
		extension: 	a MorphExtension (49035520) [other:  (kmDispatcher -> a KMDispatcher...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for ''
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a TextEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	a Margin top: 1 left: 2 bottom: 1 right: 2
		defaultColor: 	nil
		editView: 	a PluggableTextFieldMorph(21278464)
		acceptOnCR: 	false
		autoAccept: 	true
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		maxLength: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke 'a']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForFieldView(1045068032)
	Receiver's instance variables: 
		timeStamp: 	22185416
		source: 	a HandMorph(104802560)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	0
		position: 	(80.0@45.0)
		handler: 	nil
		wasHandled: 	false
		keyValue: 	97
		charCode: 	97
		scanCode: 	65


TextMorphForFieldView(Morph)>>handleEvent:
	Receiver: a TextMorphForFieldView(1045068032)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'a']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (10000003@23)
		owner: 	a TransformMorph(189656832)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (10000003@23)
		color: 	Color black
		extension: 	a MorphExtension (49035520) [other:  (kmDispatcher -> a KMDispatcher...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for ''
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a TextEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	a Margin top: 1 left: 2 bottom: 1 right: 2
		defaultColor: 	nil
		editView: 	a PluggableTextFieldMorph(21278464)
		acceptOnCR: 	false
		autoAccept: 	true
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		maxLength: 	nil


TextMorphForFieldView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForFieldView(1045068032)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'a']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (10000003@23)
		owner: 	a TransformMorph(189656832)
		submorphs: 	#()
		fullBounds: 	(0@0) corner: (10000003@23)
		color: 	Color black
		extension: 	a MorphExtension (49035520) [other:  (kmDispatcher -> a KMDispatcher...etc...
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Source Sans Pro
		text: 	a Text for ''
		wrapFlag: 	false
		paragraph: 	a Paragraph
		editor: 	a TextEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	a Margin top: 1 left: 2 bottom: 1 right: 2
		defaultColor: 	nil
		editView: 	a PluggableTextFieldMorph(21278464)
		acceptOnCR: 	false
		autoAccept: 	true
		acceptOnFocusChange: 	false
		selectionColor: 	(Color r: 0.686 g: 0.835 b: 0.979 alpha: 1.0)
		maxLength: 	nil


[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(104802560)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'a']
		focusHolder: 	a TextMorphForFieldView(1045068032)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(428085248) [world]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(300@474.0) corner: (316@490.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	(300@474.0) corner: (316@490.0)
		color: 	Color blue
		extension: 	a MorphExtension (725416192)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForFieldView(1045068032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(300@474) mouseOver 22185322 nil]
		targetOffset: 	(81.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22185322 300 472 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


BlockClosure>>on:do:
	Receiver: [ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (an...etc...
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :ex | 
ActiveWorld := priorWorld.
ActiveEvent := priorEvent.
A...etc...
	Receiver's instance variables: 
		outerContext: 	HandMorph>>sendFocusEvent:to:clear:
		startpc: 	111
		numArgs: 	0


WorldMorph(PasteUpMorph)>>becomeActiveDuring:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		aBlock: 	[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	ha...etc...
		priorWorld: 	a WorldMorph(428085248) [world]
		priorHand: 	a HandMorph(104802560)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a RubFi...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(104802560)
	Arguments and temporary variables: 
		result: 	nil
		anEvent: 	[keystroke 'a']
		focusHolder: 	a TextMorphForFieldView(1045068032)
		aBlock: 	[ self keyboardFocus: nil ]
		w: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		bounds: 	(300@474.0) corner: (316@490.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	(300@474.0) corner: (316@490.0)
		color: 	Color blue
		extension: 	a MorphExtension (725416192)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForFieldView(1045068032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(300@474) mouseOver 22185322 nil]
		targetOffset: 	(81.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22185322 300 472 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(104802560)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'a']
		focusHolder: 	a TextMorphForFieldView(1045068032)
		aBlock: 	[ self keyboardFocus: nil ]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	(300@474.0) corner: (316@490.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	(300@474.0) corner: (316@490.0)
		color: 	Color blue
		extension: 	a MorphExtension (725416192)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForFieldView(1045068032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(300@474) mouseOver 22185322 nil]
		targetOffset: 	(81.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22185322 300 472 0 0 0 1)
		lastKeyScanCode: 	65
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	0


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(104802560)
	Arguments and temporary variables: 
		anEvent: 	[keystroke 'a']
	Receiver's instance variables: 
		bounds: 	(300@474.0) corner: (316@490.0)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	(300@474.0) corner: (316@490.0)
		color: 	Color blue
		extension: 	a MorphExtension (725416192)
		mouseFocus: 	nil
		keyboardFocus: 	a TextMorphForFieldView(1045068032)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(300@474) mouseOver 22185322 nil]
		targetOffset: 	(81.0@22.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22185322 300 472 0 0 0 1)
THERE_BE_DRAGONS_HERE
#matches: was sent to nil
7 January 2020 11:52:08.846626 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #matches:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	matches: '33.3e-2'
		exception: 	MessageNotUnderstood: receiver of "matches:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ number matches: '33.3e-2'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(428072704)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(428072704)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(502499584)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(428072704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@145)
		owner: 	a TransformWithLayoutMorph(547715328)
		submorphs: 	an Array(a RubPrimarySelectionMorph(44814080) a RubCursor(497223936)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (983817984) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(350703360)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(497223936)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(478509312))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(502499584)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(387156224) named: Pl...etc...
		lastStepTime: 	78020768
		lastStepMessage: 	nil
		lastCycleTime: 	78020819
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(497223936)))
		lastAlarmTime: 	78020768
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(387156224) named: Pl...etc...
		lastStepTime: 	78020768
		lastStepMessage: 	nil
		lastCycleTime: 	78020819
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(497223936)))
		lastAlarmTime: 	78020768
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(387156224) named: Pl...etc...
		lastStepTime: 	78020768
		lastStepMessage: 	nil
		lastCycleTime: 	78020819
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(497223936)))
		lastAlarmTime: 	78020768
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #matches:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#optional was sent to nil
7 January 2020 11:52:11.443626 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #optional
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	optional
		exception: 	MessageNotUnderstood: receiver of "optional" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ number := $- asParser optional , natural
		, ($. asParser , natura...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(428072704)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(428072704)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(502499584)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(428072704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@145)
		owner: 	a TransformWithLayoutMorph(547715328)
		submorphs: 	an Array(a RubPrimarySelectionMorph(44814080) a RubCursor(497223936)...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (983817984) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(350703360)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(497223936)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(162531584))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(502499584)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(387156224) named: Pl...etc...
		lastStepTime: 	78023364
		lastStepMessage: 	nil
		lastCycleTime: 	78023414
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(497223936)))
		lastAlarmTime: 	78023364
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(387156224) named: Pl...etc...
		lastStepTime: 	78023364
		lastStepMessage: 	nil
		lastCycleTime: 	78023414
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(497223936)))
		lastAlarmTime: 	78023364
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(387156224) named: Pl...etc...
		lastStepTime: 	78023364
		lastStepMessage: 	nil
		lastCycleTime: 	78023414
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(497223936)))
		lastAlarmTime: 	78023364
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #optional
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#, was sent to nil
8 January 2020 12:02:32.140626 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #,
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	, a PPOptionalParser(730959616)
		exception: 	MessageNotUnderstood: receiver of "," is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ expo := $E asParser , (nevative , positive) optional
		, naturalNu...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(428072704)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(428072704)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(502499584)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(428072704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (730@183)
		owner: 	a TransformWithLayoutMorph(547715328)
		submorphs: 	an Array(a RubPrimarySelectionMorph(156461312) a RubCursor(497223936...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (983817984) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(350703360)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(497223936)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(792243968))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(502499584)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(149073664) named: Pl...etc...
		lastStepTime: 	78644064
		lastStepMessage: 	nil
		lastCycleTime: 	78644112
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(497223936)))
		lastAlarmTime: 	78644064
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(149073664) named: Pl...etc...
		lastStepTime: 	78644064
		lastStepMessage: 	nil
		lastCycleTime: 	78644112
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(497223936)))
		lastAlarmTime: 	78644064
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(149073664) named: Pl...etc...
		lastStepTime: 	78644064
		lastStepMessage: 	nil
		lastCycleTime: 	78644112
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(497223936)))
		lastAlarmTime: 	78644064
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #,
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of PPPossessiveRepeatingParser did not understand #number
8 January 2020 12:16:48.496626 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

PPPossessiveRepeatingParser(Object)>>doesNotUnderstand: #number
	Receiver: a PPPossessiveRepeatingParser(476502272) [1, *]
	Arguments and temporary variables: 
		aMessage: 	number
		exception: 	MessageNotUnderstood: PPPossessiveRepeatingParser>>number
		resumeValue: 	nil
	Receiver's instance variables: 
		properties: 	nil
		parser: 	a PPPredicateObjectParser(607162112, 'digit expected')
		min: 	1
		max: 	1152921504606846975


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	naturalNumber := #digit asParser plus.
	decimal := $. asParser optio...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(428072704)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(428072704)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(502499584)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(428072704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (730@202)
		owner: 	a TransformWithLayoutMorph(547715328)
		submorphs: 	an Array(a RubPrimarySelectionMorph(631314688) a RubCursor(497223936...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (983817984) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(350703360)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(497223936)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(485994240))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(502499584)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(149073664) named: Pl...etc...
		lastStepTime: 	79500444
		lastStepMessage: 	nil
		lastCycleTime: 	79500468
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(497223936)))
		lastAlarmTime: 	79500444
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(149073664) named: Pl...etc...
		lastStepTime: 	79500444
		lastStepMessage: 	nil
		lastCycleTime: 	79500468
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(497223936)))
		lastAlarmTime: 	79500444
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(149073664) named: Pl...etc...
		lastStepTime: 	79500444
		lastStepMessage: 	nil
		lastCycleTime: 	79500468
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(497223936)))
		lastAlarmTime: 	79500444
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
PPPossessiveRepeatingParser(Object)>>doesNotUnderstand: #number
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of PPPossessiveRepeatingParser did not understand #number
8 January 2020 12:17:57.525626 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

PPPossessiveRepeatingParser(Object)>>doesNotUnderstand: #number
	Receiver: a PPPossessiveRepeatingParser(818908928) [1, *]
	Arguments and temporary variables: 
		aMessage: 	number
		exception: 	MessageNotUnderstood: PPPossessiveRepeatingParser>>number
		resumeValue: 	nil
	Receiver's instance variables: 
		properties: 	nil
		parser: 	a PPPredicateObjectParser(179652864, 'digit expected')
		min: 	1
		max: 	1152921504606846975


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	naturalNumber := #digit asParser plus.
	decimal := $. asParser optio...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(428072704)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(428072704)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(502499584)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(428072704)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (990@202)
		owner: 	a TransformWithLayoutMorph(547715328)
		submorphs: 	an Array(a RubPrimarySelectionMorph(631314688) a RubCursor(497223936...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (983817984) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(350703360)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(497223936)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(731588864))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(502499584)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(387156224) named: Pl...etc...
		lastStepTime: 	79569472
		lastStepMessage: 	nil
		lastCycleTime: 	79569498
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(497223936)))
		lastAlarmTime: 	79569472
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(387156224) named: Pl...etc...
		lastStepTime: 	79569472
		lastStepMessage: 	nil
		lastCycleTime: 	79569498
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(497223936)))
		lastAlarmTime: 	79569472
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(387156224) named: Pl...etc...
		lastStepTime: 	79569472
		lastStepMessage: 	nil
		lastCycleTime: 	79569498
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(497223936)))
		lastAlarmTime: 	79569472
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
PPPossessiveRepeatingParser(Object)>>doesNotUnderstand: #number
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#matches: was sent to nil
8 January 2020 12:21:13.518626 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #matches:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	matches: '3.3.3'
		exception: 	MessageNotUnderstood: receiver of "matches:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	natural := digit asParser plus.
	number := naturalNumber.
	^ number ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(192950016)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(192950016)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(831385344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(192950016)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (990@107)
		owner: 	a TransformWithLayoutMorph(210610432)
		submorphs: 	an Array(a RubPrimarySelectionMorph(397469952) a RubCursor(529596160...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (676681984) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(772438272)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(529596160)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(994447104))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(831385344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(192950016))(a Rub...etc...
		lastStepTime: 	79765423
		lastStepMessage: 	nil
		lastCycleTime: 	79765490
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(529596160)))
		lastAlarmTime: 	79765423
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(192950016))(a Rub...etc...
		lastStepTime: 	79765423
		lastStepMessage: 	nil
		lastCycleTime: 	79765490
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(529596160)))
		lastAlarmTime: 	79765423
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(192950016))(a Rub...etc...
		lastStepTime: 	79765423
		lastStepMessage: 	nil
		lastCycleTime: 	79765490
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(529596160)))
		lastAlarmTime: 	79765423
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #matches:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#matches: was sent to nil
8 January 2020 12:21:19.921626 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #matches:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	matches: '3.3.3'
		exception: 	MessageNotUnderstood: receiver of "matches:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ number matches: '3.3.3'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(192950016)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(192950016)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(831385344)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	79771865
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	79771898
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	79771865
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	79771898
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(529596160)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(392857856) named: Pl...etc...
		lastStepTime: 	79771846
		lastStepMessage: 	nil
		lastCycleTime: 	79771898
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(529596160)))
		lastAlarmTime: 	79771846
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		now: 	79771898
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(392857856) named: Pl...etc...
		lastStepTime: 	79771846
		lastStepMessage: 	nil
		lastCycleTime: 	79771898
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(529596160)))
		lastAlarmTime: 	79771846
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(392857856) named: Pl...etc...
		lastStepTime: 	79771846
		lastStepMessage: 	nil
		lastCycleTime: 	79771898
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(529596160)))
		lastAlarmTime: 	79771846
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(392857856) named: Pl...etc...
		lastStepTime: 	79771846
		lastStepMessage: 	nil
		lastCycleTime: 	79771898
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(529596160)))
		lastAlarmTime: 	79771846
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(392857856) named: Pl...etc...
		lastStepTime: 	79771846
		lastStepMessage: 	nil
		lastCycleTime: 	79771898
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(529596160)))
		lastAlarmTime: 	79771846
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #matches:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#matches: was sent to nil
8 January 2020 12:21:29.433626 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #matches:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	matches: '3.3.3'
		exception: 	MessageNotUnderstood: receiver of "matches:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ number matches: '3.3.3'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(192950016)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(192950016)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(831385344)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(192950016)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (990@107)
		owner: 	a TransformWithLayoutMorph(210610432)
		submorphs: 	an Array(a RubPrimarySelectionMorph(397469952) a RubCursor(529596160...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (676681984) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(772438272)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(529596160)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(706047744))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(831385344)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(149073664) named: Pl...etc...
		lastStepTime: 	79781362
		lastStepMessage: 	nil
		lastCycleTime: 	79781407
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(529596160)))
		lastAlarmTime: 	79781362
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(149073664) named: Pl...etc...
		lastStepTime: 	79781362
		lastStepMessage: 	nil
		lastCycleTime: 	79781407
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(529596160)))
		lastAlarmTime: 	79781362
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(149073664) named: Pl...etc...
		lastStepTime: 	79781362
		lastStepMessage: 	nil
		lastCycleTime: 	79781407
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(529596160)))
		lastAlarmTime: 	79781362
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #matches:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#matches: was sent to nil
8 January 2020 12:21:39.929626 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #matches:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	matches: '3'
		exception: 	MessageNotUnderstood: receiver of "matches:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ number matches: '3'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(192950016)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(192950016)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(831385344)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	79791858
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	79791905
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	79791858
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	79791905
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(529596160)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(387156224) named: Pl...etc...
		lastStepTime: 	79791858
		lastStepMessage: 	nil
		lastCycleTime: 	79791905
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(529596160)))
		lastAlarmTime: 	79791858
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		now: 	79791905
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(387156224) named: Pl...etc...
		lastStepTime: 	79791858
		lastStepMessage: 	nil
		lastCycleTime: 	79791905
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(529596160)))
		lastAlarmTime: 	79791858
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(387156224) named: Pl...etc...
		lastStepTime: 	79791858
		lastStepMessage: 	nil
		lastCycleTime: 	79791905
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(529596160)))
		lastAlarmTime: 	79791858
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(387156224) named: Pl...etc...
		lastStepTime: 	79791858
		lastStepMessage: 	nil
		lastCycleTime: 	79791905
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(529596160)))
		lastAlarmTime: 	79791858
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(104802560))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(387156224) named: Pl...etc...
		lastStepTime: 	79791858
		lastStepMessage: 	nil
		lastCycleTime: 	79791905
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(529596160)))
		lastAlarmTime: 	79791858
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(104802560)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(769019648) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (483774208) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #matches:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Space is low
8 January 2020 12:26:56.116848 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

SmalltalkImage>>signalLowSpace
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	nil
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	nil
		vm: 	a VirtualMachine


OutOfMemory>>defaultAction
	Receiver: OutOfMemory
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	Smalltalk
		signalContext: 	OutOfMemory(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	OutOfMemory
	Receiver's instance variables: 
nil

OutOfMemory(Exception)>>signal
	Receiver: OutOfMemory
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signaler: 	Smalltalk
		signalContext: 	OutOfMemory(Exception)>>signal
		handlerContext: 	nil
		outerContext: 	nil


OutOfMemory class(Exception class)>>signal
	Receiver: OutOfMemory
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	Error
		methodDict: 	a MethodDictionary(#defaultAction->OutOfMemory>>#defaultAction #isR...etc...
		format: 	65542
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#OutOfMemory
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Exceptions'


SmalltalkImage>>growMemoryByAtLeast:
	Receiver: Smalltalk
	Arguments and temporary variables: 
		numBytes: 	42949672976
	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	nil
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	nil
		vm: 	a VirtualMachine


Array class(Behavior)>>handleFailingBasicNew:
	Receiver: Array
	Arguments and temporary variables: 
		sizeRequested: 	5368709120
		bytesRequested: 	42949672976
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. MetacelloMethodSectionPath. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable-Base'


Array class(Behavior)>>basicNew:
	Receiver: Array
	Arguments and temporary variables: 
		sizeRequested: 	5368709120
		ec: 	#'insufficient object memory'
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. MetacelloMethodSectionPath. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable-Base'


Array class>>new:
	Receiver: Array
	Arguments and temporary variables: 
		sizeRequested: 	5368709120
	Receiver's instance variables: 
		superclass: 	ArrayedCollection
		methodDict: 	a MethodDictionary(#'+*'->Array>>#'+*' #asArray->Array>>#asArray #a...etc...
		format: 	131072
		layout: 	a VariableLayout
		organization: 	a ClassOrganization
		subclasses: 	{WeakArray. MetacelloMethodSectionPath. WeakActionSequence. Cubic}
		name: 	#Array
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Collections-Sequenceable-Base'


OrderedCollection>>growAtLast
	Receiver: an OrderedCollection(nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil n...etc...
	Arguments and temporary variables: 
		newArray: 	nil
	Receiver's instance variables: 
		array: 	THERE_BE_DRAGONS_HERE
Instance of ByteSymbol did not understand #asParse
8 January 2020 1:07:21.362552 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

ByteSymbol(Object)>>doesNotUnderstand: #asParse
	Receiver: #letter
	Arguments and temporary variables: 
		aMessage: 	asParse
		exception: 	MessageNotUnderstood: ByteSymbol>>asParse
		resumeValue: 	nil
	Receiver's instance variables: 
#letter

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	test := #letter asParse.
	letter := test.
	^ letter matches: '1'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(243325184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(243325184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(657324288)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(243325184)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1645@107)
		owner: 	a TransformWithLayoutMorph(757501696)
		submorphs: 	an Array(a RubPrimarySelectionMorph(145547008) a RubCursor(712605440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (224688384) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(180838144)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(712605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1061416704))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(657324288)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(917924096) named: Pl...etc...
		lastStepTime: 	822196
		lastStepMessage: 	nil
		lastCycleTime: 	822223
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(712605440)))
		lastAlarmTime: 	822196
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2560@1377)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (2560@1377)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(917924096) named: Pl...etc...
		lastStepTime: 	822196
		lastStepMessage: 	nil
		lastCycleTime: 	822223
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(712605440)))
		lastAlarmTime: 	822196
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(917924096) named: Pl...etc...
		lastStepTime: 	822196
		lastStepMessage: 	nil
		lastCycleTime: 	822223
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(712605440)))
		lastAlarmTime: 	822196
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2560@1377)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (2560@1377)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
ByteSymbol(Object)>>doesNotUnderstand: #asParse
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of ByteSymbol did not understand #asParse
8 January 2020 1:07:25.534552 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

ByteSymbol(Object)>>doesNotUnderstand: #asParse
	Receiver: #letter
	Arguments and temporary variables: 
		aMessage: 	asParse
		exception: 	MessageNotUnderstood: ByteSymbol>>asParse
		resumeValue: 	nil
	Receiver's instance variables: 
#letter

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ test := #letter asParse
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(243325184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(243325184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(657324288)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(243325184)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1645@107)
		owner: 	a TransformWithLayoutMorph(757501696)
		submorphs: 	an Array(a RubPrimarySelectionMorph(145547008) a RubCursor(712605440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (224688384) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(180838144)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(712605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1000311040))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(657324288)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(917924096) named: Pl...etc...
		lastStepTime: 	826351
		lastStepMessage: 	nil
		lastCycleTime: 	826400
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(712605440)))
		lastAlarmTime: 	826351
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2560@1377)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (2560@1377)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(917924096) named: Pl...etc...
		lastStepTime: 	826351
		lastStepMessage: 	nil
		lastCycleTime: 	826400
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(712605440)))
		lastAlarmTime: 	826351
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(917924096) named: Pl...etc...
		lastStepTime: 	826351
		lastStepMessage: 	nil
		lastCycleTime: 	826400
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(712605440)))
		lastAlarmTime: 	826351
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2560@1377)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (2560@1377)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
ByteSymbol(Object)>>doesNotUnderstand: #asParse
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of ByteSymbol did not understand #asParse
8 January 2020 1:07:43.502552 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

ByteSymbol(Object)>>doesNotUnderstand: #asParse
	Receiver: #letter
	Arguments and temporary variables: 
		aMessage: 	asParse
		exception: 	MessageNotUnderstood: ByteSymbol>>asParse
		resumeValue: 	nil
	Receiver's instance variables: 
#letter

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ tester := #letter asParse
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(243325184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(243325184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(657324288)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(243325184)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1645@107)
		owner: 	a TransformWithLayoutMorph(757501696)
		submorphs: 	an Array(a RubPrimarySelectionMorph(145547008) a RubCursor(712605440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (224688384) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(180838144)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(712605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(1072412928))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(657324288)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(917924096) named: Pl...etc...
		lastStepTime: 	844322
		lastStepMessage: 	nil
		lastCycleTime: 	844368
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(712605440)))
		lastAlarmTime: 	844322
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2560@1377)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (2560@1377)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(917924096) named: Pl...etc...
		lastStepTime: 	844322
		lastStepMessage: 	nil
		lastCycleTime: 	844368
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(712605440)))
		lastAlarmTime: 	844322
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (2560@1377)
		canvas: 	a FormCanvas on: DisplayScreen(2560x1377x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(917924096) named: Pl...etc...
		lastStepTime: 	844322
		lastStepMessage: 	nil
		lastCycleTime: 	844368
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(712605440)))
		lastAlarmTime: 	844322
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (2560@1377)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (2560@1377)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
ByteSymbol(Object)>>doesNotUnderstand: #asParse
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#parseOn: was sent to nil
8 January 2020 2:11:32.708552 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #parseOn:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	parseOn: a PPContext: 123.·123
		exception: 	MessageNotUnderstood: receiver of "parseOn:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

PPSequenceParser>>parseOn:
	Receiver: a PPSequenceParser(552390400)
	Arguments and temporary variables: 
		aPPContext: 	a PPContext: 123.·123
		memento: 	a PPContextMemento
		elements: 	#($. nil nil)
		element: 	$.
		index: 	2
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPLiteralObjectParser(260688128, $.) nil a PPOptionalParser...etc...


PPOptionalParser>>parseOn:
	Receiver: a PPOptionalParser(518725376)
	Arguments and temporary variables: 
		aPPContext: 	a PPContext: 123.·123
		element: 	nil
	Receiver's instance variables: 
		properties: 	nil
		parser: 	a PPSequenceParser(552390400)


PPSequenceParser>>parseOn:
	Receiver: a PPSequenceParser(382816000)
	Arguments and temporary variables: 
		aPPContext: 	a PPContext: 123.·123
		memento: 	a PPContextMemento
		elements: 	#(nil #($1 $2 $3) nil)
		element: 	#($1 $2 $3)
		index: 	3
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(127502592) a PPPossessiveRepeatingParser(8...etc...


PPSequenceParser(PPParser)>>parseWithContext:
	Receiver: a PPSequenceParser(382816000)
	Arguments and temporary variables: 
		context: 	a PPContext: 123.·123
		result: 	nil
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(127502592) a PPPossessiveRepeatingParser(8...etc...


PPSequenceParser(PPParser)>>parse:withContext:
	Receiver: a PPSequenceParser(382816000)
	Arguments and temporary variables: 
		anObject: 	'123.123'
		aPPContext: 	a PPContext: 123.·123
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(127502592) a PPPossessiveRepeatingParser(8...etc...


PPSequenceParser(PPParser)>>parse:
	Receiver: a PPSequenceParser(382816000)
	Arguments and temporary variables: 
		anObject: 	'123.123'
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(127502592) a PPPossessiveRepeatingParser(8...etc...


PPSequenceParser(PPParser)>>matches:
	Receiver: a PPSequenceParser(382816000)
	Arguments and temporary variables: 
		anObject: 	'123.123'
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(127502592) a PPPossessiveRepeatingParser(8...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ number matches: '123.123'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(942950656)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(942950656)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(693405952)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4673576
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	4673577
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4673576
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	4673577
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(953678080) named: Pl...etc...
		lastStepTime: 	4673526
		lastStepMessage: 	nil
		lastCycleTime: 	4673577
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4673526
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		now: 	4673577
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(953678080) named: Pl...etc...
		lastStepTime: 	4673526
		lastStepMessage: 	nil
		lastCycleTime: 	4673577
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4673526
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(953678080) named: Pl...etc...
		lastStepTime: 	4673526
		lastStepMessage: 	nil
		lastCycleTime: 	4673577
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4673526
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(953678080) named: Pl...etc...
		lastStepTime: 	4673526
		lastStepMessage: 	nil
		lastCycleTime: 	4673577
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4673526
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(953678080) named: Pl...etc...
		lastStepTime: 	4673526
		lastStepMessage: 	nil
		lastCycleTime: 	4673577
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4673526
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #parseOn:
PPSequenceParser>>parseOn:
PPOptionalParser>>parseOn:
PPSequenceParser>>parseOn:
PPSequenceParser(PPParser)>>parseWithContext:
PPSequenceParser(PPParser)>>parse:withContext:
PPSequenceParser(PPParser)>>parse:
PPSequenceParser(PPParser)>>matches:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#parseOn: was sent to nil
8 January 2020 2:11:38.138552 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #parseOn:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	parseOn: a PPContext: 123.·123
		exception: 	MessageNotUnderstood: receiver of "parseOn:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

PPSequenceParser>>parseOn:
	Receiver: a PPSequenceParser(552390400)
	Arguments and temporary variables: 
		aPPContext: 	a PPContext: 123.·123
		memento: 	a PPContextMemento
		elements: 	#($. nil nil)
		element: 	$.
		index: 	2
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPLiteralObjectParser(260688128, $.) nil a PPOptionalParser...etc...


PPOptionalParser>>parseOn:
	Receiver: a PPOptionalParser(518725376)
	Arguments and temporary variables: 
		aPPContext: 	a PPContext: 123.·123
		element: 	nil
	Receiver's instance variables: 
		properties: 	nil
		parser: 	a PPSequenceParser(552390400)


PPSequenceParser>>parseOn:
	Receiver: a PPSequenceParser(382816000)
	Arguments and temporary variables: 
		aPPContext: 	a PPContext: 123.·123
		memento: 	a PPContextMemento
		elements: 	#(nil #($1 $2 $3) nil)
		element: 	#($1 $2 $3)
		index: 	3
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(127502592) a PPPossessiveRepeatingParser(8...etc...


PPSequenceParser(PPParser)>>parseWithContext:
	Receiver: a PPSequenceParser(382816000)
	Arguments and temporary variables: 
		context: 	a PPContext: 123.·123
		result: 	nil
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(127502592) a PPPossessiveRepeatingParser(8...etc...


PPSequenceParser(PPParser)>>parse:withContext:
	Receiver: a PPSequenceParser(382816000)
	Arguments and temporary variables: 
		anObject: 	'123.123'
		aPPContext: 	a PPContext: 123.·123
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(127502592) a PPPossessiveRepeatingParser(8...etc...


PPSequenceParser(PPParser)>>parse:
	Receiver: a PPSequenceParser(382816000)
	Arguments and temporary variables: 
		anObject: 	'123.123'
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(127502592) a PPPossessiveRepeatingParser(8...etc...


PPSequenceParser(PPParser)>>matches:
	Receiver: a PPSequenceParser(382816000)
	Arguments and temporary variables: 
		anObject: 	'123.123'
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(127502592) a PPPossessiveRepeatingParser(8...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ number matches: '123.123'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(942950656)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(942950656)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(693405952)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4679006
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	4679008
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4679006
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	4679008
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(953678080) named: Pl...etc...
		lastStepTime: 	4678956
		lastStepMessage: 	nil
		lastCycleTime: 	4679006
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4678956
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		now: 	4679008
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(953678080) named: Pl...etc...
		lastStepTime: 	4678956
		lastStepMessage: 	nil
		lastCycleTime: 	4679006
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4678956
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(953678080) named: Pl...etc...
		lastStepTime: 	4678956
		lastStepMessage: 	nil
		lastCycleTime: 	4679006
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4678956
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(953678080) named: Pl...etc...
		lastStepTime: 	4678956
		lastStepMessage: 	nil
		lastCycleTime: 	4679006
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4678956
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(953678080) named: Pl...etc...
		lastStepTime: 	4678956
		lastStepMessage: 	nil
		lastCycleTime: 	4679006
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4678956
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #parseOn:
PPSequenceParser>>parseOn:
PPOptionalParser>>parseOn:
PPSequenceParser>>parseOn:
PPSequenceParser(PPParser)>>parseWithContext:
PPSequenceParser(PPParser)>>parse:withContext:
PPSequenceParser(PPParser)>>parse:
PPSequenceParser(PPParser)>>matches:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#parseOn: was sent to nil
8 January 2020 2:15:32.863552 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #parseOn:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	parseOn: a PPContext: 123.·1
		exception: 	MessageNotUnderstood: receiver of "parseOn:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

PPSequenceParser>>parseOn:
	Receiver: a PPSequenceParser(552390400)
	Arguments and temporary variables: 
		aPPContext: 	a PPContext: 123.·1
		memento: 	a PPContextMemento
		elements: 	#($. nil nil)
		element: 	$.
		index: 	2
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPLiteralObjectParser(260688128, $.) nil a PPOptionalParser...etc...


PPOptionalParser>>parseOn:
	Receiver: a PPOptionalParser(518725376)
	Arguments and temporary variables: 
		aPPContext: 	a PPContext: 123.·1
		element: 	nil
	Receiver's instance variables: 
		properties: 	nil
		parser: 	a PPSequenceParser(552390400)


PPSequenceParser>>parseOn:
	Receiver: a PPSequenceParser(382816000)
	Arguments and temporary variables: 
		aPPContext: 	a PPContext: 123.·1
		memento: 	a PPContextMemento
		elements: 	#(nil #($1 $2 $3) nil)
		element: 	#($1 $2 $3)
		index: 	3
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(127502592) a PPPossessiveRepeatingParser(8...etc...


PPSequenceParser(PPParser)>>parseWithContext:
	Receiver: a PPSequenceParser(382816000)
	Arguments and temporary variables: 
		context: 	a PPContext: 123.·1
		result: 	nil
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(127502592) a PPPossessiveRepeatingParser(8...etc...


PPSequenceParser(PPParser)>>parse:withContext:
	Receiver: a PPSequenceParser(382816000)
	Arguments and temporary variables: 
		anObject: 	'123.1'
		aPPContext: 	a PPContext: 123.·1
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(127502592) a PPPossessiveRepeatingParser(8...etc...


PPSequenceParser(PPParser)>>parse:
	Receiver: a PPSequenceParser(382816000)
	Arguments and temporary variables: 
		anObject: 	'123.1'
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(127502592) a PPPossessiveRepeatingParser(8...etc...


PPSequenceParser(PPParser)>>matches:
	Receiver: a PPSequenceParser(382816000)
	Arguments and temporary variables: 
		anObject: 	'123.1'
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(127502592) a PPPossessiveRepeatingParser(8...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ number matches: '123.1'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(942950656)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(942950656)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(693405952)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4913698
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	4913732
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4913698
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	4913732
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(463046912))(a Rub...etc...
		lastStepTime: 	4913675
		lastStepMessage: 	nil
		lastCycleTime: 	4913732
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4913675
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		now: 	4913732
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(463046912))(a Rub...etc...
		lastStepTime: 	4913675
		lastStepMessage: 	nil
		lastCycleTime: 	4913732
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4913675
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(463046912))(a Rub...etc...
		lastStepTime: 	4913675
		lastStepMessage: 	nil
		lastCycleTime: 	4913732
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4913675
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(463046912))(a Rub...etc...
		lastStepTime: 	4913675
		lastStepMessage: 	nil
		lastCycleTime: 	4913732
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4913675
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(463046912))(a Rub...etc...
		lastStepTime: 	4913675
		lastStepMessage: 	nil
		lastCycleTime: 	4913732
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4913675
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #parseOn:
PPSequenceParser>>parseOn:
PPOptionalParser>>parseOn:
PPSequenceParser>>parseOn:
PPSequenceParser(PPParser)>>parseWithContext:
PPSequenceParser(PPParser)>>parse:withContext:
PPSequenceParser(PPParser)>>parse:
PPSequenceParser(PPParser)>>matches:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#parseOn: was sent to nil
8 January 2020 2:15:38.625552 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #parseOn:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	parseOn: a PPContext: 123.·1
		exception: 	MessageNotUnderstood: receiver of "parseOn:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

PPSequenceParser>>parseOn:
	Receiver: a PPSequenceParser(567740672)
	Arguments and temporary variables: 
		aPPContext: 	a PPContext: 123.·1
		memento: 	a PPContextMemento
		elements: 	#($. nil)
		element: 	$.
		index: 	2
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPLiteralObjectParser(747626240, $.) nil)


PPOptionalParser>>parseOn:
	Receiver: a PPOptionalParser(427391232)
	Arguments and temporary variables: 
		aPPContext: 	a PPContext: 123.·1
		element: 	nil
	Receiver's instance variables: 
		properties: 	nil
		parser: 	a PPSequenceParser(567740672)


PPSequenceParser>>parseOn:
	Receiver: a PPSequenceParser(905375488)
	Arguments and temporary variables: 
		aPPContext: 	a PPContext: 123.·1
		memento: 	a PPContextMemento
		elements: 	#(nil #($1 $2 $3) nil nil)
		element: 	#($1 $2 $3)
		index: 	3
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(650438912) a PPPossessiveRepeatingParser(8...etc...


PPSequenceParser(PPParser)>>parseWithContext:
	Receiver: a PPSequenceParser(905375488)
	Arguments and temporary variables: 
		context: 	a PPContext: 123.·1
		result: 	nil
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(650438912) a PPPossessiveRepeatingParser(8...etc...


PPSequenceParser(PPParser)>>parse:withContext:
	Receiver: a PPSequenceParser(905375488)
	Arguments and temporary variables: 
		anObject: 	'123.1'
		aPPContext: 	a PPContext: 123.·1
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(650438912) a PPPossessiveRepeatingParser(8...etc...


PPSequenceParser(PPParser)>>parse:
	Receiver: a PPSequenceParser(905375488)
	Arguments and temporary variables: 
		anObject: 	'123.1'
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(650438912) a PPPossessiveRepeatingParser(8...etc...


PPSequenceParser(PPParser)>>matches:
	Receiver: a PPSequenceParser(905375488)
	Arguments and temporary variables: 
		anObject: 	'123.1'
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(650438912) a PPPossessiveRepeatingParser(8...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ number matches: '123.1'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(942950656)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(942950656)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(693405952)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4919494
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	4919495
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4919494
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	4919495
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(463046912))(a Rub...etc...
		lastStepTime: 	4919444
		lastStepMessage: 	nil
		lastCycleTime: 	4919495
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4919444
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		now: 	4919495
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(463046912))(a Rub...etc...
		lastStepTime: 	4919444
		lastStepMessage: 	nil
		lastCycleTime: 	4919495
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4919444
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(463046912))(a Rub...etc...
		lastStepTime: 	4919444
		lastStepMessage: 	nil
		lastCycleTime: 	4919495
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4919444
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(463046912))(a Rub...etc...
		lastStepTime: 	4919444
		lastStepMessage: 	nil
		lastCycleTime: 	4919495
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4919444
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(463046912))(a Rub...etc...
		lastStepTime: 	4919444
		lastStepMessage: 	nil
		lastCycleTime: 	4919495
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4919444
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #parseOn:
PPSequenceParser>>parseOn:
PPOptionalParser>>parseOn:
PPSequenceParser>>parseOn:
PPSequenceParser(PPParser)>>parseWithContext:
PPSequenceParser(PPParser)>>parse:withContext:
PPSequenceParser(PPParser)>>parse:
PPSequenceParser(PPParser)>>matches:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#parseOn: was sent to nil
8 January 2020 2:16:37.276552 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #parseOn:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	parseOn: a PPContext: 123.·1
		exception: 	MessageNotUnderstood: receiver of "parseOn:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

PPSequenceParser>>parseOn:
	Receiver: a PPSequenceParser(763215616)
	Arguments and temporary variables: 
		aPPContext: 	a PPContext: 123.·1
		memento: 	a PPContextMemento
		elements: 	#($. nil)
		element: 	$.
		index: 	2
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPLiteralObjectParser(445028608, $.) nil)


PPOptionalParser>>parseOn:
	Receiver: a PPOptionalParser(984010496)
	Arguments and temporary variables: 
		aPPContext: 	a PPContext: 123.·1
		element: 	nil
	Receiver's instance variables: 
		properties: 	nil
		parser: 	a PPSequenceParser(763215616)


PPSequenceParser>>parseOn:
	Receiver: a PPSequenceParser(492833024)
	Arguments and temporary variables: 
		aPPContext: 	a PPContext: 123.·1
		memento: 	a PPContextMemento
		elements: 	#(nil #($1 $2 $3) nil nil)
		element: 	#($1 $2 $3)
		index: 	3
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(200204032) a PPPossessiveRepeatingParser(7...etc...


PPSequenceParser(PPParser)>>parseWithContext:
	Receiver: a PPSequenceParser(492833024)
	Arguments and temporary variables: 
		context: 	a PPContext: 123.·1
		result: 	nil
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(200204032) a PPPossessiveRepeatingParser(7...etc...


PPSequenceParser(PPParser)>>parse:withContext:
	Receiver: a PPSequenceParser(492833024)
	Arguments and temporary variables: 
		anObject: 	'123.1'
		aPPContext: 	a PPContext: 123.·1
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(200204032) a PPPossessiveRepeatingParser(7...etc...


PPSequenceParser(PPParser)>>parse:
	Receiver: a PPSequenceParser(492833024)
	Arguments and temporary variables: 
		anObject: 	'123.1'
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(200204032) a PPPossessiveRepeatingParser(7...etc...


PPSequenceParser(PPParser)>>matches:
	Receiver: a PPSequenceParser(492833024)
	Arguments and temporary variables: 
		anObject: 	'123.1'
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(200204032) a PPPossessiveRepeatingParser(7...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ number matches: '123.1'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(942950656)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(942950656)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(693405952)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(942950656)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1017@107)
		owner: 	a TransformWithLayoutMorph(816094976)
		submorphs: 	an Array(a RubPrimarySelectionMorph(402807040) a RubCursor(230641408...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (35720960) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(815681280)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(230641408)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(140495104))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(693405952)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(463046912))(a Rub...etc...
		lastStepTime: 	4978119
		lastStepMessage: 	nil
		lastCycleTime: 	4978144
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4978119
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(463046912))(a Rub...etc...
		lastStepTime: 	4978119
		lastStepMessage: 	nil
		lastCycleTime: 	4978144
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4978119
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#autoScroll: -> a RubEditingArea(463046912))(a Rub...etc...
		lastStepTime: 	4978119
		lastStepMessage: 	nil
		lastCycleTime: 	4978144
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4978119
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #parseOn:
PPSequenceParser>>parseOn:
PPOptionalParser>>parseOn:
PPSequenceParser>>parseOn:
PPSequenceParser(PPParser)>>parseWithContext:
PPSequenceParser(PPParser)>>parse:withContext:
PPSequenceParser(PPParser)>>parse:
PPSequenceParser(PPParser)>>matches:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#parseOn: was sent to nil
8 January 2020 2:16:41.545552 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #parseOn:
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	parseOn: a PPContext: 123.·1
		exception: 	MessageNotUnderstood: receiver of "parseOn:" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

PPSequenceParser>>parseOn:
	Receiver: a PPSequenceParser(763215616)
	Arguments and temporary variables: 
		aPPContext: 	a PPContext: 123.·1
		memento: 	a PPContextMemento
		elements: 	#($. nil)
		element: 	$.
		index: 	2
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPLiteralObjectParser(445028608, $.) nil)


PPOptionalParser>>parseOn:
	Receiver: a PPOptionalParser(984010496)
	Arguments and temporary variables: 
		aPPContext: 	a PPContext: 123.·1
		element: 	nil
	Receiver's instance variables: 
		properties: 	nil
		parser: 	a PPSequenceParser(763215616)


PPSequenceParser>>parseOn:
	Receiver: a PPSequenceParser(492833024)
	Arguments and temporary variables: 
		aPPContext: 	a PPContext: 123.·1
		memento: 	a PPContextMemento
		elements: 	#(nil #($1 $2 $3) nil nil)
		element: 	#($1 $2 $3)
		index: 	3
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(200204032) a PPPossessiveRepeatingParser(7...etc...


PPSequenceParser(PPParser)>>parseWithContext:
	Receiver: a PPSequenceParser(492833024)
	Arguments and temporary variables: 
		context: 	a PPContext: 123.·1
		result: 	nil
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(200204032) a PPPossessiveRepeatingParser(7...etc...


PPSequenceParser(PPParser)>>parse:withContext:
	Receiver: a PPSequenceParser(492833024)
	Arguments and temporary variables: 
		anObject: 	'123.1'
		aPPContext: 	a PPContext: 123.·1
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(200204032) a PPPossessiveRepeatingParser(7...etc...


PPSequenceParser(PPParser)>>parse:
	Receiver: a PPSequenceParser(492833024)
	Arguments and temporary variables: 
		anObject: 	'123.1'
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(200204032) a PPPossessiveRepeatingParser(7...etc...


PPSequenceParser(PPParser)>>matches:
	Receiver: a PPSequenceParser(492833024)
	Arguments and temporary variables: 
		anObject: 	'123.1'
	Receiver's instance variables: 
		properties: 	nil
		parsers: 	an Array(a PPOptionalParser(200204032) a PPPossessiveRepeatingParser(7...etc...


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ number matches: '123.1'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(942950656)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
textMorph shoutStyler style: textMorph text.
GLMPrintPoppe...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(942950656)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(693405952)
		textModel: 	a GLMRubricSmalltalkTextModel


MorphicAlarm(MessageSend)>>value
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4982413
		numArgs: 	0


MorphicAlarm>>value:
	Receiver: MorphicAlarm(#popupPrint -> a GLMMorphicPharoScriptRenderer)
	Arguments and temporary variables: 
		anArgument: 	4982414
		nArgs: 	0
	Receiver's instance variables: 
		receiver: 	a GLMMorphicPharoScriptRenderer
		selector: 	#popupPrint
		arguments: 	#()
		scheduledTime: 	4982413
		numArgs: 	0


WorldState>>triggerAlarmsBefore:
	Receiver: a WorldState
	Arguments and temporary variables: 
		nowTime: 	4982414
		pending: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(768012032) named: Pl...etc...
		lastStepTime: 	4982363
		lastStepMessage: 	nil
		lastCycleTime: 	4982412
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4982363
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runLocalStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		now: 	4982414
		morphToStep: 	nil
		stepTime: 	nil
		priorWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(768012032) named: Pl...etc...
		lastStepTime: 	4982363
		lastStepMessage: 	nil
		lastCycleTime: 	4982412
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4982363
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	nil
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(768012032) named: Pl...etc...
		lastStepTime: 	4982363
		lastStepMessage: 	nil
		lastCycleTime: 	4982412
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4982363
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(768012032) named: Pl...etc...
		lastStepTime: 	4982363
		lastStepMessage: 	nil
		lastCycleTime: 	4982412
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4982363
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(768012032) named: Pl...etc...
		lastStepTime: 	4982363
		lastStepMessage: 	nil
		lastCycleTime: 	4982412
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(230641408)))
		lastAlarmTime: 	4982363
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #parseOn:
PPSequenceParser>>parseOn:
PPOptionalParser>>parseOn:
PPSequenceParser>>parseOn:
PPSequenceParser(PPParser)>>parseWithContext:
PPSequenceParser(PPParser)>>parse:withContext:
PPSequenceParser(PPParser)>>parse:
PPSequenceParser(PPParser)>>matches:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>popupPrint
MorphicAlarm(MessageSend)>>value
MorphicAlarm>>value:
WorldState>>triggerAlarmsBefore:
WorldState>>runLocalStepMethodsIn:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of ByteSymbol did not understand #asParse
8 January 2020 2:27:10.086552 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

ByteSymbol(Object)>>doesNotUnderstand: #asParse
	Receiver: #digit
	Arguments and temporary variables: 
		aMessage: 	asParse
		exception: 	MessageNotUnderstood: ByteSymbol>>asParse
		resumeValue: 	nil
	Receiver's instance variables: 
#digit

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ naturalNumber := #digit asParse plus
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(243325184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(243325184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(657324288)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(243325184)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1026@88)
		owner: 	a TransformWithLayoutMorph(757501696)
		submorphs: 	an Array(a RubPrimarySelectionMorph(578408192) a RubCursor(712605440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (224688384) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(180838144)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(712605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(721750272))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(657324288)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(768012032) named: Pl...etc...
		lastStepTime: 	5610907
		lastStepMessage: 	nil
		lastCycleTime: 	5610952
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(712605440)))
		lastAlarmTime: 	5610907
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(768012032) named: Pl...etc...
		lastStepTime: 	5610907
		lastStepMessage: 	nil
		lastCycleTime: 	5610952
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(712605440)))
		lastAlarmTime: 	5610907
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(768012032) named: Pl...etc...
		lastStepTime: 	5610907
		lastStepMessage: 	nil
		lastCycleTime: 	5610952
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(712605440)))
		lastAlarmTime: 	5610907
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
ByteSymbol(Object)>>doesNotUnderstand: #asParse
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of False did not understand #,
8 January 2020 2:28:56.778552 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

False(Object)>>doesNotUnderstand: #,
	Receiver: false
	Arguments and temporary variables: 
		aMessage: 	, a PPPossessiveRepeatingParser(946343680) [1, *]
		exception: 	MessageNotUnderstood: False>>,
		resumeValue: 	nil
	Receiver's instance variables: 
false

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ number = negative optional , naturalNumber , decimal optional
		, ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(243325184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(243325184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(657324288)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(243325184)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1026@145)
		owner: 	a TransformWithLayoutMorph(757501696)
		submorphs: 	an Array(a RubPrimarySelectionMorph(248975104) a RubCursor(712605440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (224688384) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(180838144)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(712605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(650063616))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(657324288)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(768012032) named: Pl...etc...
		lastStepTime: 	5717606
		lastStepMessage: 	nil
		lastCycleTime: 	5717646
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(712605440)))
		lastAlarmTime: 	5717606
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(768012032) named: Pl...etc...
		lastStepTime: 	5717606
		lastStepMessage: 	nil
		lastCycleTime: 	5717646
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(712605440)))
		lastAlarmTime: 	5717606
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(768012032) named: Pl...etc...
		lastStepTime: 	5717606
		lastStepMessage: 	nil
		lastCycleTime: 	5717646
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(712605440)))
		lastAlarmTime: 	5717606
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
False(Object)>>doesNotUnderstand: #,
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of False did not understand #,
8 January 2020 2:29:18.094552 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

False(Object)>>doesNotUnderstand: #,
	Receiver: false
	Arguments and temporary variables: 
		aMessage: 	, a PPPossessiveRepeatingParser(946343680) [1, *]
		exception: 	MessageNotUnderstood: False>>,
		resumeValue: 	nil
	Receiver's instance variables: 
false

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ number = negative optional , naturalNumber , decimal optional
		, ...etc...
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(243325184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(243325184)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(657324288)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(243325184)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1026@145)
		owner: 	a TransformWithLayoutMorph(757501696)
		submorphs: 	an Array(a RubPrimarySelectionMorph(248975104) a RubCursor(712605440...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (224688384) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(180838144)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(712605440)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(791559936))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(657324288)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(768012032) named: Pl...etc...
		lastStepTime: 	5738896
		lastStepMessage: 	nil
		lastCycleTime: 	5738960
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(712605440)))
		lastAlarmTime: 	5738896
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(768012032) named: Pl...etc...
		lastStepTime: 	5738896
		lastStepMessage: 	nil
		lastCycleTime: 	5738960
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(712605440)))
		lastAlarmTime: 	5738896
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(934686464))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(768012032) named: Pl...etc...
		lastStepTime: 	5738896
		lastStepMessage: 	nil
		lastCycleTime: 	5738960
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(712605440)))
		lastAlarmTime: 	5738896
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(934686464)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(217526016) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (121641216) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
False(Object)>>doesNotUnderstand: #,
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of PPPredicateObjectParser class did not understand #digits
8 January 2020 4:05:17.409163 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

PPPredicateObjectParser class(Object)>>doesNotUnderstand: #digits
	Receiver: PPPredicateObjectParser
	Arguments and temporary variables: 
		aMessage: 	digits
		exception: 	MessageNotUnderstood: PPPredicateObjectParser class>>digits
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	PPPredicateParser
		methodDict: 	a MethodDictionary(#initializeOn:message:negated:message:->PPPredic...etc...
		format: 	65541
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PPPredicateObjectParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitParser-Parsers'
		cache: 	a Dictionary(#space->a PPPredicateObjectParser(669953792, 'separator exp...etc...


ByteSymbol(Symbol)>>asParser
	Receiver: #digits
	Arguments and temporary variables: 

	Receiver's instance variables: 
#digits

CoPGrammer>>num
	Receiver: a CoPGrammer(358848768)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		properties: 	nil
		parser: 	a PPEndOfInputParser(490143488)
		dependencies: 	an IdentityDictionary()
		subt: 	a PPDelegateParser(subt)
		term: 	a PPDelegateParser(term)
		mul: 	a PPDelegateParser(mul)
		var: 	a PPDelegateParser(var)
		brackets: 	a PPDelegateParser(brackets)
		num: 	a PPDelegateParser(num)
		pro: 	a PPDelegateParser(pro)


[ :key :value | (parser instVarAt: key) setParser: (parser perform: value) ] in [ :class :parser | 
parser setParser: (parser perform: parser children first name).
parser productionNames
	keysAndValuesDo:
		[ :key :value | (parser instVarAt: key) setParser: (parser perform: value) ] ] in CoPGrammer class(PPCompositeParser class)>>newStartingAt:
	Receiver: CoPGrammer
	Arguments and temporary variables: 
		aSymbol: 	#start
		parsers: 	an IdentityDictionary(CoPGrammer->a CoPGrammer(358848768) )
		remaining: 	an OrderedCollection()
		class: 	CoPGrammer
		parser: 	a CoPGrammer(358848768)
		key: 	9
		value: 	#num
	Receiver's instance variables: 
		superclass: 	PPCompositeParser
		methodDict: 	a MethodDictionary(#brackets->CoPGrammer>>#brackets #mul->CoPGramme...etc...
		format: 	65546
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CoPGrammer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitParser-Tools'


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(4->#subt 5->#term 6->#mul 7->#var 8->#brackets 9->#num 10->#pro )
	Arguments and temporary variables: 
		aBlock: 	[ :key :value | (parser instVarAt: key) setParser: (parser perform: val...etc...
		assoc: 	9->#num
	Receiver's instance variables: 
		tally: 	7
		array: 	{nil. nil. nil. nil. 4->#subt. 5->#term. 6->#mul. 7->#var. 8->#brackets....etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(4->#subt 5->#term 6->#mul 7->#var 8->#brackets 9->#num 10->#pro )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	9->#num
	Receiver's instance variables: 
		tally: 	7
		array: 	{nil. nil. nil. nil. 4->#subt. 5->#term. 6->#mul. 7->#var. 8->#brackets....etc...


Array(SequenceableCollection)>>do:
	Receiver: {nil. nil. nil. nil. 4->#subt. 5->#term. 6->#mul. 7->#var. 8->#brackets. 9->#num. 10->#pro...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	10
	Receiver's instance variables: 
{nil. nil. nil. nil. 4->#subt. 5->#term. 6->#mul. 7->#var. 8->#brackets. 9->#num. 10->#pro...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(4->#subt 5->#term 6->#mul 7->#var 8->#brackets 9->#num 10->#pro )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	7
		array: 	{nil. nil. nil. nil. 4->#subt. 5->#term. 6->#mul. 7->#var. 8->#brackets....etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(4->#subt 5->#term 6->#mul 7->#var 8->#brackets 9->#num 10->#pro )
	Arguments and temporary variables: 
		aBlock: 	[ :key :value | (parser instVarAt: key) setParser: (parser perform: val...etc...
	Receiver's instance variables: 
		tally: 	7
		array: 	{nil. nil. nil. nil. 4->#subt. 5->#term. 6->#mul. 7->#var. 8->#brackets....etc...


[ :class :parser | 
parser setParser: (parser perform: parser children first name).
parser productionNames
	keysAndValuesDo:
		[ :key :value | (parser instVarAt: key) setParser: (parser perform: value) ] ] in CoPGrammer class(PPCompositeParser class)>>newStartingAt:
	Receiver: CoPGrammer
	Arguments and temporary variables: 
		aSymbol: 	#start
		parsers: 	an IdentityDictionary(CoPGrammer->a CoPGrammer(358848768) )
		remaining: 	an OrderedCollection()
		class: 	CoPGrammer
		parser: 	a CoPGrammer(358848768)
	Receiver's instance variables: 
		superclass: 	PPCompositeParser
		methodDict: 	a MethodDictionary(#brackets->CoPGrammer>>#brackets #mul->CoPGramme...etc...
		format: 	65546
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CoPGrammer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitParser-Tools'


[ :assoc | aBlock value: assoc key value: assoc value ] in IdentityDictionary(Dictionary)>>keysAndValuesDo:
	Receiver: an IdentityDictionary(CoPGrammer->a CoPGrammer(358848768) )
	Arguments and temporary variables: 
		aBlock: 	[ :class :parser | 
parser setParser: (parser perform: parser children ...etc...
		assoc: 	CoPGrammer->a CoPGrammer(358848768)
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil CoPGrammer->a CoPGrammer(358848768) nil nil)


[ :each | each ifNotNil: [ aBlock value: each ] ] in IdentityDictionary(Dictionary)>>associationsDo:
	Receiver: an IdentityDictionary(CoPGrammer->a CoPGrammer(358848768) )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	CoPGrammer->a CoPGrammer(358848768)
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil CoPGrammer->a CoPGrammer(358848768) nil nil)


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil nil CoPGrammer->a CoPGrammer(358848768) nil nil)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	3
	Receiver's instance variables: 
an Array(nil nil CoPGrammer->a CoPGrammer(358848768) nil nil)

IdentityDictionary(Dictionary)>>associationsDo:
	Receiver: an IdentityDictionary(CoPGrammer->a CoPGrammer(358848768) )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil CoPGrammer->a CoPGrammer(358848768) nil nil)


IdentityDictionary(Dictionary)>>keysAndValuesDo:
	Receiver: an IdentityDictionary(CoPGrammer->a CoPGrammer(358848768) )
	Arguments and temporary variables: 
		aBlock: 	[ :class :parser | 
parser setParser: (parser perform: parser children ...etc...
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil CoPGrammer->a CoPGrammer(358848768) nil nil)


CoPGrammer class(PPCompositeParser class)>>newStartingAt:
	Receiver: CoPGrammer
	Arguments and temporary variables: 
		aSymbol: 	#start
		parsers: 	an IdentityDictionary(CoPGrammer->a CoPGrammer(358848768) )
		remaining: 	an OrderedCollection()
	Receiver's instance variables: 
		superclass: 	PPCompositeParser
		methodDict: 	a MethodDictionary(#brackets->CoPGrammer>>#brackets #mul->CoPGramme...etc...
		format: 	65546
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CoPGrammer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitParser-Tools'


CoPGrammer class(PPCompositeParser class)>>new
	Receiver: CoPGrammer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PPCompositeParser
		methodDict: 	a MethodDictionary(#brackets->CoPGrammer>>#brackets #mul->CoPGramme...etc...
		format: 	65546
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CoPGrammer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitParser-Tools'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ parser := CoPGrammer new
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(564771072)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(564771072)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(839364352)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(564771072)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(229682944)
		submorphs: 	an Array(a RubCursor(1016744192) a RubPrimarySelectionMorph(50734259...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (892247808) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(528136448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1016744192)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(130595072))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(839364352)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(117209344))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(137832704) named: Pl...etc...
		lastStepTime: 	409941
		lastStepMessage: 	nil
		lastCycleTime: 	410005
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1016744192)))
		lastAlarmTime: 	409941
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(117209344)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(1019346688) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (608983296) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(117209344))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(137832704) named: Pl...etc...
		lastStepTime: 	409941
		lastStepMessage: 	nil
		lastCycleTime: 	410005
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1016744192)))
		lastAlarmTime: 	409941
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(117209344)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(117209344))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(137832704) named: Pl...etc...
		lastStepTime: 	409941
		lastStepMessage: 	nil
		lastCycleTime: 	410005
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1016744192)))
		lastAlarmTime: 	409941
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(117209344)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: THERE_BE_DRAGONS_HERE
Instance of PPPredicateObjectParser class did not understand #digits
8 January 2020 4:05:21.152163 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

PPPredicateObjectParser class(Object)>>doesNotUnderstand: #digits
	Receiver: PPPredicateObjectParser
	Arguments and temporary variables: 
		aMessage: 	digits
		exception: 	MessageNotUnderstood: PPPredicateObjectParser class>>digits
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	PPPredicateParser
		methodDict: 	a MethodDictionary(#initializeOn:message:negated:message:->PPPredic...etc...
		format: 	65541
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PPPredicateObjectParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitParser-Parsers'
		cache: 	a Dictionary(#space->a PPPredicateObjectParser(669953792, 'separator exp...etc...


ByteSymbol(Symbol)>>asParser
	Receiver: #digits
	Arguments and temporary variables: 

	Receiver's instance variables: 
#digits

CoPGrammer>>num
	Receiver: a CoPGrammer(813891328)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		properties: 	nil
		parser: 	a PPEndOfInputParser(674453760)
		dependencies: 	an IdentityDictionary()
		subt: 	a PPDelegateParser(subt)
		term: 	a PPDelegateParser(term)
		mul: 	a PPDelegateParser(mul)
		var: 	a PPDelegateParser(var)
		brackets: 	a PPDelegateParser(brackets)
		num: 	a PPDelegateParser(num)
		pro: 	a PPDelegateParser(pro)


[ :key :value | (parser instVarAt: key) setParser: (parser perform: value) ] in [ :class :parser | 
parser setParser: (parser perform: parser children first name).
parser productionNames
	keysAndValuesDo:
		[ :key :value | (parser instVarAt: key) setParser: (parser perform: value) ] ] in CoPGrammer class(PPCompositeParser class)>>newStartingAt:
	Receiver: CoPGrammer
	Arguments and temporary variables: 
		aSymbol: 	#start
		parsers: 	an IdentityDictionary(CoPGrammer->a CoPGrammer(813891328) )
		remaining: 	an OrderedCollection()
		class: 	CoPGrammer
		parser: 	a CoPGrammer(813891328)
		key: 	9
		value: 	#num
	Receiver's instance variables: 
		superclass: 	PPCompositeParser
		methodDict: 	a MethodDictionary(#brackets->CoPGrammer>>#brackets #mul->CoPGramme...etc...
		format: 	65546
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CoPGrammer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitParser-Tools'


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(4->#subt 5->#term 6->#mul 7->#var 8->#brackets 9->#num 10->#pro )
	Arguments and temporary variables: 
		aBlock: 	[ :key :value | (parser instVarAt: key) setParser: (parser perform: val...etc...
		assoc: 	9->#num
	Receiver's instance variables: 
		tally: 	7
		array: 	{nil. nil. nil. nil. 4->#subt. 5->#term. 6->#mul. 7->#var. 8->#brackets....etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(4->#subt 5->#term 6->#mul 7->#var 8->#brackets 9->#num 10->#pro )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	9->#num
	Receiver's instance variables: 
		tally: 	7
		array: 	{nil. nil. nil. nil. 4->#subt. 5->#term. 6->#mul. 7->#var. 8->#brackets....etc...


Array(SequenceableCollection)>>do:
	Receiver: {nil. nil. nil. nil. 4->#subt. 5->#term. 6->#mul. 7->#var. 8->#brackets. 9->#num. 10->#pro...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	10
	Receiver's instance variables: 
{nil. nil. nil. nil. 4->#subt. 5->#term. 6->#mul. 7->#var. 8->#brackets. 9->#num. 10->#pro...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(4->#subt 5->#term 6->#mul 7->#var 8->#brackets 9->#num 10->#pro )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	7
		array: 	{nil. nil. nil. nil. 4->#subt. 5->#term. 6->#mul. 7->#var. 8->#brackets....etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(4->#subt 5->#term 6->#mul 7->#var 8->#brackets 9->#num 10->#pro )
	Arguments and temporary variables: 
		aBlock: 	[ :key :value | (parser instVarAt: key) setParser: (parser perform: val...etc...
	Receiver's instance variables: 
		tally: 	7
		array: 	{nil. nil. nil. nil. 4->#subt. 5->#term. 6->#mul. 7->#var. 8->#brackets....etc...


[ :class :parser | 
parser setParser: (parser perform: parser children first name).
parser productionNames
	keysAndValuesDo:
		[ :key :value | (parser instVarAt: key) setParser: (parser perform: value) ] ] in CoPGrammer class(PPCompositeParser class)>>newStartingAt:
	Receiver: CoPGrammer
	Arguments and temporary variables: 
		aSymbol: 	#start
		parsers: 	an IdentityDictionary(CoPGrammer->a CoPGrammer(813891328) )
		remaining: 	an OrderedCollection()
		class: 	CoPGrammer
		parser: 	a CoPGrammer(813891328)
	Receiver's instance variables: 
		superclass: 	PPCompositeParser
		methodDict: 	a MethodDictionary(#brackets->CoPGrammer>>#brackets #mul->CoPGramme...etc...
		format: 	65546
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CoPGrammer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitParser-Tools'


[ :assoc | aBlock value: assoc key value: assoc value ] in IdentityDictionary(Dictionary)>>keysAndValuesDo:
	Receiver: an IdentityDictionary(CoPGrammer->a CoPGrammer(813891328) )
	Arguments and temporary variables: 
		aBlock: 	[ :class :parser | 
parser setParser: (parser perform: parser children ...etc...
		assoc: 	CoPGrammer->a CoPGrammer(813891328)
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil CoPGrammer->a CoPGrammer(813891328) nil nil)


[ :each | each ifNotNil: [ aBlock value: each ] ] in IdentityDictionary(Dictionary)>>associationsDo:
	Receiver: an IdentityDictionary(CoPGrammer->a CoPGrammer(813891328) )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	CoPGrammer->a CoPGrammer(813891328)
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil CoPGrammer->a CoPGrammer(813891328) nil nil)


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil nil CoPGrammer->a CoPGrammer(813891328) nil nil)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	3
	Receiver's instance variables: 
an Array(nil nil CoPGrammer->a CoPGrammer(813891328) nil nil)

IdentityDictionary(Dictionary)>>associationsDo:
	Receiver: an IdentityDictionary(CoPGrammer->a CoPGrammer(813891328) )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil CoPGrammer->a CoPGrammer(813891328) nil nil)


IdentityDictionary(Dictionary)>>keysAndValuesDo:
	Receiver: an IdentityDictionary(CoPGrammer->a CoPGrammer(813891328) )
	Arguments and temporary variables: 
		aBlock: 	[ :class :parser | 
parser setParser: (parser perform: parser children ...etc...
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil CoPGrammer->a CoPGrammer(813891328) nil nil)


CoPGrammer class(PPCompositeParser class)>>newStartingAt:
	Receiver: CoPGrammer
	Arguments and temporary variables: 
		aSymbol: 	#start
		parsers: 	an IdentityDictionary(CoPGrammer->a CoPGrammer(813891328) )
		remaining: 	an OrderedCollection()
	Receiver's instance variables: 
		superclass: 	PPCompositeParser
		methodDict: 	a MethodDictionary(#brackets->CoPGrammer>>#brackets #mul->CoPGramme...etc...
		format: 	65546
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CoPGrammer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitParser-Tools'


CoPGrammer class(PPCompositeParser class)>>new
	Receiver: CoPGrammer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PPCompositeParser
		methodDict: 	a MethodDictionary(#brackets->CoPGrammer>>#brackets #mul->CoPGramme...etc...
		format: 	65546
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CoPGrammer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitParser-Tools'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ parser := CoPGrammer new
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(564771072)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(564771072)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(839364352)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(564771072)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(229682944)
		submorphs: 	an Array(a RubCursor(1016744192) a RubPrimarySelectionMorph(50734259...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (892247808) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(528136448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1016744192)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(214382848))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(839364352)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(117209344))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(137832704) named: Pl...etc...
		lastStepTime: 	413711
		lastStepMessage: 	nil
		lastCycleTime: 	413755
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1016744192)))
		lastAlarmTime: 	413711
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(117209344)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(1019346688) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (608983296) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(117209344))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(137832704) named: Pl...etc...
		lastStepTime: 	413711
		lastStepMessage: 	nil
		lastCycleTime: 	413755
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1016744192)))
		lastAlarmTime: 	413711
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(117209344)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(117209344))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(137832704) named: Pl...etc...
		lastStepTime: 	413711
		lastStepMessage: 	nil
		lastCycleTime: 	413755
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1016744192)))
		lastAlarmTime: 	413711
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(117209344)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(1019346688) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (608983296) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
PPPredicateObjectParser class(Object)>>doesNotUnderstand: #digits
ByteSymbol(Symbol)>>asParser
CoPGrammer>>num
[ :keTHERE_BE_DRAGONS_HERE
Instance of PPPredicateObjectParser class did not understand #digits
8 January 2020 4:05:44.072163 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

PPPredicateObjectParser class(Object)>>doesNotUnderstand: #digits
	Receiver: PPPredicateObjectParser
	Arguments and temporary variables: 
		aMessage: 	digits
		exception: 	MessageNotUnderstood: PPPredicateObjectParser class>>digits
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	PPPredicateParser
		methodDict: 	a MethodDictionary(#initializeOn:message:negated:message:->PPPredic...etc...
		format: 	65541
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PPPredicateObjectParser
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitParser-Parsers'
		cache: 	a Dictionary(#space->a PPPredicateObjectParser(669953792, 'separator exp...etc...


ByteSymbol(Symbol)>>asParser
	Receiver: #digits
	Arguments and temporary variables: 

	Receiver's instance variables: 
#digits

CoPGrammer>>num
	Receiver: a CoPGrammer(716910336)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		properties: 	nil
		parser: 	a PPEndOfInputParser(204404992)
		dependencies: 	an IdentityDictionary()
		subt: 	a PPDelegateParser(subt)
		term: 	a PPDelegateParser(term)
		mul: 	a PPDelegateParser(mul)
		var: 	a PPDelegateParser(var)
		brackets: 	a PPDelegateParser(brackets)
		num: 	a PPDelegateParser(num)
		pro: 	a PPDelegateParser(pro)


[ :key :value | (parser instVarAt: key) setParser: (parser perform: value) ] in [ :class :parser | 
parser setParser: (parser perform: parser children first name).
parser productionNames
	keysAndValuesDo:
		[ :key :value | (parser instVarAt: key) setParser: (parser perform: value) ] ] in CoPGrammer class(PPCompositeParser class)>>newStartingAt:
	Receiver: CoPGrammer
	Arguments and temporary variables: 
		aSymbol: 	#start
		parsers: 	an IdentityDictionary(CoPGrammer->a CoPGrammer(716910336) )
		remaining: 	an OrderedCollection()
		class: 	CoPGrammer
		parser: 	a CoPGrammer(716910336)
		key: 	9
		value: 	#num
	Receiver's instance variables: 
		superclass: 	PPCompositeParser
		methodDict: 	a MethodDictionary(#brackets->CoPGrammer>>#brackets #mul->CoPGramme...etc...
		format: 	65546
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CoPGrammer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitParser-Tools'


[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(4->#subt 5->#term 6->#mul 7->#var 8->#brackets 9->#num 10->#pro )
	Arguments and temporary variables: 
		aBlock: 	[ :key :value | (parser instVarAt: key) setParser: (parser perform: val...etc...
		assoc: 	9->#num
	Receiver's instance variables: 
		tally: 	7
		array: 	{nil. nil. nil. nil. 4->#subt. 5->#term. 6->#mul. 7->#var. 8->#brackets....etc...


[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
	Receiver: a Dictionary(4->#subt 5->#term 6->#mul 7->#var 8->#brackets 9->#num 10->#pro )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	9->#num
	Receiver's instance variables: 
		tally: 	7
		array: 	{nil. nil. nil. nil. 4->#subt. 5->#term. 6->#mul. 7->#var. 8->#brackets....etc...


Array(SequenceableCollection)>>do:
	Receiver: {nil. nil. nil. nil. 4->#subt. 5->#term. 6->#mul. 7->#var. 8->#brackets. 9->#num. 10->#pro...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	10
	Receiver's instance variables: 
{nil. nil. nil. nil. 4->#subt. 5->#term. 6->#mul. 7->#var. 8->#brackets. 9->#num. 10->#pro...etc...

Dictionary>>associationsDo:
	Receiver: a Dictionary(4->#subt 5->#term 6->#mul 7->#var 8->#brackets 9->#num 10->#pro )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	7
		array: 	{nil. nil. nil. nil. 4->#subt. 5->#term. 6->#mul. 7->#var. 8->#brackets....etc...


Dictionary>>keysAndValuesDo:
	Receiver: a Dictionary(4->#subt 5->#term 6->#mul 7->#var 8->#brackets 9->#num 10->#pro )
	Arguments and temporary variables: 
		aBlock: 	[ :key :value | (parser instVarAt: key) setParser: (parser perform: val...etc...
	Receiver's instance variables: 
		tally: 	7
		array: 	{nil. nil. nil. nil. 4->#subt. 5->#term. 6->#mul. 7->#var. 8->#brackets....etc...


[ :class :parser | 
parser setParser: (parser perform: parser children first name).
parser productionNames
	keysAndValuesDo:
		[ :key :value | (parser instVarAt: key) setParser: (parser perform: value) ] ] in CoPGrammer class(PPCompositeParser class)>>newStartingAt:
	Receiver: CoPGrammer
	Arguments and temporary variables: 
		aSymbol: 	#start
		parsers: 	an IdentityDictionary(CoPGrammer->a CoPGrammer(716910336) )
		remaining: 	an OrderedCollection()
		class: 	CoPGrammer
		parser: 	a CoPGrammer(716910336)
	Receiver's instance variables: 
		superclass: 	PPCompositeParser
		methodDict: 	a MethodDictionary(#brackets->CoPGrammer>>#brackets #mul->CoPGramme...etc...
		format: 	65546
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CoPGrammer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitParser-Tools'


[ :assoc | aBlock value: assoc key value: assoc value ] in IdentityDictionary(Dictionary)>>keysAndValuesDo:
	Receiver: an IdentityDictionary(CoPGrammer->a CoPGrammer(716910336) )
	Arguments and temporary variables: 
		aBlock: 	[ :class :parser | 
parser setParser: (parser perform: parser children ...etc...
		assoc: 	CoPGrammer->a CoPGrammer(716910336)
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil CoPGrammer->a CoPGrammer(716910336) nil nil)


[ :each | each ifNotNil: [ aBlock value: each ] ] in IdentityDictionary(Dictionary)>>associationsDo:
	Receiver: an IdentityDictionary(CoPGrammer->a CoPGrammer(716910336) )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
		each: 	CoPGrammer->a CoPGrammer(716910336)
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil CoPGrammer->a CoPGrammer(716910336) nil nil)


Array(SequenceableCollection)>>do:
	Receiver: an Array(nil nil CoPGrammer->a CoPGrammer(716910336) nil nil)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each ifNotNil: [ aBlock value: each ] ]
		index: 	3
	Receiver's instance variables: 
an Array(nil nil CoPGrammer->a CoPGrammer(716910336) nil nil)

IdentityDictionary(Dictionary)>>associationsDo:
	Receiver: an IdentityDictionary(CoPGrammer->a CoPGrammer(716910336) )
	Arguments and temporary variables: 
		aBlock: 	[ :assoc | aBlock value: assoc key value: assoc value ]
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil CoPGrammer->a CoPGrammer(716910336) nil nil)


IdentityDictionary(Dictionary)>>keysAndValuesDo:
	Receiver: an IdentityDictionary(CoPGrammer->a CoPGrammer(716910336) )
	Arguments and temporary variables: 
		aBlock: 	[ :class :parser | 
parser setParser: (parser perform: parser children ...etc...
	Receiver's instance variables: 
		tally: 	1
		array: 	an Array(nil nil CoPGrammer->a CoPGrammer(716910336) nil nil)


CoPGrammer class(PPCompositeParser class)>>newStartingAt:
	Receiver: CoPGrammer
	Arguments and temporary variables: 
		aSymbol: 	#start
		parsers: 	an IdentityDictionary(CoPGrammer->a CoPGrammer(716910336) )
		remaining: 	an OrderedCollection()
	Receiver's instance variables: 
		superclass: 	PPCompositeParser
		methodDict: 	a MethodDictionary(#brackets->CoPGrammer>>#brackets #mul->CoPGramme...etc...
		format: 	65546
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CoPGrammer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitParser-Tools'


CoPGrammer class(PPCompositeParser class)>>new
	Receiver: CoPGrammer
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PPCompositeParser
		methodDict: 	a MethodDictionary(#brackets->CoPGrammer>>#brackets #mul->CoPGramme...etc...
		format: 	65546
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CoPGrammer
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitParser-Tools'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ parser := CoPGrammer new
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(564771072)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result |  ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(564771072)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(839364352)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(564771072)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(229682944)
		submorphs: 	an Array(a RubCursor(1016744192) a RubPrimarySelectionMorph(50734259...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (892247808) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(528136448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1016744192)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(212785408))
		getMenuPolicy: 	nil
		mouseDownPoint: 	(248.0@41.0)
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(839364352)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(117209344))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(137832704) named: Pl...etc...
		lastStepTime: 	436625
		lastStepMessage: 	nil
		lastCycleTime: 	436675
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1016744192)))
		lastAlarmTime: 	436625
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(117209344)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(1019346688) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (608983296) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(117209344))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(137832704) named: Pl...etc...
		lastStepTime: 	436625
		lastStepMessage: 	nil
		lastCycleTime: 	436675
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1016744192)))
		lastAlarmTime: 	436625
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(117209344)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(117209344))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	a FormCanvas on: DisplayScreen(1080x1857x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(137832704) named: Pl...etc...
		lastStepTime: 	436625
		lastStepMessage: 	nil
		lastCycleTime: 	436675
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1016744192)))
		lastAlarmTime: 	436625
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(117209344)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(1019346688) a GLMS...etc...
		fullBounds: 	(0@0) corner: (1080@1857)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (608983296) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	nil


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
PPPredicateObjectParser class(Object)>>doesNotUnderstand: #digits
ByteSymbol(Symbol)>>asParser
CoPGrammer>>num
[ :key :value | (parser instVarAt: key) setParser: (parser perform: value) ] in [ :class :parser | 
parser setParser: (parser perform: parser children first name).
parser productionNames
	keysAndValuesDo:
		[ :key :value | (parser instVarAt: key) setParser: (parser perform: value) ] ] in CoPGrammer class(PPCompositeParser class)>>newStartingAt:
[ :assoc | aBlock value: assoc key value: assoc value ] in Dictionary>>keysAndValuesDo:
[ :each | each ifNotNil: [ aBlock value: each ] ] in Dictionary>>associationsDo:
Array(SequenceableCollection)>>do:
Dictionary>>associationsDo:
Dictionary>>keysAndValuesDo:
[ :class :parser | 
parser setParser: (parser perform: parser children first name).
parser productionNames
	keysAndValuesDo:
		[ :key :value | (parser instVarAt: key) setParser: (parser perform: value) ] ] in CoPGrammer class(PPCompositeParser class)>>newStartiTHERE_BE_DRAGONS_HERE
SubclassResponsibility: CoPGrammerTest had the subclass responsibility to implement #parserClass
8 January 2020 4:12:38.309163 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

CoPGrammerTest(Object)>>subclassResponsibility
	Receiver: CoPGrammerTest>>#testNumber
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNumber
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>parserClass
	Receiver: CoPGrammerTest>>#testNumber
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNumber
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>parserInstance
	Receiver: CoPGrammerTest>>#testNumber
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNumber
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>setUp
	Receiver: CoPGrammerTest>>#testNumber
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNumber
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ self setUp.
self performTest ] in CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testNumber
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNumber
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testNumber
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNumber
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNumber
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testNumber
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNumber
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testNumber
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNumber
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testNumber
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNumber
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testNumber
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNumber
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testNumber
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNumber
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testNumber
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNumber
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	nil
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	nil
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testNumber
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNumber
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNumber
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


CoPGrammerTest(TestCase)>>runCaseManaged
	Receiver: CoPGrammerTest>>#testNumber
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNumber
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNumber
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T04:12:38.281163+01:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CoPGrammerTest>>#testNumber)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variabTHERE_BE_DRAGONS_HERE
SubclassResponsibility: CoPGrammerTest had the subclass responsibility to implement #parserClass
8 January 2020 4:12:47.446163 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

CoPGrammerTest(Object)>>subclassResponsibility
	Receiver: CoPGrammerTest>>#testNumber
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNumber
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>parserClass
	Receiver: CoPGrammerTest>>#testNumber
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNumber
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>parserInstance
	Receiver: CoPGrammerTest>>#testNumber
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNumber
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>setUp
	Receiver: CoPGrammerTest>>#testNumber
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNumber
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ self setUp.
self performTest ] in CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testNumber
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNumber
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testNumber
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNumber
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNumber
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testNumber
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNumber
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testNumber
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNumber
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testNumber
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNumber
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testNumber
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNumber
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testNumber
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNumber
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testNumber
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNumber
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testNumber
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNumber
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNumber
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


CoPGrammerTest(TestCase)>>runCaseManaged
	Receiver: CoPGrammerTest>>#testNumber
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNumber
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNumber
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T04:12:47.428163+01:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CoPGrammerTest>>#testNumber)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNumber
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T04:12:47.428163+01:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CoPGrammerTest>>#testNumber)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testNumber
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testNumber
		expectedFails: 	#()
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testNumber
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testNumber
		expectedFails: 	#()
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest class(TestCase class)>>debug:
	Receiver: CoPGrammerTest
	Arguments and temporary variables: 
		aSymbol: 	#testNumber
	Receiver's instance variables: 
		superclass: 	PPCompositeParserTest
		methodDict: 	a MethodDictionary(#testNumber->CoPGrammerTest>>#testNumber )
		format: 	65548
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CoPGrammerTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitTests-Core'
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


ClyRunTestsFromMethodsCommand>>runTest:of:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		testSelector: 	#testNumber
		testClass: 	CoPGrammerTest
		testResult: 	nil
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testNumber))
		runTestCases: 	{CoPGrammerTest}


THERE_BE_DRAGONS_HERE
SubclassResponsibility: CoPGrammerTest had the subclass responsibility to implement #parserClass
8 January 2020 4:13:00.094163 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

CoPGrammerTest(Object)>>subclassResponsibility
	Receiver: CoPGrammerTest>>#testNuum
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNuum
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>parserClass
	Receiver: CoPGrammerTest>>#testNuum
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNuum
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>parserInstance
	Receiver: CoPGrammerTest>>#testNuum
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNuum
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>setUp
	Receiver: CoPGrammerTest>>#testNuum
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNuum
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ self setUp.
self performTest ] in CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testNuum
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNuum
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testNuum
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNuum
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNuum
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testNuum
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNuum
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testNuum
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNuum
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testNuum
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNuum
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testNuum
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNuum
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testNuum
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNuum
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testNuum
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNuum
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testNuum
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNuum
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNuum
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


CoPGrammerTest(TestCase)>>runCaseManaged
	Receiver: CoPGrammerTest>>#testNuum
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testNuum
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNuum
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T04:13:00.075163+01:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CoPGrammerTest>>#testNuum)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testNuum
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T04:13:00.075163+01:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CoPGrammerTest>>#testNuum)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testNuum
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testNuum
		expectedFails: 	#()
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testNuum
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testNuum
		expectedFails: 	#()
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest class(TestCase class)>>debug:
	Receiver: CoPGrammerTest
	Arguments and temporary variables: 
		aSymbol: 	#testNuum
	Receiver's instance variables: 
		superclass: 	PPCompositeParserTest
		methodDict: 	a MethodDictionary(#testNumber->CoPGrammerTest>>#testNumber #testNu...etc...
		format: 	65548
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CoPGrammerTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitTests-Core'
		history: 	a Dictionary(#errors->a Set(#testNumber) #failures->a Set() #passed->a...etc...


ClyRunTestsFromMethodsCommand>>runTest:of:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		testSelector: 	#testNuum
		testClass: 	CoPGrammerTest
		testResult: 	nil
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testNuum))
		runTestCases: 	{CoPGrammerTest}


THERE_BE_DRAGONS_HERE
SubclassResponsibility: CoPGrammerTest had the subclass responsibility to implement #parserClass
8 January 2020 4:13:58.342163 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

CoPGrammerTest(Object)>>subclassResponsibility
	Receiver: CoPGrammerTest>>#testSubt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testSubt
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>parserClass
	Receiver: CoPGrammerTest>>#testSubt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testSubt
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>parserInstance
	Receiver: CoPGrammerTest>>#testSubt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testSubt
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>setUp
	Receiver: CoPGrammerTest>>#testSubt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testSubt
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ self setUp.
self performTest ] in CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testSubt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testSubt
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testSubt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testSubt
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testSubt
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testSubt
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testSubt
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testSubt
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testSubt
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testSubt
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testSubt
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testSubt
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testSubt
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testSubt
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testSubt
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testSubt
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testSubt
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testSubt
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testSubt
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testSubt
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


CoPGrammerTest(TestCase)>>runCaseManaged
	Receiver: CoPGrammerTest>>#testSubt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testSubt
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testSubt
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T04:13:58.324163+01:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CoPGrammerTest>>#testSubt)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testSubt
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T04:13:58.324163+01:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CoPGrammerTest>>#testSubt)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testSubt
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testSubt
		expectedFails: 	#()
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testSubt
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testSubt
		expectedFails: 	#()
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest class(TestCase class)>>debug:
	Receiver: CoPGrammerTest
	Arguments and temporary variables: 
		aSymbol: 	#testSubt
	Receiver's instance variables: 
		superclass: 	PPCompositeParserTest
		methodDict: 	a MethodDictionary(#testSubt->CoPGrammerTest>>#testSubt )
		format: 	65548
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CoPGrammerTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitTests-Core'
		history: 	a Dictionary(#errors->a Set() #failures->a Set() #passed->a Set() #tim...etc...


ClyRunTestsFromMethodsCommand>>runTest:of:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		testSelector: 	#testSubt
		testClass: 	CoPGrammerTest
		testResult: 	nil
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testSubt))
		runTestCases: 	{CoPGrammerTest}


THERE_BE_DRAGONS_HERE
SubclassResponsibility: CoPGrammerTest had the subclass responsibility to implement #parserClass
8 January 2020 4:14:15.999163 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

CoPGrammerTest(Object)>>subclassResponsibility
	Receiver: CoPGrammerTest>>#testSubt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testSubt
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>parserClass
	Receiver: CoPGrammerTest>>#testSubt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testSubt
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>parserInstance
	Receiver: CoPGrammerTest>>#testSubt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testSubt
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>setUp
	Receiver: CoPGrammerTest>>#testSubt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testSubt
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ self setUp.
self performTest ] in CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testSubt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testSubt
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testSubt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testSubt
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testSubt
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testSubt
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testSubt
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testSubt
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testSubt
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testSubt
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testSubt
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testSubt
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testSubt
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testSubt
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testSubt
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testSubt
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testSubt
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testSubt
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testSubt
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testSubt
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


CoPGrammerTest(TestCase)>>runCaseManaged
	Receiver: CoPGrammerTest>>#testSubt
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testSubt
		expectedFails: 	nil
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testSubt
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T04:14:15.981163+01:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CoPGrammerTest>>#testSubt)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testSubt
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T04:14:15.981163+01:00
		failures: 	a Set()
		errors: 	an OrderedCollection(CoPGrammerTest>>#testSubt)
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testSubt
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testSubt
		expectedFails: 	#()
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testSubt
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 0 failures, 1 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testSubt
		expectedFails: 	#()
		parser: 	nil
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest class(TestCase class)>>debug:
	Receiver: CoPGrammerTest
	Arguments and temporary variables: 
		aSymbol: 	#testSubt
	Receiver's instance variables: 
		superclass: 	PPCompositeParserTest
		methodDict: 	a MethodDictionary(#testSubt->CoPGrammerTest>>#testSubt )
		format: 	65548
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CoPGrammerTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitTests-Core'
		history: 	a Dictionary(#errors->a Set(#testSubt) #failures->a Set() #passed->a S...etc...


ClyRunTestsFromMethodsCommand>>runTest:of:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
		testSelector: 	#testSubt
		testClass: 	CoPGrammerTest
		testResult: 	nil
	Receiver's instance variables: 
		testItems: 	an Array(a ClyDataSourceItem(testSubt))
		runTestCases: 	{CoPGrammerTest}


[ :each | self runTest: testSelector of: each ] in ClyRunTestsFromMethodsCommand>>runTestItem:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
TestFailure: Unable to parse 'subt / pro'
8 January 2020 4:25:35.168163 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

CoPGrammerTest(TestAsserter)>>assert:description:
	Receiver: CoPGrammerTest>>#testTerm
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aStringOrBlock: 	'Unable to parse ''subt / pro'''
		aString: 	'Unable to parse ''subt / pro'''
	Receiver's instance variables: 
		testSelector: 	#testTerm
		expectedFails: 	nil
		parser: 	a CoPGrammer(872892672)
		result: 	digit expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(TestAsserter)>>deny:description:
	Receiver: CoPGrammerTest>>#testTerm
	Arguments and temporary variables: 
		aBooleanOrBlock: 	true
		aString: 	'Unable to parse ''subt / pro'''
	Receiver's instance variables: 
		testSelector: 	#testTerm
		expectedFails: 	nil
		parser: 	a CoPGrammer(872892672)
		result: 	digit expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>parse:rule:
	Receiver: CoPGrammerTest>>#testTerm
	Arguments and temporary variables: 
		aString: 	'subt / pro'
		aSymbol: 	#term
		production: 	a PPDelegateParser(term)
		context: 	a PPContext: ·subt / pro
	Receiver's instance variables: 
		testSelector: 	#testTerm
		expectedFails: 	nil
		parser: 	a CoPGrammer(872892672)
		result: 	digit expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest>>testTerm
	Receiver: CoPGrammerTest>>#testTerm
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTerm
		expectedFails: 	nil
		parser: 	a CoPGrammer(872892672)
		result: 	digit expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(TestCase)>>performTest
	Receiver: CoPGrammerTest>>#testTerm
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTerm
		expectedFails: 	nil
		parser: 	a CoPGrammer(872892672)
		result: 	digit expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ self setUp.
self performTest ] in CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testTerm
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTerm
		expectedFails: 	nil
		parser: 	a CoPGrammer(872892672)
		result: 	digit expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testTerm
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTerm
		expectedFails: 	nil
		parser: 	a CoPGrammer(872892672)
		result: 	digit expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testTerm
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testTerm
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testTerm
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testTerm
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testTerm
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testTerm
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testTerm
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testTerm
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testTerm
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testTerm
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testTerm
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testTerm
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testTerm
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testTerm
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testTerm
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testTerm
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


CoPGrammerTest(TestCase)>>runCaseManaged
	Receiver: CoPGrammerTest>>#testTerm
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTerm
		expectedFails: 	nil
		parser: 	a CoPGrammer(872892672)
		result: 	digit expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testTerm
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T04:25:35.152163+01:00
		failures: 	a Set(CoPGrammerTest>>#testTerm)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testTerm
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T04:25:35.152163+01:00
		failures: 	a Set(CoPGrammerTest>>#testTerm)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testTerm
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testTerm
		expectedFails: 	#()
		parser: 	a CoPGrammer(872892672)
		result: 	digit expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testTerm
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
THERE_BE_DRAGONS_HERE

8 January 2020 4:30:28.334163 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	a WeakArray(a DefaultExecutionEnvironment nil nil nil nil nil nil nil nil ...etc...
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a GLMRubricSmalltalkTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a GLMRubricSmalltalkTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(564771072)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@107)
		owner: 	a TransformWithLayoutMorph(229682944)
		submorphs: 	an Array(a RubCursor(1016744192) a RubPrimarySelectionMorph(50734259...etc...
		fullBounds: 	(0@0) corner: (580@107)
		color: 	Color transparent
		extension: 	a MorphExtension (892247808) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(528136448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1016744192)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(564771072)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@107)
		owner: 	a TransformWithLayoutMorph(229682944)
		submorphs: 	an Array(a RubCursor(1016744192) a RubPrimarySelectionMorph(50734259...etc...
		fullBounds: 	(0@0) corner: (580@107)
		color: 	Color transparent
		extension: 	a MorphExtension (892247808) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(528136448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1016744192)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(564771072)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@107)
		owner: 	a TransformWithLayoutMorph(229682944)
		submorphs: 	an Array(a RubCursor(1016744192) a RubPrimarySelectionMorph(50734259...etc...
		fullBounds: 	(0@0) corner: (580@107)
		color: 	Color transparent
		extension: 	a MorphExtension (892247808) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(528136448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1016744192)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(564771072)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@107)
		owner: 	a TransformWithLayoutMorph(229682944)
		submorphs: 	an Array(a RubCursor(1016744192) a RubPrimarySelectionMorph(50734259...etc...
		fullBounds: 	(0@0) corner: (580@107)
		color: 	Color transparent
		extension: 	a MorphExtension (892247808) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(528136448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1016744192)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(117209344)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(564771072)
	Receiver's instance variables: 
		bounds: 	(346@1073) corner: (362@1089)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (454138112)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(346@1073) mouseOver 39156291 nil]
		targetOffset: 	(264.0@90.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 39156291 351 1071 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(117209344)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(346@1073) corner: (362@1089)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (454138112)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(346@1073) mouseOver 39156291 nil]
		targetOffset: 	(264.0@90.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 39156291 351 1071 0 0 1 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1080@1857)
		hand: 	a HandMorph(117209344)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(1019346688) a GLMS...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (608983296) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(117209344))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(117209344))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(117209344))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(410700032))(a Spec...etc...
		lastStepTime: 	1920276
		lastStepMessage: 	nil
		lastCycleTime: 	1920346
		alarms: 	a Heap()
		lastAlarmTime: 	1920276
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(117209344)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1080@1857)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(1019346688) a GLMS...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (608983296) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(1019346688) a GLMS...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (608983296) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2020-01-08T03:58:27.471163+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2020-01-08T03:58:27.471163+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2020-01-08T03:58:27.471163+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2020-01-08T03:58:27.471163+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2020-01-08T03:58:27.471163+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2020-01-08T03:58:27.471163+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Production CoPGrammer>>#braces not found.
8 January 2020 11:58:45.306163 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

CoPGrammerTest(Object)>>error:
	Receiver: CoPGrammerTest>>#testOpenBraces
	Arguments and temporary variables: 
		aString: 	'Production CoPGrammer>>#braces not found.'
	Receiver's instance variables: 
		testSelector: 	#testOpenBraces
		expectedFails: 	nil
		parser: 	a CoPGrammer(751732992)
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ self
	error:
		'Production ' , self parserClass name , '>>' , aSymbol printString
			, ' not found.' ] in CoPGrammerTest(PPCompositeParserTest)>>parserInstanceFor:
	Receiver: CoPGrammerTest>>#testOpenBraces
	Arguments and temporary variables: 
		aSymbol: 	#braces
	Receiver's instance variables: 
		testSelector: 	#testOpenBraces
		expectedFails: 	nil
		parser: 	a CoPGrammer(751732992)
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ ^ aBlock value ] in CoPGrammer(PPCompositeParser)>>productionAt:ifAbsent:
	Receiver: a CoPGrammer(751732992)
	Arguments and temporary variables: 
		aSymbol: 	#braces
		aBlock: 	[ self
	error:
		'Production ' , self parserClass name , '>>' , aSymbol...etc...
	Receiver's instance variables: 
		properties: 	nil
		parser: 	a PPEndOfInputParser(730095360)
		dependencies: 	an IdentityDictionary()
		subt: 	a PPDelegateParser(subt)
		term: 	a PPDelegateParser(term)
		mul: 	a PPDelegateParser(mul)
		var: 	a PPDelegateParser(var)
		brackets: 	a PPDelegateParser(brackets)
		num: 	a PPDelegateParser(num)
		pro: 	a PPDelegateParser(pro)


Array(SequenceableCollection)>>indexOf:startingAt:ifAbsent:
	Receiver: #(#properties #parser #dependencies #subt #term #mul #var #brackets #num #pro)
	Arguments and temporary variables: 
		anElement: 	'braces'
		start: 	1
		exceptionBlock: 	[ ^ aBlock value ]
	Receiver's instance variables: 
#(#properties #parser #dependencies #subt #term #mul #var #brackets #num #pro)

Array(SequenceableCollection)>>indexOf:ifAbsent:
	Receiver: #(#properties #parser #dependencies #subt #term #mul #var #brackets #num #pro)
	Arguments and temporary variables: 
		anElement: 	'braces'
		exceptionBlock: 	[ ^ aBlock value ]
	Receiver's instance variables: 
#(#properties #parser #dependencies #subt #term #mul #var #brackets #num #pro)

CoPGrammer(PPCompositeParser)>>productionAt:ifAbsent:
	Receiver: a CoPGrammer(751732992)
	Arguments and temporary variables: 
		aSymbol: 	#braces
		aBlock: 	[ self
	error:
		'Production ' , self parserClass name , '>>' , aSymbol...etc...
	Receiver's instance variables: 
		properties: 	nil
		parser: 	a PPEndOfInputParser(730095360)
		dependencies: 	an IdentityDictionary()
		subt: 	a PPDelegateParser(subt)
		term: 	a PPDelegateParser(term)
		mul: 	a PPDelegateParser(mul)
		var: 	a PPDelegateParser(var)
		brackets: 	a PPDelegateParser(brackets)
		num: 	a PPDelegateParser(num)
		pro: 	a PPDelegateParser(pro)


CoPGrammerTest(PPCompositeParserTest)>>parserInstanceFor:
	Receiver: CoPGrammerTest>>#testOpenBraces
	Arguments and temporary variables: 
		aSymbol: 	#braces
	Receiver's instance variables: 
		testSelector: 	#testOpenBraces
		expectedFails: 	nil
		parser: 	a CoPGrammer(751732992)
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>parse:rule:
	Receiver: CoPGrammerTest>>#testOpenBraces
	Arguments and temporary variables: 
		aString: 	'4(4'
		aSymbol: 	#braces
		production: 	nil
		context: 	nil
	Receiver's instance variables: 
		testSelector: 	#testOpenBraces
		expectedFails: 	nil
		parser: 	a CoPGrammer(751732992)
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest>>testOpenBraces
	Receiver: CoPGrammerTest>>#testOpenBraces
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBraces
		expectedFails: 	nil
		parser: 	a CoPGrammer(751732992)
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(TestCase)>>performTest
	Receiver: CoPGrammerTest>>#testOpenBraces
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBraces
		expectedFails: 	nil
		parser: 	a CoPGrammer(751732992)
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ self setUp.
self performTest ] in CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testOpenBraces
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBraces
		expectedFails: 	nil
		parser: 	a CoPGrammer(751732992)
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testOpenBraces
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBraces
		expectedFails: 	nil
		parser: 	a CoPGrammer(751732992)
		result: 	nil
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBraces
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBraces
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBraces
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBraces
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBraces
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBraces
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBraces
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBraces
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBraces
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBraces
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBraces
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBraces
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBraces
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>actiTHERE_BE_DRAGONS_HERE
TestFailure: Unable to parse '4(4'
8 January 2020 11:59:32.447163 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

CoPGrammerTest(TestAsserter)>>assert:description:
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aStringOrBlock: 	'Unable to parse ''4(4'''
		aString: 	'Unable to parse ''4(4'''
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(45000960)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(TestAsserter)>>deny:description:
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		aBooleanOrBlock: 	true
		aString: 	'Unable to parse ''4(4'''
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(45000960)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>parse:rule:
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		aString: 	'4(4'
		aSymbol: 	#brackets
		production: 	a PPDelegateParser(brackets)
		context: 	a PPContext: ·4(4
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(45000960)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest>>testOpenBrackets
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(45000960)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(TestCase)>>performTest
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(45000960)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ self setUp.
self performTest ] in CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(45000960)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(45000960)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


CoPGrammerTest(TestCase)>>runCaseManaged
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(45000960)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T11:59:32.425163+01:00
		failures: 	a Set(CoPGrammerTest>>#testOpenBrackets)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T11:59:32.425163+01:00
		failures: 	a Set(CoPGrammerTest>>#testOpenBrackets)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	#()
		parser: 	a CoPGrammer(45000960)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CoPGrammerTest(TestCase)>>debug
	ReceiTHERE_BE_DRAGONS_HERE
Instance of CoPGrammerTest class did not understand #parse:rule:
8 January 2020 11:59:47.450163 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

CoPGrammerTest class(Object)>>doesNotUnderstand: #parse:rule:
	Receiver: CoPGrammerTest
	Arguments and temporary variables: 
		aMessage: 	parse: '4*(4' rule: #brackets
		exception: 	MessageNotUnderstood: CoPGrammerTest class>>parse:rule:
		resumeValue: 	nil
	Receiver's instance variables: 
		superclass: 	PPCompositeParserTest
		methodDict: 	a MethodDictionary(#parserClass->CoPGrammerTest>>#parserClass #test...etc...
		format: 	65548
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CoPGrammerTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitTests-Core'
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#testTerm #testOpenBrac...etc...


CoPGrammerTest class>>DoIt
	Receiver: CoPGrammerTest
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PPCompositeParserTest
		methodDict: 	a MethodDictionary(#parserClass->CoPGrammerTest>>#parserClass #test...etc...
		format: 	65548
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CoPGrammerTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitTests-Core'
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#testTerm #testOpenBrac...etc...


OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ self parse: '4*(4' rule: #brackets
		source: 	a ReadStream
		context: 	nil
		receiver: 	CoPGrammerTest
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


ClyTextEditor(RubSmalltalkEditor)>>evaluate:andDo:
	Receiver: a ClyTextEditor
	Arguments and temporary variables: 
		aStream: 	a ReadWriteStream
		aBlock: 	[ :result | 
printString := [ result asScriptResultStringInCalypso ]
	o...etc...
		result: 	nil
		rcvr: 	CoPGrammerTest
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(572477184)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


ClyTextEditor(RubSmalltalkEditor)>>evaluateSelectionAndDo:
	Receiver: a ClyTextEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | 
printString := [ result asScriptResultStringInCalypso ]
	o...etc...
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(572477184)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


ClyTextEditor>>printIt
	Receiver: a ClyTextEditor
	Arguments and temporary variables: 
		printString: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(572477184)
		selectorChooser: 	nil
		notificationStrategy: 	a RubTextInsertionStrategy


[ :target | target editor printIt ] in RubSmalltalkEditor class>>buildShortcutsOn:
	Receiver: RubSmalltalkEditor
	Arguments and temporary variables: 
		aBuilder: 	a PragmaMenuAndShortcutRegistration
		target: 	a RubEditingArea(572477184)
	Receiver's instance variables: 
		superclass: 	RubTextEditor
		methodDict: 	a MethodDictionary(#atCompletionPosition->RubSmalltalkEditor>>#atCo...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{ClyTextEditor}
		name: 	#RubSmalltalkEditor
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Rubric-Editing-Code'


BlockClosure>>cull:
	Receiver: [ :target | target editor printIt ]
	Arguments and temporary variables: 
		anArg: 	a RubEditingArea(572477184)
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	665
		numArgs: 	1


BlockClosure>>cull:cull:
	Receiver: [ :target | target editor printIt ]
	Arguments and temporary variables: 
		firstArg: 	a RubEditingArea(572477184)
		secondArg: 	a RubEditingArea(572477184)
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	665
		numArgs: 	1


BlockClosure>>cull:cull:cull:
	Receiver: [ :target | target editor printIt ]
	Arguments and temporary variables: 
		firstArg: 	a RubEditingArea(572477184)
		secondArg: 	a RubEditingArea(572477184)
		thirdArg: 	[keystroke '<Ctrl-p>']
	Receiver's instance variables: 
		outerContext: 	RubSmalltalkEditor class>>buildShortcutsOn:
		startpc: 	665
		numArgs: 	1


KMCategoryBinding>>completeMatch:buffer:
	Receiver: aKMCategoryTarget(#RubSmalltalkEditor)
	Arguments and temporary variables: 
		aKeymap: 	#printIt on Meta + p do [ :target | target editor printIt ]

		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
	Receiver's instance variables: 
		target: 	a RubEditingArea(572477184)
		category: 	a KMCategory
		morph: 	a RubEditingArea(572477184)


[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Meta + p do [ :target | target editor printIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a CmdKMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		listeners: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a CmdKMDispatcher)
		l: 	aKMCategoryTarget(#RubSmalltalkEditor)
	Receiver's instance variables: 
		action: 	[ :target | target editor printIt ]
		name: 	#printIt
		shortcut: 	Meta + p
		defaultShortcut: 	Meta + p
		description: 	'Print it'


Array(SequenceableCollection)>>do:
	Receiver: an Array(aKMCategoryTarget(#RubSmalltalkEditor) a CmdKMDispatcher)
	Arguments and temporary variables: 
		aBlock: 	[ :l | l completeMatch: self buffer: aBuffer ]
		index: 	1
	Receiver's instance variables: 
an Array(aKMCategoryTarget(#RubSmalltalkEditor) a CmdKMDispatcher)

KMKeymap>>notifyCompleteMatchTo:buffer:
	Receiver: #printIt on Meta + p do [ :target | target editor printIt ]

	Arguments and temporary variables: 
		aListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a CmdKMDispatcher)
		aBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		listeners: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a CmdKMDispatcher)
	Receiver's instance variables: 
		action: 	[ :target | target editor printIt ]
		name: 	#printIt
		shortcut: 	Meta + p
		defaultShortcut: 	Meta + p
		description: 	'Print it'


KMKeymap>>onMatchWith:notify:andDo:
	Receiver: #printIt on Meta + p do [ :target | target editor printIt ]

	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a CmdKMDispatch...etc...
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		action: 	[ :target | target editor printIt ]
		name: 	#printIt
		shortcut: 	Meta + p
		defaultShortcut: 	Meta + p
		description: 	'Print it'


[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a CmdKMDispatch...etc...
		aBlock: 	[ ^ self ]
		entry: 	#printIt on Meta + p do [ :target | target editor printIt ]

	Receiver's instance variables: 
		name: 	#RubSmalltalkEditor
		platforms: 	a Dictionary(#Windows->a KMStorage #all->a KMStorage )


Set>>do:
	Receiver: a Set(#doItPatchForWindows on Ctrl + End do [ :target | target editor doIt: nil ]
 #sender...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andD...etc...
		index: 	16
		each: 	#printIt on Meta + p do [ :target | target editor printIt ]

	Receiver's instance variables: 
		tally: 	17
		array: 	an Array(#doItPatchForWindows on Ctrl + End do [ :target | target editor...etc...


KMCategory>>onMatchWith:notify:andDo:
	Receiver: a KMCategory
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		aMatchListener: 	an Array(aKMCategoryTarget(#RubSmalltalkEditor) a CmdKMDispatch...etc...
		aBlock: 	[ ^ self ]
	Receiver's instance variables: 
		name: 	#RubSmalltalkEditor
		platforms: 	a Dictionary(#Windows->a KMStorage #all->a KMStorage )


KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
	Receiver: aKMCategoryTarget(#RubSmalltalkEditor)
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		aListener: 	a CmdKMDispatcher
		anAction: 	[ ^ self ]
	Receiver's instance variables: 
		target: 	a RubEditingArea(572477184)
		category: 	a KMCategory
		morph: 	a RubEditingArea(572477184)


[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in CmdKMDispatcher(KMDispatcher)>>dispatch:
	Receiver: a CmdKMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		aTarget: 	aKMCategoryTarget(#RubSmalltalkEditor)
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a RubEditingArea(572477184)
		directKeymaps: 	a KMCategory
		commandProvider: 	a ClyMethodCodeEditorToolMorph(352743168)


OrderedCollection>>do:
	Receiver: an OrderedCollection(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigation) a...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verify...etc...
		index: 	4
	Receiver's instance variables: 
		array: 	an Array(aKMCategoryTarget(nil) aKMCategoryTarget(#MorphFocusCtrlNavigat...etc...
		firstIndex: 	1
		lastIndex: 	4


CmdKMDispatcher(KMDispatcher)>>dispatch:
	Receiver: a CmdKMDispatcher
	Arguments and temporary variables: 
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a RubEditingArea(572477184)
		directKeymaps: 	a KMCategory
		commandProvider: 	a ClyMethodCodeEditorToolMorph(352743168)


CmdKMDispatcher>>dispatch:
	Receiver: a CmdKMDispatcher
	Arguments and temporary variables: 
		executed: 	false
		anEventBuffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
		context: 	a ClySourceCodeContext
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a RubEditingArea(572477184)
		directKeymaps: 	a KMCategory
		commandProvider: 	a ClyMethodCodeEditorToolMorph(352743168)


KMTarget>>dispatch:
	Receiver: a KMTarget
	Arguments and temporary variables: 
		buffer: 	an OrderedCollection([keystroke '<Ctrl-p>'])
	Receiver's instance variables: 
		realTarget: 	nil
		morph: 	a RubEditingArea(572477184)
		targetSelector: 	#yourself
		directKeymaps: 	nil
		perInstanceCategories: 	nil


[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Ctrl-p>']
		targetToDispatch: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a CmdKMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>do:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aBlock: 	[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstan...etc...
		currentTarget: 	a KMTarget
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a CmdKMDispatcher
		initialTarget: 	a KmGlobalDispatcher


KMDispatchChain>>dispatch:
	Receiver: a KMDispatchChain
	Arguments and temporary variables: 
		aKeyboardEvent: 	[keystroke '<Ctrl-p>']
	Receiver's instance variables: 
		target: 	a KMTarget
		dispatcher: 	a CmdKMDispatcher
		initialTarget: 	a KmGlobalDispatcher


CmdKMDispatcher(KMDispatcher)>>dispatchKeystroke:
	Receiver: a CmdKMDispatcher
	Arguments and temporary variables: 
		aKeyEvent: 	[keystroke '<Ctrl-p>']
		chain: 	a KMDispatchChain
	Receiver's instance variables: 
		target: 	a KMTarget
		currentEvent: 	nil
		targets: 	a Set(aKMCategoryTarget(#MorphFocusCtrlNavigation) aKMCategoryTarget(#...etc...
		morph: 	a RubEditingArea(572477184)
		directKeymaps: 	a KMCategory
		commandProvider: 	a ClyMethodCodeEditorToolMorph(352743168)


RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
	Receiver: a RubEditingArea(572477184)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Ctrl-p>']
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (828@50)
		owner: 	a TransformWithLayoutMorph(897288448)
		submorphs: 	an Array(a RubCursor(696523008) a RubPrimarySelectionMorph(269164288...etc...
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (169883904) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(293710080)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle SouTHERE_BE_DRAGONS_HERE
TestFailure: Unable to parse '4*(4'
8 January 2020 11:59:51.637163 am

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

CoPGrammerTest(TestAsserter)>>assert:description:
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aStringOrBlock: 	'Unable to parse ''4*(4'''
		aString: 	'Unable to parse ''4*(4'''
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(939620608)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(TestAsserter)>>deny:description:
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		aBooleanOrBlock: 	true
		aString: 	'Unable to parse ''4*(4'''
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(939620608)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>parse:rule:
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		aString: 	'4*(4'
		aSymbol: 	#brackets
		production: 	a PPDelegateParser(brackets)
		context: 	a PPContext: ·4*(4
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(939620608)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest>>testOpenBrackets
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(939620608)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(TestCase)>>performTest
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(939620608)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ self setUp.
self performTest ] in CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(939620608)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(939620608)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


CoPGrammerTest(TestCase)>>runCaseManaged
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(939620608)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T11:59:51.619163+01:00
		failures: 	a Set(CoPGrammerTest>>#testOpenBrackets)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T11:59:51.619163+01:00
		failures: 	a Set(CoPGrammerTest>>#testOpenBrackets)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	#()
		parser: 	a CoPGrammer(939620608)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	#()
		parser: 	a CoPGrammer(939620608)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest class(TestCase class)>>debug:
	Receiver: CoPGrammerTest
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
TestFailure: Unable to parse '4*(4'
8 January 2020 12:00:45.558163 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

CoPGrammerTest(TestAsserter)>>assert:description:
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aStringOrBlock: 	'Unable to parse ''4*(4'''
		aString: 	'Unable to parse ''4*(4'''
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(715774208)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(TestAsserter)>>deny:description:
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		aBooleanOrBlock: 	true
		aString: 	'Unable to parse ''4*(4'''
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(715774208)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>parse:rule:
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		aString: 	'4*(4'
		aSymbol: 	#brackets
		production: 	a PPDelegateParser(brackets)
		context: 	a PPContext: ·4*(4
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(715774208)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest>>testOpenBrackets
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(715774208)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(TestCase)>>performTest
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(715774208)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ self setUp.
self performTest ] in CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(715774208)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(715774208)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


CoPGrammerTest(TestCase)>>runCaseManaged
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(715774208)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T12:00:45.539163+01:00
		failures: 	a Set(CoPGrammerTest>>#testOpenBrackets)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T12:00:45.539163+01:00
		failures: 	a Set(CoPGrammerTest>>#testOpenBrackets)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	#()
		parser: 	a CoPGrammer(715774208)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	#()
		parser: 	a CoPGrammer(715774208)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest class(TestCase class)>>debug:
	Receiver: CoPGrammerTest
	Arguments and temporary variables: 
		aSymbol: 	#testOpenBrackets
	Receiver's instance variables: 
		superclass: 	PPCompositeParserTest
		methodDict: 	a MethodDictionary(#parserClass->CoPGrammerTest>>#parserClass #test...etc...
		format: 	65548
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CoPGrammerTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitTests-Core'
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#testTerm #testOpenBrac...etc...


ClyRunTestsFromMethodsCommand>>runTest:of:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
TestFailure: Unable to parse '4*(4'
8 January 2020 12:01:08.590163 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

CoPGrammerTest(TestAsserter)>>assert:description:
	Receiver: CoPGrammerTest>>#testBrackets
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aStringOrBlock: 	'Unable to parse ''4*(4'''
		aString: 	'Unable to parse ''4*(4'''
	Receiver's instance variables: 
		testSelector: 	#testBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(151283968)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(TestAsserter)>>deny:description:
	Receiver: CoPGrammerTest>>#testBrackets
	Arguments and temporary variables: 
		aBooleanOrBlock: 	true
		aString: 	'Unable to parse ''4*(4'''
	Receiver's instance variables: 
		testSelector: 	#testBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(151283968)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>parse:rule:
	Receiver: CoPGrammerTest>>#testBrackets
	Arguments and temporary variables: 
		aString: 	'4*(4'
		aSymbol: 	#brackets
		production: 	a PPDelegateParser(brackets)
		context: 	a PPContext: ·4*(4
	Receiver's instance variables: 
		testSelector: 	#testBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(151283968)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest>>testBrackets
	Receiver: CoPGrammerTest>>#testBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(151283968)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(TestCase)>>performTest
	Receiver: CoPGrammerTest>>#testBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(151283968)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ self setUp.
self performTest ] in CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(151283968)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(151283968)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testBrackets
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testBrackets
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testBrackets
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


CoPGrammerTest(TestCase)>>runCaseManaged
	Receiver: CoPGrammerTest>>#testBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(151283968)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testBrackets
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T12:01:08.571163+01:00
		failures: 	a Set(CoPGrammerTest>>#testBrackets)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testBrackets
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T12:01:08.571163+01:00
		failures: 	a Set(CoPGrammerTest>>#testBrackets)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testBrackets
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testBrackets
		expectedFails: 	#()
		parser: 	a CoPGrammer(151283968)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testBrackets
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testBrackets
		expectedFails: 	#()
		parser: 	a CoPGrammer(151283968)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest class(TestCase class)>>debug:
	Receiver: CoPGrammerTest
	Arguments and temporary variables: 
		aSymbol: 	#testBrackets
	Receiver's instance variables: 
		superclass: 	PPCompositeParserTest
		methodDict: 	a MethodDictionary(#parserClass->CoPGrammerTest>>#parserClass #test...etc...
		format: 	65548
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CoPGrammerTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitTests-Core'
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#testTerm #testOpenBrac...etc...


ClyRunTestsFromMethodsCommand>>runTest:of:
	Receiver: a ClyRunTestsFromMethodsCommTHERE_BE_DRAGONS_HERE
TestFailure: Unable to parse '4*(4'
8 January 2020 12:01:16.730163 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

CoPGrammerTest(TestAsserter)>>assert:description:
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aStringOrBlock: 	'Unable to parse ''4*(4'''
		aString: 	'Unable to parse ''4*(4'''
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(634920704)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(TestAsserter)>>deny:description:
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		aBooleanOrBlock: 	true
		aString: 	'Unable to parse ''4*(4'''
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(634920704)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>parse:rule:
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		aString: 	'4*(4'
		aSymbol: 	#brackets
		production: 	a PPDelegateParser(brackets)
		context: 	a PPContext: ·4*(4
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(634920704)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest>>testOpenBrackets
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(634920704)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(TestCase)>>performTest
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(634920704)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ self setUp.
self performTest ] in CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(634920704)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(634920704)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


CoPGrammerTest(TestCase)>>runCaseManaged
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(634920704)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T12:01:16.710163+01:00
		failures: 	a Set(CoPGrammerTest>>#testOpenBrackets)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T12:01:16.710163+01:00
		failures: 	a Set(CoPGrammerTest>>#testOpenBrackets)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	#()
		parser: 	a CoPGrammer(634920704)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	#()
		parser: 	a CoPGrammer(634920704)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest class(TestCase class)>>debug:
	Receiver: CoPGrammerTest
	Arguments and temporary variables: 
		aSymbol: 	#testOpenBrackets
	Receiver's instance variables: 
		superclass: 	PPCompositeParserTest
		methodDict: 	a MethodDictionary(#parserClass->CoPGrammerTest>>#parserClass #test...etc...
		format: 	65548
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	#()
		name: 	#CoPGrammerTest
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'PetitTests-Core'
		history: 	a Dictionary(#errors->a Set() #failures->a Set(#testTerm #testOpenBrac...etc...


ClyRunTestsFromMethodsCommand>>runTest:of:
	Receiver: a ClyRunTestsFromMethodsCommand
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
TestFailure: Unable to parse 'subt / pro'
8 January 2020 12:01:19.966163 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

CoPGrammerTest(TestAsserter)>>assert:description:
	Receiver: CoPGrammerTest>>#testTerm
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aStringOrBlock: 	'Unable to parse ''subt / pro'''
		aString: 	'Unable to parse ''subt / pro'''
	Receiver's instance variables: 
		testSelector: 	#testTerm
		expectedFails: 	nil
		parser: 	a CoPGrammer(502974720)
		result: 	digit expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(TestAsserter)>>deny:description:
	Receiver: CoPGrammerTest>>#testTerm
	Arguments and temporary variables: 
		aBooleanOrBlock: 	true
		aString: 	'Unable to parse ''subt / pro'''
	Receiver's instance variables: 
		testSelector: 	#testTerm
		expectedFails: 	nil
		parser: 	a CoPGrammer(502974720)
		result: 	digit expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>parse:rule:
	Receiver: CoPGrammerTest>>#testTerm
	Arguments and temporary variables: 
		aString: 	'subt / pro'
		aSymbol: 	#term
		production: 	a PPDelegateParser(term)
		context: 	a PPContext: ·subt / pro
	Receiver's instance variables: 
		testSelector: 	#testTerm
		expectedFails: 	nil
		parser: 	a CoPGrammer(502974720)
		result: 	digit expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest>>testTerm
	Receiver: CoPGrammerTest>>#testTerm
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTerm
		expectedFails: 	nil
		parser: 	a CoPGrammer(502974720)
		result: 	digit expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(TestCase)>>performTest
	Receiver: CoPGrammerTest>>#testTerm
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTerm
		expectedFails: 	nil
		parser: 	a CoPGrammer(502974720)
		result: 	digit expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ self setUp.
self performTest ] in CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testTerm
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTerm
		expectedFails: 	nil
		parser: 	a CoPGrammer(502974720)
		result: 	digit expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testTerm
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTerm
		expectedFails: 	nil
		parser: 	a CoPGrammer(502974720)
		result: 	digit expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testTerm
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testTerm
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testTerm
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testTerm
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testTerm
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testTerm
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testTerm
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testTerm
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testTerm
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testTerm
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testTerm
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testTerm
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testTerm
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testTerm
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testTerm
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testTerm
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


CoPGrammerTest(TestCase)>>runCaseManaged
	Receiver: CoPGrammerTest>>#testTerm
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTerm
		expectedFails: 	nil
		parser: 	a CoPGrammer(502974720)
		result: 	digit expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testTerm
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T12:01:19.946163+01:00
		failures: 	a Set(CoPGrammerTest>>#testTerm)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testTerm
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T12:01:19.946163+01:00
		failures: 	a Set(CoPGrammerTest>>#testTerm)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testTerm
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testTerm
		expectedFails: 	#()
		parser: 	a CoPGrammer(502974720)
		result: 	digit expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testTerm
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testTerm
		expectedFails: 	#()
		parser: 	a CoPGrammer(502974720)
		result: 	digit expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest class(TestCase class)>>debug:
	Receiver: CoPGrammerTest
	Arguments and temporary variables: 
		aSymbol: 	#testTerm
	Receiver's instance variables: 
		superclass: 	PPCompositeParserTest
		methodDict: 	a MethodDictionary(#parserClass->CoPGrammerTest>>#parserClass #test...etc...
		format: 	65548
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: THERE_BE_DRAGONS_HERE
TestFailure: Unable to parse '4*(4'
8 January 2020 12:01:33.126163 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

CoPGrammerTest(TestAsserter)>>assert:description:
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aStringOrBlock: 	'Unable to parse ''4*(4'''
		aString: 	'Unable to parse ''4*(4'''
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(1026676992)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(TestAsserter)>>deny:description:
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		aBooleanOrBlock: 	true
		aString: 	'Unable to parse ''4*(4'''
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(1026676992)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>parse:rule:
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		aString: 	'4*(4'
		aSymbol: 	#brackets
		production: 	a PPDelegateParser(brackets)
		context: 	a PPContext: ·4*(4
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(1026676992)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest>>testOpenBrackets
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(1026676992)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(TestCase)>>performTest
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(1026676992)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ self setUp.
self performTest ] in CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(1026676992)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(1026676992)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testOpenBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


CoPGrammerTest(TestCase)>>runCaseManaged
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(1026676992)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T12:01:33.108163+01:00
		failures: 	a Set(CoPGrammerTest>>#testOpenBrackets)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testOpenBrackets
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T12:01:33.108163+01:00
		failures: 	a Set(CoPGrammerTest>>#testOpenBrackets)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	#()
		parser: 	a CoPGrammer(1026676992)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testOpenBrackets
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testOpenBrackets
		expectedFails: 	#()
		parser: 	a CoPGrammer(1026676992)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest class(TestCase class)>>debug:
	Receiver: CoPGrammerTest
	Arguments and temporary variables: 
		aSymbol: 	#testOpenBrackets
	Receiver's instance variables: 
		superclass: 	PPCompositeParserTest
		methodDict: 	a MethodDictionary(#parserClass->CoPGrammerTest>>#parserClass #test...etc...
		format: 	65548
		layout: 	a FixedLayout
		organization: 	a ClasTHERE_BE_DRAGONS_HERE
TestFailure: Unable to parse '4)*'
8 January 2020 12:02:12.702163 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

CoPGrammerTest(TestAsserter)>>assert:description:
	Receiver: CoPGrammerTest>>#testCloseBrackets
	Arguments and temporary variables: 
		aBooleanOrBlock: 	false
		aStringOrBlock: 	'Unable to parse ''4)*'''
		aString: 	'Unable to parse ''4)*'''
	Receiver's instance variables: 
		testSelector: 	#testCloseBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(932802304)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(TestAsserter)>>deny:description:
	Receiver: CoPGrammerTest>>#testCloseBrackets
	Arguments and temporary variables: 
		aBooleanOrBlock: 	true
		aString: 	'Unable to parse ''4)*'''
	Receiver's instance variables: 
		testSelector: 	#testCloseBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(932802304)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(PPCompositeParserTest)>>parse:rule:
	Receiver: CoPGrammerTest>>#testCloseBrackets
	Arguments and temporary variables: 
		aString: 	'4)*'
		aSymbol: 	#brackets
		production: 	a PPDelegateParser(brackets)
		context: 	a PPContext: ·4)*
	Receiver's instance variables: 
		testSelector: 	#testCloseBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(932802304)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest>>testCloseBrackets
	Receiver: CoPGrammerTest>>#testCloseBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCloseBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(932802304)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest(TestCase)>>performTest
	Receiver: CoPGrammerTest>>#testCloseBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCloseBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(932802304)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ self setUp.
self performTest ] in CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testCloseBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCloseBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(932802304)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ self setUp.
self performTest ]
	Arguments and temporary variables: 
		aBlock: 	[ self tearDown.
self cleanUpInstanceVariables ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>runCase
		startpc: 	97
		numArgs: 	0


CoPGrammerTest(TestCase)>>runCase
	Receiver: CoPGrammerTest>>#testCloseBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCloseBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(932802304)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase runCase ] in [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testCloseBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testCloseBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ aTestCase runCase ]
	Arguments and temporary variables: 
		exception: 	Halt
		handlerAction: 	[ :halt | 
"if test was halted we should resume all background f...etc...
	Receiver's instance variables: 
		outerContext: 	[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was ...etc...
		startpc: 	115
		numArgs: 	0


[ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume all background failures 
			to debug all of them together with test process"
		failedProcesses keysDo: #resume.
		halt pass ] ] in TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testCloseBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testCloseBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>on:do:
	Receiver: [ [ aTestCase runCase ]
	on: Halt
	do: [ :halt | 
		"if test was halted we should resume a...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :err | 
"error here means that test is failed. So we should ch...etc...
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCaseSafelly:
		startpc: 	110
		numArgs: 	0


TestExecutionEnvironment>>runTestCaseSafelly:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testCloseBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testCloseBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ self runTestCaseSafelly: aTestCase ] in [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testCloseBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testCloseBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ensure:
	Receiver: [ self runTestCaseSafelly: aTestCase ]
	Arguments and temporary variables: 
		aBlock: 	[ testCompleted := true.
watchDogSemaphore signal ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted...etc...
		startpc: 	101
		numArgs: 	0


[ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemaphore signal ].	"signal that test case completes"
self checkForkedProcesses ] in TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testCloseBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testCloseBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


BlockClosure>>ifCurtailed:
	Receiver: [ [ self runTestCaseSafelly: aTestCase ]
	ensure: [ testCompleted := true.
		watchDogSemap...etc...
	Arguments and temporary variables: 
		aBlock: 	[ forkedProcesses removeAll.
failedProcesses removeAll ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	TestExecutionEnvironment>>runTestCase:
		startpc: 	96
		numArgs: 	0


TestExecutionEnvironment>>runTestCase:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testCloseBrackets
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testCloseBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


[ testEnv runTestCase: aTestCase ] in DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testCloseBrackets
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

[ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ] in CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


BlockClosure>>ensure:
	Receiver: [ self value: anExecutionEnvironment.
anExecutionEnvironment activated.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ self value: current.
anExecutionEnvironment deactivated ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentExecutionEnvironment class>>activate:for:
		startpc: 	91
		numArgs: 	0


CurrentExecutionEnvironment class>>activate:for:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		anExecutionEnvironment: 	a TestExecutionEnvironment
		aBlock: 	[ testEnv runTestCase: aTestCase ]
		current: 	a DefaultExecutionEnvironment
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


TestExecutionEnvironment(ExecutionEnvironment)>>beActiveDuring:
	Receiver: a TestExecutionEnvironment
	Arguments and temporary variables: 
		aBlock: 	[ testEnv runTestCase: aTestCase ]
	Receiver's instance variables: 
		watchDogProcess: 	a Process in [ self schedule.
"It is critical that the followi...etc...
		watchDogSemaphore: 	a Semaphore(a Process in [ self schedule.
"It is critical th...etc...
		testCase: 	CoPGrammerTest>>#testCloseBrackets
		maxTimeForTest: 	0:00:00:10
		forkedProcesses: 	a WeakSet(a Process in [ delaySemaphore wait ] in Delay>>wait)...etc...
		failedProcesses: 	an OrderedIdentityDictionary()
		testCompleted: 	false


DefaultExecutionEnvironment>>runTestCase:
	Receiver: a DefaultExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testCloseBrackets
		testEnv: 	a TestExecutionEnvironment
	Receiver's instance variables: 
a DefaultExecutionEnvironment

CurrentExecutionEnvironment class>>runTestCase:
	Receiver: CurrentExecutionEnvironment
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testCloseBrackets
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary(#default->CurrentExecutionEnvironment>>#default ...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentExecutionEnvironment
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a CurrentExecutionEnvironment


CoPGrammerTest(TestCase)>>runCaseManaged
	Receiver: CoPGrammerTest>>#testCloseBrackets
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCloseBrackets
		expectedFails: 	nil
		parser: 	a CoPGrammer(932802304)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


[ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCase announce: TestCaseEnded withResult: self.
"To not affect performance of big test suites following logic is not inside addPass: method"
errors remove: aTestCase ifAbsent: [  ].
failures remove: aTestCase ifAbsent: [  ].
self addPass: aTestCase ] in TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testCloseBrackets
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T12:02:12.684163+01:00
		failures: 	a Set(CoPGrammerTest>>#testCloseBrackets)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


BlockClosure>>on:do:
	Receiver: [ aTestCase announce: TestCaseStarted withResult: self.
aTestCase runCaseManaged.
aTestCas...etc...
	Arguments and temporary variables: 
		exception: 	an ExceptionSet
		handlerAction: 	[ :ex | 
ex sunitAnnounce: aTestCase toResult: self.
ex pass ]
	Receiver's instance variables: 
		outerContext: 	TestResult>>runCaseForDebug:
		startpc: 	150
		numArgs: 	0


TestResult>>runCaseForDebug:
	Receiver: 1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, 0 unexpected passes...etc...
	Arguments and temporary variables: 
		aTestCase: 	CoPGrammerTest>>#testCloseBrackets
	Receiver's instance variables: 
		timeStamp: 	2020-01-08T12:02:12.684163+01:00
		failures: 	a Set(CoPGrammerTest>>#testCloseBrackets)
		errors: 	an OrderedCollection()
		passed: 	an OrderedCollection()
		skipped: 	an OrderedCollection()


[ result runCaseForDebug: self ] in CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testCloseBrackets
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testCloseBrackets
		expectedFails: 	#()
		parser: 	a CoPGrammer(932802304)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


BlockClosure>>ensure:
	Receiver: [ result runCaseForDebug: self ]
	Arguments and temporary variables: 
		aBlock: 	[ self classForTestResource resetResources: self resources.
result upda...etc...
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CoPGrammerTest(TestCase)>>debug
		startpc: 	90
		numArgs: 	0


CoPGrammerTest(TestCase)>>debug
	Receiver: CoPGrammerTest>>#testCloseBrackets
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 skipped, 0 expected failures, 1 failures, 0 errors, ...etc...
	Receiver's instance variables: 
		testSelector: 	#testCloseBrackets
		expectedFails: 	#()
		parser: 	a CoPGrammer(932802304)
		result: 	$( expected at 0
		debugResult: 	nil
		testBrackets: 	nil
		testMul: 	nil
		testNum: 	nil
		testPro: 	nil
		testSubt: 	nil
		testTerm: 	nil
		testVar: 	nil


CoPGrammerTest class(TestCase class)>>debug:
	Receiver: CoPGrammerTest
	Arguments THERE_BE_DRAGONS_HERE

8 January 2020 5:38:01.956163 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

Process>>terminate
	Receiver: a Process in [ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	[ self value.
Processor terminateActive ] in BlockClosure>>ne...etc...
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	a WeakArray(a DefaultExecutionEnvironment nil nil nil nil nil nil nil nil ...etc...
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a GLMRubricSmalltalkTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a GLMRubricSmalltalkTextModel
		menuMorph: 	nil
		editor: 	a RubSmalltalkEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(564771072)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@126)
		owner: 	a TransformWithLayoutMorph(229682944)
		submorphs: 	an Array(a RubCursor(1016744192) a RubPrimarySelectionMorph(50734259...etc...
		fullBounds: 	(0@0) corner: (580@126)
		color: 	Color transparent
		extension: 	a MorphExtension (892247808) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(528136448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1016744192)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(564771072)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@126)
		owner: 	a TransformWithLayoutMorph(229682944)
		submorphs: 	an Array(a RubCursor(1016744192) a RubPrimarySelectionMorph(50734259...etc...
		fullBounds: 	(0@0) corner: (580@126)
		color: 	Color transparent
		extension: 	a MorphExtension (892247808) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(528136448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1016744192)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(564771072)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@126)
		owner: 	a TransformWithLayoutMorph(229682944)
		submorphs: 	an Array(a RubCursor(1016744192) a RubPrimarySelectionMorph(50734259...etc...
		fullBounds: 	(0@0) corner: (580@126)
		color: 	Color transparent
		extension: 	a MorphExtension (892247808) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(528136448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1016744192)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(564771072)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@126)
		owner: 	a TransformWithLayoutMorph(229682944)
		submorphs: 	an Array(a RubCursor(1016744192) a RubPrimarySelectionMorph(50734259...etc...
		fullBounds: 	(0@0) corner: (580@126)
		color: 	Color transparent
		extension: 	a MorphExtension (892247808) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(528136448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(1016744192)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(117209344)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(564771072)
	Receiver's instance variables: 
		bounds: 	(426@1089) corner: (442@1105)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (454138112)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(418@1080) mouseOver 86403416 nil]
		targetOffset: 	(173.0@93.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 86403416 409 1080 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(117209344)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(426@1089) corner: (442@1105)
		owner: 	a WorldMorph(428085248) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (454138112)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(418@1080) mouseOver 86403416 nil]
		targetOffset: 	(173.0@93.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 86403416 409 1080 0 0 0 1)
		lastKeyScanCode: 	83
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	3


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1080@1857)
		hand: 	a HandMorph(117209344)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(1019346688) a GLMS...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (608983296) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(117209344))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(117209344))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(117209344))
		viewBox: 	(0@0) corner: (1080@1857)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(410700032))(a Spec...etc...
		lastStepTime: 	49173951
		lastStepMessage: 	nil
		lastCycleTime: 	49173979
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1016744192)))
		lastAlarmTime: 	49173951
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(117209344)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1080@1857)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(1019346688) a GLMS...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (608983296) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(428085248) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1080@1857)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(467756288) a TaskbarMorph(1019346688) a GLMS...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (608983296) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(428085248) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(42...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2020-01-08T03:58:27.471163+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2020-01-08T03:58:27.471163+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2020-01-08T03:58:27.471163+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2020-01-08T03:58:27.471163+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2020-01-08T03:58:27.471163+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2020-01-08T03:58:27.471163+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
NotFound: Failed to resolve path '/builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetechnology/Moose': Das System kann den angegebenen Pfad nicht finden.

8 January 2020 6:00:55.807163 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

IceLibgitErrorVisitor>>visitENOTFOUND:
	Receiver: an IceLibgitErrorVisitor
	Arguments and temporary variables: 
		anError: 	LGit_GIT_ENOTFOUND: Failed to resolve path '/builds/workspace/moose-7....etc...
	Receiver's instance variables: 
		context: 	IceLibgitRepository(Moose)


LGit_GIT_ENOTFOUND>>acceptError:
	Receiver: LGit_GIT_ENOTFOUND: Failed to resolve path '/builds/workspace/moose-7.0-64bit/pharo-local/...etc...
	Arguments and temporary variables: 
		aVisitor: 	an IceLibgitErrorVisitor
	Receiver's instance variables: 
		messageText: 	'Failed to resolve path ''/builds/workspace/moose-7.0-64bit/pharo-...etc...
		tag: 	nil
		signaler: 	a LGitReturnCodeEnum(#git_enotfound [-3])
		signalContext: 	LGit_GIT_ENOTFOUND(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		object: 	a LGitErrorTypeEnum(#giterr_os [2])


[ :error | error acceptError: (IceLibgitErrorVisitor onContext: self) ] in IceLibgitRepository>>handleLibgitError:
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 
		aBlock: 	[ | fromTree toTree diff |
fromTree := (LGitCommit
	of: self repository...etc...
		error: 	LGit_GIT_ENOTFOUND: Failed to resolve path '/builds/workspace/moose-7.0-...etc...
	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


BlockClosure>>cull:
	Receiver: [ :error | error acceptError: (IceLibgitErrorVisitor onContext: self) ]
	Arguments and temporary variables: 
		anArg: 	LGit_GIT_ENOTFOUND: Failed to resolve path '/builds/workspace/moose-7.0-...etc...
	Receiver's instance variables: 
		outerContext: 	IceLibgitRepository>>handleLibgitError:
		startpc: 	71
		numArgs: 	1


Context>>evaluateSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	LGit_GIT_ENOTFOUND: Failed to resolve path '/builds/workspace/moose-...etc...
		value: 	nil
	Receiver's instance variables: 
		sender: 	IceLibgitRepository>>handleLibgitError:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ | fromTree toTree diff |
fromTree := (LGitCommit
	of: self reposito...etc...


Context>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	LGit_GIT_ENOTFOUND: Failed to resolve path '/builds/workspace/moose-...etc...
	Receiver's instance variables: 
		sender: 	IceLibgitRepository>>handleLibgitError:
		pc: 	30
		stackp: 	2
		method: 	BlockClosure>>#on:do:
		closureOrNil: 	nil
		receiver: 	[ | fromTree toTree diff |
fromTree := (LGitCommit
	of: self reposito...etc...


LGit_GIT_ENOTFOUND(Exception)>>signal
	Receiver: LGit_GIT_ENOTFOUND: Failed to resolve path '/builds/workspace/moose-7.0-64bit/pharo-local/...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	'Failed to resolve path ''/builds/workspace/moose-7.0-64bit/pharo-...etc...
		tag: 	nil
		signaler: 	a LGitReturnCodeEnum(#git_enotfound [-3])
		signalContext: 	LGit_GIT_ENOTFOUND(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		object: 	a LGitErrorTypeEnum(#giterr_os [2])


LGit_GIT_ENOTFOUND class(LGitCallReturnHandler class)>>signalWith:
	Receiver: LGit_GIT_ENOTFOUND
	Arguments and temporary variables: 
		anError: 	a LGitError ()
	Receiver's instance variables: 
		superclass: 	LGitCallReturnHandler
		methodDict: 	a MethodDictionary(#acceptError:->LGit_GIT_ENOTFOUND>>#acceptError:...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LGit_GIT_ENOTFOUND
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'LibGit-Core-Exceptions-ReturnCodes'


LGitReturnCodeEnum>>handleLGitReturnCode
	Receiver: a LGitReturnCodeEnum(#git_enotfound [-3])
	Arguments and temporary variables: 
		handler: 	LGit_GIT_ENOTFOUND
	Receiver's instance variables: 
		value: 	-3


LGitRepository(LGitExternalObject)>>withReturnHandlerDo:
	Receiver: a LGitRepository (<not initialized>)
	Arguments and temporary variables: 
		callBlock: 	[ self
	repository_open: self
	bare_path: self repositoryReference p...etc...
	Receiver's instance variables: 
		handle: 	@ 16r00000000
		repositoryPath: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/mo...etc...
		isOpen: 	nil
		workingDirectory: 	nil


LGitRepository>>open
	Receiver: a LGitRepository (<not initialized>)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		handle: 	@ 16r00000000
		repositoryPath: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/mo...etc...
		isOpen: 	nil
		workingDirectory: 	nil


IceLibgitRepository>>repositoryHandle
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


[ | fromTree toTree diff |
fromTree := (LGitCommit
	of: self repositoryHandle
	fromHexString: aCommitish id) tree.
toTree := (LGitCommit
	of: self repositoryHandle
	fromHexString: otherCommitish id) tree.
diff := fromTree diffTo: toTree.
^ diff files ] in IceLibgitRepository>>changedFilesBetween:and:
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 
		aCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		otherCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		fromTree: 	nil
		toTree: 	nil
		diff: 	nil
	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


BlockClosure>>on:do:
	Receiver: [ | fromTree toTree diff |
fromTree := (LGitCommit
	of: self repositoryHandle
	fromHexStri...etc...
	Arguments and temporary variables: 
		exception: 	LGitCallReturnHandler
		handlerAction: 	[ :error | error acceptError: (IceLibgitErrorVisitor onContext: ...etc...
	Receiver's instance variables: 
		outerContext: 	IceLibgitRepository>>changedFilesBetween:and:
		startpc: 	96
		numArgs: 	0


IceLibgitRepository>>handleLibgitError:
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 
		aBlock: 	[ | fromTree toTree diff |
fromTree := (LGitCommit
	of: self repository...etc...
	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


IceLibgitRepository>>changedFilesBetween:and:
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 
		aCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		otherCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


IceGitCommit>>changesFromCommit:
	Receiver: IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Arguments and temporary variables: 
		anIceGitCommit: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		files: 	nil
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packageCache: 	nil
		id: 	'839b7f98f00f68cdd2632f61a41e888b46832a73'
		author: 	'Benoît Verhaeghe'
		datetime: 	2019-07-26T12:02:03+02:00
		ancestorIds: 	#('e631df17f7f4031a22034cb4c5867e54ee3019e3' 'b91c8f6d46d644a9034f...etc...
		comment: 	'Merge pull request #1721 from badetitou/add_petitJson

add PetitJson ...etc...
		packageNamesCache: 	nil


IceWorkingCopy>>changesTo:
	Receiver: an IceWorkingCopy
	Arguments and temporary variables: 
		aCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		removedPackages: 	nil
		changes: 	a Set()
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packages: 	a Dictionary(size 203)
		referenceCommit: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		shouldIgnoreNotifications: 	false
		project: 	an IceBasicProject
		properties: 	an IceRepositoryProperties


IceDiff>>build
	Receiver: an IceDiff
	Arguments and temporary variables: 
		leftTree: 	IceNode()
		rightTree: 	IceNode()
	Receiver's instance variables: 
		tree: 	nil
		source: 	an IceWorkingCopy
		target: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		writerClass: 	nil


IceDiff class>>from:to:
	Receiver: IceDiff
	Arguments and temporary variables: 
		sourceCommitish: 	an IceWorkingCopy
		targetCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#accept:->IceDiff>>#accept: #build->IceDiff>>#bu...etc...
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#IceDiff
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Changes'


IceWorkingCopy>>diffTo:
	Receiver: an IceWorkingCopy
	Arguments and temporary variables: 
		aCommitish: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packages: 	a Dictionary(size 203)
		referenceCommit: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		shouldIgnoreNotifications: 	false
		project: 	an IceBasicProject
		properties: 	an IceRepositoryProperties


IceWorkingCopy>>diffToReferenceCommit
	Receiver: an IceWorkingCopy
	Arguments and temporary variables: 

	Receiver's instance variables: 
		repository: 	IceLibgitRepository(Moose)
		packages: 	a Dictionary(size 203)
		referenceCommit: 	IceGitCommit(839b7f98f00f68cdd2632f61a41e888b46832a73)
		shouldIgnoreNotifications: 	false
		project: 	an IceBasicProject
		properties: 	an IceRepositoryProperties


IceLibgitRepository(IceRepository)>>workingCopyDiff
	Receiver: IceLibgitRepository(Moose)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	'Moose'
		workingCopy: 	an IceWorkingCopy
		index: 	an IceGitIndex
		commitsInPackageCache: 	a LRUCache(#1 1/30 [ 1 ] 100%)
		location: 	File @ /builds/workspace/moose-7.0-64bit/pharo-local/iceberg/moosetec...etc...
		commitCache: 	a LRUCache(#3 3/30 [ 1 ] 100%)
		handle: 	a LGitRepository (<not initialized>)


IceTipWorkingCopyDiffModel>>newDiff
	Receiver: an IceTipWorkingCopyDiffModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		entity: 	IceLibgitRepository(Moose)
		repositoryModel: 	an IceTipRepositoryModel
		diff: 	nil


IceTipWorkingCopyDiffModel>>diff
	Receiver: an IceTipWorkingCopyDiffModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		entity: 	IceLibgitRepository(Moose)
		repositoryModel: 	an IceTipRepositoryModel
		diff: 	nil


IceTipWorkingCopyDiffModel(IceTipDiffModel)>>tree
	Receiver: an IceTipWorkingCopyDiffModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		entity: 	IceLibgitRepository(Moose)
		repositoryModel: 	an IceTipRepositoryModel
		diff: 	nil


IceTipWorkingCopyDiffModel(IceTipDiffModel)>>treeRoots
	Receiver: an IceTipWorkingCopyDiffModel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		entity: 	IceLibgitRepository(Moose)
		repositoryModel: 	an IceTipRepositoryModel
		diff: 	nil


IceTipDiffSelectingPanel>>newChangeTreeDataSource
	Receiver: an IceTipDiffSelectingPanel
	Arguments and temporary variables: 

	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		focusOrder: 	nil
		owner: 	an IceTipCommitBrowser
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Diff' ]
		model: 	an IceTipWorkingCopyDiffModel
		changeList: 	a MorphicGenericAdapter
		diffPanel: 	a DiffPresenter


IceTipDiffSelectingPanel(IceTipDiffPanel)>>initializeChangeList
	Receiver: an IceTipDiffSelectingPanel
	Arguments and temporary variables: 
		dataSource: 	nil
	Receiver's instance variables: 
		dependents: 	nil
		announcer: 	an Announcer
		focusOrder: 	nil
		owner: 	an IceTipCommitBrowser
		window: 	a NewValueHolder[ nil ]
		spec: 	nil
		extentHolder: 	a NewValueHolder[ nil ]
		needRebuild: 	a NewValueHolder[ true ]
		additionalKeyBindings: 	a Dictionary()
		keyStrokesForNextFocusHolder: 	a CollectionValueHolder[ an Array() ]
		keyStrokesForPreviousFocusHolder: 	a CollectionValueHolder[ an Array() ]
		windowIcon: 	a NewValueHolder[ nil ]
		aboutText: 	a NewValueHolder[ nil ]
		askOkToClose: 	a NewValueHolder[ false ]
		titleHolder: 	a CollectionValueHolder[ 'Diff' ]
		model: 	an IceTipWorkingCopyDiffModel
		changeList: 	a MorphicGenericAdapter
		diffPanel: 	a DiffPresenter


IceTipDiffSelectingPanel(IceTipDiffPanel)>>initializeWidgets
	Receiver: an IceTipDiffSelectingPanel
	Arguments and temporary variables: 
THERE_BE_DRAGONS_HERE
Pharo cannot write to the changes file named C:\Users\Kaleta-BT\Documents\Pharo\images\Hopefully with PPBrowser\Hopefully with PPBrowser.changes.

Please check that you have write permission for this file.

You won't be able to save this image correctly until you fix this.
8 January 2020 6:19:18.996261 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

StartupUIManager>>inform:
	Receiver: a StartupUIManager
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to the changes file named C:\Users\Kaleta-BT\Document...etc...
		tmp1: 	nil
	Receiver's instance variables: 
		doNotQuitOnRestart: 	false
		uiManager: 	nil


PharoFilesOpener(Object)>>inform:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to the changes file named C:\Users\Kaleta-BT\Document...etc...
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to &fileRef.

Please check that you have write permis...etc...
		arg2: 	'the changes file named C:\Users\Kaleta-BT\Documents\Pharo\images\Hopeful...etc...
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>inform:withChangesRef:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to &fileRef.

Please check that you have write permis...etc...
		arg2: 	'C:\Users\Kaleta-BT\Documents\Pharo\images\Hopefully with PPBrowser\Hopef...etc...
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>informProblemInChanges:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	'Pharo cannot write to &fileRef.

Please check that you have write permis...etc...
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>changesFileOrNilReadOnly:silent:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	false
		arg2: 	false
		tmp1: 	SourceFile(C:\Users\Kaleta-BT\Documents\Pharo\images\Hopefully with PPBro...etc...
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>changesFileOrNilReadOnly:
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 
		arg1: 	false
	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


PharoFilesOpener>>changesFileOrNil
	Receiver: a PharoFilesOpener
	Arguments and temporary variables: 

	Receiver's instance variables: 
		shouldInformAboutReadOnlyChanges: 	true


SourceFileArray>>ensureOpen
	Receiver: a SourceFileArray
	Arguments and temporary variables: 

	Receiver's instance variables: 
		files: 	#(nil nil)
		readOnlyQueue: 	SharedQueue with 0 items
		flushChanges: 	true


SmalltalkImage>>openSourceFiles
	Receiver: Smalltalk
	Arguments and temporary variables: 

	Receiver's instance variables: 
		globals: 	a SystemDictionary(lots of globals)
		deferredStartupActions: 	nil
		specialObjectsArray: 	an Array(nil false true #Processor->Processor Bitmap Small...etc...
		session: 	nil
		vm: 	a VirtualMachine


SourceFileArray class>>startUp:
	Receiver: SourceFileArray
	Arguments and temporary variables: 
		arg1: 	true
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#changeRecordsFor:->SourceFileArray>>#changeReco...etc...
		format: 	65539
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#SourceFileArray
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'System-Sources-Sources'


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(SourceFileArray)
	Arguments and temporary variables: 
		arg1: 	true
	Receiver's instance variables: 
		registeredClassName: 	#SourceFileArray


[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	a ClassSessionHandler(SourceFileArray)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2020-01-08T18:19:18.798261+01:00


[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(Sm...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2020-01-08T18:19:18.798261+01:00


BlockClosure>>on:do:
	Receiver: [ arg2 value: arg3 ]
	Arguments and temporary variables: 
		arg1: 	Exception
		arg2: 	[ :arg4 | self errorHandler handleError: arg4 ]
	Receiver's instance variables: 
		outerContext: 	[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | sel...etc...
		startpc: 	69
		numArgs: 	0


[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(Sm...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
		arg3: 	a ClassSessionHandler(SourceFileArray)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2020-01-08T18:19:18.798261+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(Sm...etc...
		arg2: 	[ :arg2 | arg2 startup: arg1 ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2020-01-08T18:19:18.798261+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2020-01-08T18:19:18.798261+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		arg1: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection()
		id: 	nil
		creationTime: 	2020-01-08T18:19:18.798261+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	false
		tmp1: 	true
		tmp2: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
StartupUIManager>>inform:
PharoFilesOpener(Object)>>inform:
PharoFilesOpener>>inform:withRef:
PharoFilesOpener>>inform:withChangesRef:
PharoFilesOpener>>informProblemInChanges:
PharoFilesOpener>>changesFileOrNilReadOnly:silent:
PharoFilesOpener>>changesFileOrNilReadOnly:
PharoFilesOpener>>changesFileOrNil
SourceFileArray>>ensureOpen
SmalltalkImage>>openSourceFiles
SourceFileArray class>>startUp:
ClassSessionHandler>>startup:
[ :arg2 | arg2 startup: arg1 ] in WorkingSession>>runStartup:
[ arg2 value: arg3 ] in [ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :arg3 | 
[ arg2 value: arg3 ]
	on: Exception
	do: [ :arg4 | self errorHandler handleError: arg4 ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Instance of ZnCharacterReadStream did not understand #flush
8 January 2020 6:21:33.914261 pm

VM: Win32 - X64 - 6.2 - CoInterpreter VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2509 uuid: 91e81f64-95de-4914-a960-8f842be3a194 Sep 13 2019
VM: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm Date: Wed Jul 3 16:41:39 2019 CommitHash: 4e4c5b5a0 Plugins: 201907031441-pharo Guille@DESKTOP-MG6660L:projects/vm7/opensmalltalk-vm

Image: Pharo7.0.3 [Build information: Pharo-7.0.3+build.158.sha.0903ade8a6c96633f07e0a7f1baa9a5d48cfdf55 (64 Bit)]

ZnCharacterReadStream(Object)>>doesNotUnderstand: #flush
	Receiver: a ZnCharacterReadStream
	Arguments and temporary variables: 
		aMessage: 	flush
		exception: 	MessageNotUnderstood: ZnCharacterReadStream>>flush
		resumeValue: 	nil
	Receiver's instance variables: 
		stream: 	a ZnBufferedReadStream
		encoder: 	a ZnUTF8Encoder
		peeked: 	nil


SourceFile>>flush
	Receiver: SourceFile(C:\Users\Kaleta-BT\Documents\Pharo\images\Hopefully with PPBrowser\Hopefully wi...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		path: 	'C:\Users\Kaleta-BT\Documents\Pharo\images\Hopefully with PPBrowser\Hopef...etc...
		stream: 	a ZnCharacterReadStream
		potentialLocations: 	an Array({imageDirectory} File @ .)


SourceFileArray>>forceChangesToDisk
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		changesFile: 	SourceFile(C:\Users\Kaleta-BT\Documents\Pharo\images\Hopefully wit...etc...
	Receiver's instance variables: 
		files: 	an Array(SourceFile(C:\Users\Kaleta-BT\Documents\Pharo\images\Hopefully ...etc...
		readOnlyQueue: 	SharedQueue with 1 items
		flushChanges: 	true


ChangesLog>>logChange:
	Receiver: a ChangesLog
	Arguments and temporary variables: 
		aStringOrText: 	'----SNAPSHOT----2020-01-08T18:21:33.907261+01:00 Hopefully with...etc...
		aString: 	'----SNAPSHOT----2020-01-08T18:21:33.907261+01:00 Hopefully with PPBro...etc...
	Receiver's instance variables: 
		startupStamp: 	nil


ChangesLog>>logSnapshot:andQuit:
	Receiver: a ChangesLog
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		message: 	'----SNAPSHOT----2020-01-08T18:21:33.907261+01:00 Hopefully with PPBro...etc...
	Receiver's instance variables: 
		startupStamp: 	nil


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		arg1: 	true
		arg2: 	false
		tmp1: 	nil
		tmp2: 	nil
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
ZnCharacterReadStream(Object)>>doesNotUnderstand: #flush
SourceFile>>flush
SourceFileArray>>forceChangesToDisk
ChangesLog>>logChange:
ChangesLog>>logSnapshot:andQuit:
SessionManager>>launchSnapshot:andQuit:
[ tmp3 := self launchSnapshot: arg1 andQuit: arg2.
tmp1 signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

